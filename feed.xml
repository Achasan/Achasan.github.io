<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memory Repo.</title>
    <description>by Achasan</description>
    <link>https://achasan.github.io//</link>
    <atom:link href="https://achasan.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 10 Feb 2022 18:22:27 +0900</pubDate>
    <lastBuildDate>Thu, 10 Feb 2022 18:22:27 +0900</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>[정보처리기사] 3.데이터베이스 설계</title>
        <description>&lt;p&gt;정보처리기사 필기 - 논리 데이터베이스 설계&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://powerdev.tistory.com/37&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 주소에서 외워야하는 키워드 위주로 정리하여 타이핑&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;데이터-베이스-설계&quot;&gt;데이터 베이스 설계&lt;/h1&gt;

&lt;h2 id=&quot;데이터베이스-설계-시-고려사항&quot;&gt;데이터베이스 설계 시 고려사항&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;무결성(정확성)
    &lt;ul&gt;
      &lt;li&gt;삽입, 삭제, 갱신 등의 연산 후에도 저장된 데이터가 정해진 제약조건을 만족해야한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;일관성&lt;/li&gt;
  &lt;li&gt;회복&lt;/li&gt;
  &lt;li&gt;보안&lt;/li&gt;
  &lt;li&gt;효율성 : 응답시간을 단축하여 시스템의 생산성, 저장공간 최적화가 가능해야한다.&lt;/li&gt;
  &lt;li&gt;데이터베이스 확장&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-데이터베이스-설계-순서&quot;&gt;★ 데이터베이스 설계 순서&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;요구분석 : 사용자의 요구사항 분석, 요구 조건 명세서 작성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개념적 설계 : DBMS에 독립적인 개념 스키마 설계(E-R 모델), 트랜잭션 모델링&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;정보 모델링, 개념화&lt;/li&gt;
      &lt;li&gt;현실 세계에 대한 인식을 추상적인 개념으로 표현하는 과정&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;개념 스키마 모델링, 트랜잭션 모델링, E-R 다이어그램&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;논리적 설계 : DBMS에 맞는 스키마를 설계, 트랜잭션 인터페이스 설계&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터 모델링&lt;/li&gt;
      &lt;li&gt;현실에서 발생한 자료를 컴퓨터로 처리할 수 있는 저장장치에 저장할 수 있게 특정 dBMS가 지원하는 논리적 자료구조로 변환시키는 과정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;물리적 설계 : DBMS에 맞는 물리적 구조를 설계, 트랜잭션 세부 설계&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터 구조화&lt;/li&gt;
      &lt;li&gt;디스크 등 물리적 저장장치에 저장가능한 물리적 구조의 데이터로 변환하는 과정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;구현 : DDL로 데이터베이스 생성, 트랜잭션 작성&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;DBMS의 DDL을 이용해 데이터베이스 파일 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;데이터-모델의-개념&quot;&gt;데이터 모델의 개념&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;현실 세계의 정보들을 컴퓨터에 표현하기 위해 단순화, 추상화하여 체계적으로 표현한 개념적 모형&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;-데이터-모델-구성-요소&quot;&gt;★ 데이터 모델 구성 요소&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;개체(Entity)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터베이스에 표현하려는 것, 사람이 생각하는 개념, 정보단위&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;속성(Attribute)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터의 가장 작은 논리적 단위, 파일 구조상의 데이터 항목 또는 데이터 필드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;관계(Relationship)&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;개체 간의 관계 또는 속성 간의 논리적인 연결을 의미&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-데이터-모델에-표시할-요소&quot;&gt;★ 데이터 모델에 표시할 요소&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;구조(Structure)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;논리적으로 표현된 개체 타입을 간의 관계로서 데이터 구조 및 정적 성질 표현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;연산(Operation)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;DB에 저장된 실제 데이터를 처리하는 작업에 대한 명세, 데이터베이스를 조작하는 기본 도구&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;제약 조건(Constraint)&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;실제 데이터의 논리적인 제약 조건&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-모델의-종류&quot;&gt;데이터 모델의 종류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;개념적 데이터 모델&lt;/li&gt;
  &lt;li&gt;논리적 데이터 모델 : 관계, 계층, 네트워크 모델로 구분&lt;/li&gt;
  &lt;li&gt;물리적 데이터 모델&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;개체entity&quot;&gt;개체(Entity)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터베이스에 표현하려는 것, 사람이 생각하는 개념이나 정보 단위같은 현실 세계의 대상체&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-15-44-33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;교수 : 개체(Entity)&lt;/li&gt;
  &lt;li&gt;교수번호, 성명, 전공, 소속 : 속성(Attribute)&lt;/li&gt;
  &lt;li&gt;각 행 : 개체 인스턴스(Instance)
    &lt;ul&gt;
      &lt;li&gt;개체 인스턴스는 개체를 구성하고 있는 각 속성들이 값을 가져 하나의 개체를 나타내는 것으로 &lt;strong&gt;어커런스(Occurance)&lt;/strong&gt;라고도 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개체의-특성&quot;&gt;개체의 특성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;독립적으로 존재하는 유형, 무형의 정보. 속성으로 구성&lt;/li&gt;
  &lt;li&gt;파일 시스템의 레코드에 대응&lt;/li&gt;
  &lt;li&gt;영속적으로 존재하는 개체의 집합&lt;/li&gt;
  &lt;li&gt;독립적으로 존재, 그 자체로 구별&lt;/li&gt;
  &lt;li&gt;유일한 식별자를 가짐&lt;/li&gt;
  &lt;li&gt;다른 개체의 &lt;strong&gt;하나 이상&lt;/strong&gt;의 관계&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;속성attribute&quot;&gt;속성(Attribute)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터베이스를 구성하는 가장 작은 논리적 단위&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;특성&quot;&gt;특성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;파일 구조 상 데이터 항목, 필드에 해당&lt;/li&gt;
  &lt;li&gt;개체를 구성하는 항목&lt;/li&gt;
  &lt;li&gt;개체 특성을 기술&lt;/li&gt;
  &lt;li&gt;속성의 수를 Degree, 차수라고한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;속성의-종류&quot;&gt;속성의 종류&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-15-50-44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;속성의-특성에-따른-종류&quot;&gt;속성의 특성에 따른 종류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;기본 속성(Basic Attribute) : 업무분석으로 정의, 속성중 가장 많고 일반적, 업무상 코드로 정의한 속성은 기본 속성에서 제외&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설게 속성(Designed Attribute) : 설계 과정에서 도출해내는 속성&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;업무에 필요한 데이터 외에 데이터 모델링을 위해 업무를 규칙화하려고 속성을 새로 만들거나 변형하여 정의&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파생 속성(Derived Attribute) : 다른 속성으로부터 계산이나 변형 등의 영향을 받아 발생, 되도록 적은 수로 정의&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;개체-구성-방식에-따른-분류&quot;&gt;개체 구성 방식에 따른 분류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;기본키 속성(Primary Key Attribute) : 개체의 속성을 식별할 수 있는 속성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;외래키 속성(Foreign Key Attribute) : 다른 개체와의 관계에서 포함된 속성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일반 속성 : 개체에 포함되어있고 기본키, 외래키에 포함되지않은 속성&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관계relationship&quot;&gt;관계(Relationship)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;개체와 개체 사이의 논리적인 연결을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-15-53-34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 간 관계, 속성 간 관계로 구분&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;관계의-형태&quot;&gt;관계의 형태&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-15-53-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;관계의-종류&quot;&gt;관계의 종류&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;종속 관계(Dependent Relationship) : 두 개체 사이의 주종 관계 표현, 식발 관계와 비식별 관계로 구분&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;식별 관계 : A 개체의 기본키가 B 개체의 외래키이민서 동시에 기본키&lt;/li&gt;
      &lt;li&gt;비식별 관계 : A 개체의 기본키가 B 개체의 비기본키 영역에서 외래키가 되는 관계&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;중복 관계(Redundant Relationship) : 두 개체 사이에서 2번 이상의 종속관계 발생&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;재귀 관계(Recursive Relationship) : 자기 자신과 관계를 가짐, 순환 관계&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;배타 관계(Exclusive Relationship) : 속성이나 구분자로 특성을 분할하는 관계. AND 관계, OR 관계로 구분&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;식별자identifier&quot;&gt;식별자(Identifier)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;하나의 개체 내에서 각각의 인스턴스를 유일하게 구분할 수 잇는 구분자, 모든 객체는 하나 이상의 식별자를 반드시 가진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;식별자-분류-기준&quot;&gt;식별자 분류 기준&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;대표성 여부 : 두 식별자 모두 개체를 유일하게 식별가능해야한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;주 식별자(Primaty Identifier) : 하나의 개체에 하나만 존재, 기본키로 지정됨&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;주 식별자의 4가지 특성 : 유일성, 최소성, 불변성, 존재성&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;보조 식별자(Alternate Identifier) : 주 식별자를 대신하여 개체를 식별&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;하나의 객체에 한 개 이상 존재&lt;/li&gt;
          &lt;li&gt;물리적 테이블에서 유니크 인덱스로 지정되어 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스스로 생성 여부 :&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;내부 식별자(Internal Identifier) : 개체 내에서 스스로 만들어지는 식별자&lt;/li&gt;
      &lt;li&gt;외부 식별자(Foreign Identifier) : 외부 개체의 식별자를 가져와 사용하는 식별자(연결자 역할)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단일 속성 여부&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;단일 식별자(Single Identifier) : 주 식별자가 한 가지 속성으로만 구성된 식별자(PK)&lt;/li&gt;
      &lt;li&gt;복합 식별자(Composite Identifier) : 주 식별자가 두 개 이상의 속성으로 구성된 식별자(PK + FK)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;대체 여부&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;원조 식별자(Original Identifier) :&lt;/li&gt;
      &lt;li&gt;대리 식별자(Surrogate Identifier) : 주 식별자의 속성이 두 개 잇아인 경우 속성들을 하나의 속서응로 묶어 사용하는 식별자, 인조 식별자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;e-r개체-관계-모델&quot;&gt;E-R(개체-관계) 모델&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;개념적 모델의 가장 대표적인 것, 1976년 피터 첸(Peter Chen)에 의해 제안됨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;E-R 다이어그램으로 표현, 1:1 / 1:N / N:M 등의 관계 유형을 제한없이 나타 낼 수 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;E-R 다이어그램&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;E-R 모델의 기본 아이디어를 기호를 사용하여 시각적으로 표현&lt;/li&gt;
      &lt;li&gt;피터 첸 표기법, 정보 공학 표기법, 바커 표기법 등이 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;피터-첸-표기법&quot;&gt;피터 첸 표기법&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-16-11-38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정보-공학-표기법&quot;&gt;정보 공학 표기법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1981년 클리프 핀겔쉬타인과 제임스 마틴이 공동 개발&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-16-11-56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Feb 2022 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//Engineer_Information_Processing_1</link>
        <guid isPermaLink="true">https://achasan.github.io//Engineer_Information_Processing_1</guid>
        
        <category>TIL</category>
        
        
      </item>
    
      <item>
        <title>봄봄(이 영화 봄?봄!) 프로젝트 회고</title>
        <description>&lt;p&gt;파이널 프로젝트가 끝이났다.&lt;/p&gt;

&lt;p&gt;이전에 &lt;a href=&quot;https://github.com/achasan/markethani&quot;&gt;마켓하니&lt;/a&gt; 프로젝트를 하면서 감을 잡았다고 생각했지만 새로운 프레임워크나 라이브러리를 가지고 기능을 구현할 때 마다 직접 부딪히며 완성해 나가야하는 건 어쩔 수 없는 것 같다. 그래도 하나의 기능을 구현하면서 성장했다는 뿌듯함을 느끼고, 완성되어가는 프로젝트를 보면서 어떨 때는 신기한 기분도 들었던 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/bombom_review/2022-01-30-19-28-45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 프로젝트의 주제는 커뮤니티 사이트를 만들기로 결정, 영화를 주제로 하는 커뮤니티 사이트를 만들되, 영화와 관련 정보도 같이 제공하여 일반적인 커뮤니티사이트와 차별성을 갖추기로 이야기가 되었다.&lt;/p&gt;

&lt;p&gt;커뮤니티 사이트로 주제를 정한 이유는 일정이 꽤 빠듯했기 때문에 심화된 기능을 구현하기에는 시간이 부족하다고 생각했고, CRUD를 갖춘 게시판을 구현해야하는 커뮤니티를 주제로 하여 기본기 있는 웹사이트를 제작해보자는 의견이 많았다.&lt;/p&gt;

&lt;p&gt;이전에 진행한 JSP 프로젝트에서 로그인/회원가입, 장바구니, 주문페이지를 구현했었지만 CRUD가 있는 게시판을 구현할 기회가 없었다. 따라서 이번 프로젝트에서는 게시판 하나를 본격적으로 구현해보고 싶다는 생각이 들었고, 팀원들과 상의한 결과 나는 회원끼리 소통할 수 있는 게시판 기능을 구현한 ‘영화수다’파트를 맡게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/bombom_review/2022-01-30-19-30-08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 이름은 ‘봄봄(이 영화 봄?봄!)’으로 정했다. 많은 고민이 있었지만 팀원들의 센스를 총 동원해서 다음과 같은 이름이 정해졌다. 봄봄은 여러 뜻을 가지고 만들게 되었는데,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spring Framework의 Spring(봄)&lt;/li&gt;
  &lt;li&gt;영화를 보다(watch)의 봄&lt;/li&gt;
  &lt;li&gt;코로나로 인해 좋지않은 영화산업에 봄을 일으킬 사이트..?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 외에도 회의하면서 팀원들이 나름대로 여러 해석을 내놓았지만 제일 기억나는건 세 가지였던 것 같다. 나름 신선한 이름이라서 기억에 많이 남는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bombom_thumbnail.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 프로젝트에서 개인적으로 잘한 점, 어려웠던 점, 이슈에 대해서 적어보려고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-이번-프로젝트에서-잘한-점&quot;&gt;1. 이번 프로젝트에서 잘한 점&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/bombom_review/2022-01-30-19-44-06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spring과 MyBatis로 구현한 게시판은 꽤 효율적이었다. Spring에서는 어노테이션을 사용하여 매핑주소를 정하고, 메서드로 요청방식을 정해주면 같은 URL더라도 요청방식에 따라서 비즈니스로직을 다르게 수행하도록 할 수 있다는 점이 편했었다. 개인적으로 REST API의 개념에 대해 공부하고 구현해보고 싶은 생각이 있었는데 Spring을 통해서 구현해보니 훨씬 URI 관리가 편하고 효율적이었다.&lt;/p&gt;

&lt;p&gt;비록 get방식과 post 방식만 사용해보았지만 CSR로 웹사이트를 구축한다면 put, delete 방식까지 사용하여 REST API를 온전히 구현해보고싶다.&lt;/p&gt;

&lt;p&gt;이 외에는 게시판 별로 좋아요 기능과 댓글 기능을 구현한 점이다. Ajax를 사용하여 페이지 새로고침 없이 구현했는데 이전 프로젝트에서도 구현했었기 때문에 크게 어려운 점은 없었다. 다만 Spring에서 JSON형태로 데이터를 리턴해 주는 기능을 지원해서 Jackson 라이브러리를 통해 편하게 데이터를 넘길 수 있었다.&lt;/p&gt;

&lt;p&gt;또 이번 프로젝트에서 가장 잘한 점이라고 한다면 바로 &lt;strong&gt;오픈소스 에디터를 사용&lt;/strong&gt;해보았다는 점.&lt;/p&gt;

&lt;p&gt;처음에 팀원들과 회의할 때 게시판은&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;게시판 조회, 글쓰기, 수정, 삭제 (기본적인 CRUD)&lt;/li&gt;
  &lt;li&gt;페이징 처리 및 게시물 검색&lt;/li&gt;
  &lt;li&gt;게시글 좋아요&lt;/li&gt;
  &lt;li&gt;댓글 기능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;네 가지의 기능은 있었으면 좋겠다고 의견이 모아져서 나도 이 정도만 구현해도 좋겠다고 생각했다. 하지만 게시판 글쓰기 페이지에서 생각이 바뀌게 되었다.&lt;/p&gt;

&lt;p&gt;기존에 학원에서 배운 방식은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;textarea&lt;/code&gt; 태그를 사용하여 텍스트 값을 받고, 이미지는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt; 태그를 사용해서 jpg 파일을 업로드하여 따로따로 게시글이 업로드 되도록 구현했었다. 하지만 이 방법은 자신이 쓴 글이 어떤식으로 업로드 될지 알기 힘들다.&lt;/p&gt;

&lt;p&gt;영화커뮤니티는 영화를 주제로 하는 커뮤니티사이트이다. 주제 특성상 영화의 특정한 장면이나 포스터, 영화관, 굿즈를 가지고 사람들이 글을 많이 쓰게 될텐데 이미지를 업로드하는 방식이 어렵다면 사용자가 불편을 느낄 수 밖에 없고, 이용률이 저조하게 될 것이라는 결론을 내리게 되었다.&lt;/p&gt;

&lt;p&gt;이를 해결하기위해 오픈소스 에디터를 찾게 되었고, 여러 오픈소스 에디터중에 NHN에서 제공중인 &lt;strong&gt;Toast ui Editor&lt;/strong&gt;를 찾게 되어, 에디터를 직접 게시글쓰기에 적용해보기로 했다. 어찌저찌 에디터를 구현하는데는 성공했지만, 가장 중요한 이미지 업로드 기능을 구현하는 게 까다로웠다.&lt;/p&gt;

&lt;p&gt;Toast ui Editor는 이미지 업로드 기능을 기본적으로 지원한다. 하지만 이미지를 업로드 할 때 base64 방식으로 데이터가 텍스트로 변환되어서 업로드되어진다. 이미지 파일의 사이즈가 클 수록 데이터베이스에 들어가는 텍스트의 길이도 길어져서 데이터베이스가 버틸 수 없을거라고 생각했다. 다른 방법을 찾아야했다.&lt;/p&gt;

&lt;p&gt;구글링으로 여러 글을 살펴보던 중, Toast ui Editor에서 제공하는 hook을 사용하여 사용자가 이미지를 업로드하는 행동을 할 경우, 이미지를 서버로 넘기는 함수를 구현한 다음, 서버에 이미지를 저장하고 이미지의 주소값을 리턴해주는 방식으로 기능을 구현할 수 있다고해서 구현해보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/Tui_Editor/2022-01-28-10-57-06.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;결과는 성공, 에디터를 통해서 글을 쓰니 글자크기도 조절이 가능하고, 업로드된 이미지도 함께 볼 수 있어서 글쓰기가 더 편리해보인다.&lt;/p&gt;

&lt;p&gt;오픈소스 에디터 사용과 관련하여 작성한 글은 &lt;a href=&quot;https://achasan.github.io/toast_ui_1&quot;&gt;Toast ui Editor 사용하기&lt;/a&gt;와 &lt;a href=&quot;https://achasan.github.io/toast_ui_2&quot;&gt;Toast ui Editor 이미지 업로드 구현방법&lt;/a&gt;에서 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-프로젝트에서-아쉬웠던-점&quot;&gt;2. 프로젝트에서 아쉬웠던 점&lt;/h3&gt;

&lt;p&gt;프로젝트에서 아쉬웠던 점은 Git 세팅에서 시간을 꽤 많이 날려먹었다는 점이다. 이전 프로젝트에서는 Git 세팅에 하루를 날려먹으면서 우여곡절 끝에 Git 세팅에 성공해서 금방 할 수 있을 것이라고 생각했지만 새로운 개발환경에서 Git을 세팅하는 건 어려운 것 같다.&lt;/p&gt;

&lt;p&gt;개발 환경에 따라서 gitignore를 세팅해주는 것이 되게 중요하다고 느꼈다. 처음에 원격저장소를 만들었을 때 gitignore 세팅을 깜빡했었는데 다른 팀원들이 작업한 파트를 병합할 때마다 메타데이터 파일이 바뀌어서 pull 할 때 프로젝트 폴더가 고장나는 상황이 자주 일어났었다. 이 때 gitignore를 세팅해줬어야 했는데 타이밍을 놓쳐 손을 쓸 수 없는 상황까지 가버려 저장소를 다시 만들어야했다.&lt;/p&gt;

&lt;p&gt;저장소를 다시 만들고 gitignore 세팅까지 해놓고 나서야 정상적인 pull이 가능했다. 자신있게 Git을 사용해야한다고 팀원들한테 말했지만 작동이 안되서 고치느라 시간을 많이 잡아먹어서 팀원들한테 미안한 감정이 아직도 남아있다.&lt;/p&gt;

&lt;p&gt;위와 관련된 글은 &lt;a href=&quot;http://achasan.github.io/spring_git_setting&quot;&gt;Spring framework 환경에서 git 세팅&lt;/a&gt;에서 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-느낀-점&quot;&gt;3. 느낀 점&lt;/h3&gt;

&lt;p&gt;Spring과 MyBatis를 사용하여 전체적인 요청과 응답의 흐름을 알게되었다는 점은 좋았다. 하지만 Spring에서 사용가능한 기능들은 되게 많고, 아직 부족하다는 것을 느낀 프로젝트이기도 하다.&lt;/p&gt;

&lt;p&gt;Spring 프로젝트를 하면서 디자인패턴을 접하게 되었다. 여러 개발자가 큰 프로젝트를 진행하게되면 협업하는 과정이 필수가 되고, 협업에서 가장 중요한 점은 쉽게 읽을 수 있는 코드라고 생각한다. 많은 개발자들이 Spring Framework로 프로젝트를 진행했을 것이고, 수 많은 시행착오끝에 효율적으로 유지보수가 가능한 디자인패턴이 나오게 되었을 것이라 생각한다. 이 개념을 알고 조금이나마 깔끔한 코드를 만드는 시도를 해봐야할 것 같다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;끝까지 열심히 해준 팀원들에게도 고맙다고 전하고 싶다. 이수자평가 준비때문에 프로젝트와 병행해서 PPT까지 만들면서 고생한 팀원들이 몇 명 있었는데, 그래도 끝까지 자기가 맡은 부분을 마무리 해주어서 완성도 있는 페이지가 나온 것 같아서 다행이라고 생각한다.&lt;/p&gt;

&lt;p&gt;파이널 프로젝트인만큼 욕심도 많았지만 현실적으로 모든 것을 구현하기에는 한계가 있었다. 이제 취업을 해야하는 시기가 되는데, 회사에서는 신입의 수준을 어느정도까지 요구하는지를 모르기 때문에 많은 것을 보여주고싶어 더 욕심만 나는 프로젝트였던 것 같다. 욕심부리지말고 꾸준히 정진할 수 있는 자세를 가져야겠다.&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Jan 2022 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//bombom_review</link>
        <guid isPermaLink="true">https://achasan.github.io//bombom_review</guid>
        
        <category>ETC</category>
        
        
      </item>
    
      <item>
        <title>Toast ui Editor 이미지 업로드 구현방법</title>
        <description>&lt;h1 id=&quot;위지윅-에디터-toast-ui-editor-이미지-업로드-기능-구현&quot;&gt;위지윅 에디터 Toast ui Editor 이미지 업로드 기능 구현&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://achasan.github.io/toast_ui_1&quot;&gt;지난 글&lt;/a&gt;에서는 Toast ui Editor(Tui)를 CDN 방식으로 불러오는 방법에 관한 글에 이어서 이미지 업로드 기능을 구현하는 방법을 알아보기위해 작성한 글이다.&lt;/p&gt;

&lt;p&gt;Tui는 기본적으로 이미지 업로드 기능을 지원한다. 이미지를 업로드할 경우 base64의 형태로 변환하여 이미지를 업로드 한다. 이 기능은 치명적인 단점이 있는데, 이미지의 용량이 커질수록 변환된 base64 텍스트의 길이는 기하급수적으로 높아진다. 만약 base64로 변환된 이미지 그대로 DB에 저장한다고 했을 경우, 엄청난 길이의 텍스트로 인해 DB에 심한 부담을 줄 것이다.&lt;/p&gt;

&lt;p&gt;따라서 사용자가 이미지를 업로드할 경우 이미지를 서버에 저장하고 저장된 이미지의 주소를 리턴하여 이미지가 출력되도록 해야한다. Spring을 사용하여 이미지를 서버에 저장하고 주소를 리턴하도록 해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-이미지를-업로드-했을-때-콜백함수로-로직구현&quot;&gt;1. 이미지를 업로드 했을 때 콜백함수로 로직구현&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Tui 공식문서에서는 에디터를 사용할 때 특정 행동을 할 때 콜백함수가 작동되도록하는 hooks라는 함수를 지원한다. hooks에는 여러 hook이 존재하는데, 그 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addImageBlobHook&lt;/code&gt;을 사용하면 이미지를 업로드 했을 때 콜백함수가 작동하도록 할 수 있다.&lt;/p&gt;

&lt;p&gt;먼저 Editor를 불러올 때 작성한 코드에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addImageBlobHook&lt;/code&gt;을 추가해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toastui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#editor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;initialEditType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;wysiwyg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;내용을 입력해주세요&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;addImageBlobHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FormData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageUpload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ko-KR&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageUpload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bombom/image_upload.do&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;processData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addImageBlobHook&lt;/code&gt; hook을 사용할 경우 작동할 함수를 작성해주었다. 파라미터로는 blob과 callback이 들어가게되는데, blob은 사용자가 업로드하려고 하는 이미지, 콜백은 비즈니스 로직이 수행된 다음에 사용자에게 리턴할 이미지 URL을 리턴해주면 에디터에서 이미지를 출력하게되는 원리이다.&lt;/p&gt;

&lt;p&gt;서버에 이미지를 업로드해야하므로 ajax를 사용하여 서버로 이미지를 넘기도록 하였다. post방식으로 서버에 데이터를 넘기게 되고, form 태그를 통해 보통 데이터를 넘기지만 여기서는 form 태그를 사용할 수 없기 때문에 JavaScript에서 제공하는 formData 객체를 사용하여 해당 객체 안에 데이터를 넣어서 전달하도록 하였다.&lt;/p&gt;

&lt;p&gt;async를 true로 설정했을 때 데이터가 넘겨지지 않아서 false로 설정하고 넘겼더니 문제없이 잘 구동 되었다. 아마 비동기일 때 사용자가 데이터를 넘기는 시점이 달라서 안되는 것 같다. async를 false로 사용할 때 비권장된다는 경고메시지가 나오긴하지만 일단 기능구현이 되므로 이렇게 사용하기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-서버에서-전달받은-이미지-저장하기&quot;&gt;2. 서버에서 전달받은 이미지 저장하기&lt;/h2&gt;

&lt;p&gt;이제 Controller에서 이미지를 어떻게 처리하는지 코드를 통해 알아보자,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.ResponseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.multipart.MultipartFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EditorController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**
	 * 파일이름 추출하기
	 * 1. 업로드한 파일의 확장자명 알아내기
	 * 2. (오늘날짜)_currentTimeMillis + 확장자 방식으로 파일명 생성
	 * 3. 파일 경로에 등록
	 * 4. 주소값 리턴 (https://localhost:8080/bombom/resources/upload/파일)
	 */&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/image_upload.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageUpload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MultipartFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multipartFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
							  &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multipartFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user_write image upload detected, but there's no file.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;not found&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRealPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;resources/upload/talk/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multipartFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOriginalFilename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newFileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;multipartFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transferTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalStateException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uri : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Image Path : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;File_name : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// 주소값 알아내기&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// https://localhost:8080/bombom/resources/upload/파일이름&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/resources/upload/talk/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;로직은 크게 4개로 나눌 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt; 어노테이션을 사용하여 이미지 가져오기&lt;/li&gt;
  &lt;li&gt;이미지를 저장할 경로 설정하기&lt;/li&gt;
  &lt;li&gt;저장할 이미지의 이름 재설정하기&lt;/li&gt;
  &lt;li&gt;이미지를 서버 경로에 저장하기&lt;/li&gt;
  &lt;li&gt;주소값 리턴하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이미지는 보통 MultipartFile 객체를 통해 받아오게 된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt; 어노테이션을 사용하여 이미지를 받아와서 비즈니스 로직에 사용할 수 있도록 했다.&lt;/p&gt;

&lt;p&gt;그 다음은 경로를 지정해주어야하는데, 경로는 HttpServletRequest 객체를 사용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getSession()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getServletContext()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRealPath()&lt;/code&gt; 메서드를 사용하여 서버 내에 저장할 경로를 지정해 주었다.&lt;/p&gt;

&lt;p&gt;파일이름은 이름이 중복되는 것을 피하기 위해서 오늘 날짜 + currentTimeMillis() 메서드를 사용해주었다.&lt;/p&gt;

&lt;p&gt;위의 세 절차를 모두 완료했다면, 경로와 파일이름으로 된 File 객체를 생성하고, transferTo() 메서드를 사용하여 이미지를 지정한 경로로 이동시켜준다.&lt;/p&gt;

&lt;p&gt;마지막으로 HttpServletRequest 객체를 사용하여 메서드를 사용하여 리턴할 주소값을 가공하여 전달하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-결과&quot;&gt;3. 결과&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/Tui_Editor/2022-01-28-10-57-06.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재 진행중인 봄봄프로젝트에서 구현한 게시판 글쓰기 기능이다. 이미지 업로드와 글 등록까지 정상적으로 수행되는 것을 볼 수 있다. 글 등록은 따로 Controller를 만들어서 로직을 처리했기 때문에 만약 이미지 업로드가 잘 된다면 글 등록까지 무난하게 구현할 수 있을 것이라고 생각한다.&lt;/p&gt;

&lt;p&gt;에디터를 사용하면서 이미지 업로드를 어떻게 처리해야할지 막막했다. 열심히 구글링을 하면서 찾아본 결과 끝내 구현할 수 있었다. 대부분의 글들은 리액트를 사용하기 때문에 작성하는 코드가 내가 구현하려는 것과 많이 달랐지만, 공식문서와 같이 참조하면서 삽질한 결과 기능을 구현할 수 있었다.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Jan 2022 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//toast_ui_2</link>
        <guid isPermaLink="true">https://achasan.github.io//toast_ui_2</guid>
        
        <category>ETC</category>
        
        
      </item>
    
      <item>
        <title>Toast ui Editor 사용하기</title>
        <description>&lt;h1 id=&quot;위지윅-에디터-toast-ui-editor-사용법&quot;&gt;위지윅 에디터 Toast ui Editor 사용법&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;영화커뮤니티를 주제로 스프링 프로젝트를 진행중이다. 커뮤니티는 게시판 기능이 핵심이기 때문에 사용자가 게시글을 올리기 편하도록 기능을 구현하는데 중점을 맞춰야 한다고 생각한다.&lt;/p&gt;

&lt;p&gt;textarea 태그를 사용하여 게시글을 올리게 할 경우 텍스트만 올릴 수 있기 때문에 비효율적이다. 또한 글 크기나 굵기같은 수정이 안되기 때문에 불편하다.&lt;/p&gt;

&lt;p&gt;따라서 오픈소스 에디터로 눈길이 가게되었고, 여러가지 에디터중 Toast ui Editor를 사용해보기로 하였다.&lt;/p&gt;

&lt;p&gt;사실 오픈소스 에디터는 종류가 다양하다. 대표적인 위지윅 오픈소스 에디터로 CKEditor를 많이 사용하는 것 같았다. 여러 글을 찾아보니 확장성이 좋은 에디터인 것 같았지만 5.0으로 업데이트 되면서 에디터의 핵심기능이 유료로 전환되었다는 이야기가 많이 들리기도하고, 기능이 너무 많아서 난잡해보이는 생각이 들어서 내 스타일은 아니였다.&lt;/p&gt;

&lt;p&gt;그 와중에 Toast ui 에디터를 찾게 되었다. NHN에서 개발한 오픈소스 에디터로, 마크다운과 위지윅을 둘 다 지원하고, Viewer도 지원하기 때문에 작성한 글을 HTML태그로 쉽게 변환해주고, 또 작성된 글을 Viewer를 통해 손쉽게 게시글을 볼 수 있는 장점이 있었다.&lt;/p&gt;

&lt;p&gt;아무튼 이번 프로젝트를 통해 게시판 에디터 사용법을 알게되었으므로 기록하여 나중에 사용할 일이 생길 때 찾아볼 수 있도록 하는 것이 이번 글의 목적이 되겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;공식문서 가이드가 있으므로 &lt;a href=&quot;https://github.com/nhn/tui.editor/blob/master/docs/ko/getting-started.md&quot;&gt;여기&lt;/a&gt;에서 참고하도록 하자.&lt;/p&gt;

&lt;p&gt;먼저 CDN을 통해 에디터를 불러와야한다. Toast ui에서는 npm으로 사용하는 것을 권장하지만, 이번 프로젝트는 Spring/JSP를 사용하기 때문에 CDN으로 사용하기로 하였다.&lt;/p&gt;

&lt;p&gt;2021년 1월 6일 기준, 현재의 cdn 주소는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;editor를 불러오기 위해서는 HTML에 id가 editor인 div 태그를 생성한 후, 태그 바로 아래에 CDN을 입력해주어야한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;에디터를 사용하기 위해서는 제공하는 CSS도필요하다. 필자는 head태그 내부에 넣어주었다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor.min.css&quot;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CSS와 자바스크립트를 모두 불러왔다면, 이제 에디터를 띄워보자, 에디터는 자바스크립트 코드를 작성하여 불러올 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#editor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 작성했을 경우, 에디터를 볼 수 있게된다. 아래는 현재 프로젝트의 글쓰기 페이지에서 에디터를 띄운 모습이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/Tui_Editor/2022-01-08-22-53-52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아마 우측하단에 보이는 언어가 영어일 것이다. 에디터를 한국어로 설정하기 위해서는 CDN을 하나 더 가져와야 한다. 주소는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/i18n/ko-kr.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Editor를 한국어로 변경하기위해 작성한 JavaScript 문을 아래와 같이 수정한다. 지금까지 설명한 코드를 전부 합치면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor.min.css&quot;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/i18n/ko-kr.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#editor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ko-KR&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;일단 에디터를 불러오는 것과 한국어로 설정하는 것 까지는 완료되었다. 이제 에디터를 불러올 때 설정할 수 있는 옵션들을 알아보자.
전체적인 옵션은 &lt;a href=&quot;https://nhn.github.io/tui.editor/latest/ToastUIEditorCore&quot;&gt;여기&lt;/a&gt;에서 확인이 가능하다. 여기에서는 대표적인 옵션들을 알아본다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;height&lt;/code&gt; : 에디터의 높이를 설정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialEditType&lt;/code&gt; : Tui Editor는 마크다운과 위지윅을 지원한다. 에디터를 처음 불러왔을 때 입력방식을 정하는 옵션.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialValue&lt;/code&gt; : 에디터를 불러왔을 때 안에 입력될 내용을 해당 옵션을 통해 정할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt; : 에디터의 언어를 설정한다. 위에서 한국어 정보를 CDN으로 가져왔으므로 ‘ko-KR’를 입력하여 설정하였다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;placeholder&lt;/code&gt; : HTML의 placeholder와 역할이 동일하다. 에디터에 입력한 값이 없을 경우 밝은 회색으로 출력될 텍스트.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 옵션들을 가지고 에디터를 용도에 맞게 커스텀할 수 있다. 필자는 다음과 같이 작성하였다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toastui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#editor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;initialEditType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;wysiwyg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;내용을 입력해주세요&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;addImageBlobHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FormData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageUpload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ko-KR&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;개인적으로 자바스크립트가 HTML파일 안에서 길게 작성될 경우 지저분해 보일 수 있기 때문에 다른 파일로 빼낸 다음 import하여 사용하는 것을 추천한다. 해당 글에서 import하는 것은 생략한다.&lt;/p&gt;

&lt;p&gt;위에서 언급하지 않았지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hooks&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event&lt;/code&gt; 옵션은 에디터에서 사용자가 글을 작성할 때 특정한 이벤트가 발생할 경우에 작동하게할 수 있는 함수라고 보면 된다. 이는 다음 글 &lt;a href=&quot;https://achasan.github.io/toast_ui_2&quot;&gt;Toast ui Editor 이미지 업로드하기&lt;/a&gt;에서 자세히 다루도록 하겠다.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Jan 2022 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//toast_ui_1</link>
        <guid isPermaLink="true">https://achasan.github.io//toast_ui_1</guid>
        
        <category>ETC</category>
        
        
      </item>
    
      <item>
        <title>객체지향의 사실과 오해 3장 : 타입</title>
        <description>&lt;h1 id=&quot;객체지향의-사실과-오해-3장--타입과-추상화&quot;&gt;객체지향의 사실과 오해 3장 : 타입과 추상화&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 글은 이전에 올린 글을 이어서 작성한 것이다. &lt;a href=&quot;https://achasan.github.io/oop_3&quot;&gt;(링크)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;타입&quot;&gt;타입&lt;/h2&gt;

&lt;p&gt;타입의 정의는 개념의 정의와 완전히 동일하다. 타입은 공통점을 기반으로 객체들을 묶기 위한 틀이다. 타입은 개념과 마찬가지로 심볼, 내연, 외연을 이용해 서술할 수 있고, 타입에 속하는 객체 역시 타입의 인스턴스라고 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;타입은 개념과 동일하다. 따라서 타입이란 우리가 인식하고 있는 다양한 사물이나 객체에 적용할 수 있는 아이디어나 관념을 의미한다. 어떤 객체에 타입을 적용할 수 있을 때 그 객체를 타입의 인스턴스라고 한다. 타입의 인스턴스는 타입을 구성하는 외연인 객체 집합의 일원이 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;컴퓨터가 어떤 작업을 수행하기 위해서는 작업에 필요한 데이터를 메모리 안으로 불러들여야 한다. 메모리에 불러들여진 데이터들은 무수히 많은 0과 1로 치장되어 메모리에 저장된다. 실제로 메모리 안에는 무수히 많은 0과 1의 행렬만이 존재한다. 사람이 이를 구별하기 위해서는 엄청난 시행착오를 각오해야할 것이다.&lt;/p&gt;

&lt;p&gt;이로인해 사람들은 메모리 안의 데이터에 특정한 의미를 부여하기 시작했다. 데이터에 사칙연산이 가능하다면 숫자형, 여러 문자로 구성되어있고 다른 문자와 연결될 수 있으면 문자열형으로 분류하였다. 참/거짓을 이야기할 수 있는 데이터는 논리형으로 분류했다.&lt;/p&gt;

&lt;p&gt;데이터를 목적에 따라 분류하기 시작하면서 타입 시스템(type system)이 자라나기 시작했다. 데이터를 분류함으로써 그 데이터에 제약사항을 부과한 것이다. 이를 통해 두 가지 중요한 사실을 알 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;타입은 데이터가 어떻게 사용되느냐에 관한 것이다. 숫자형 데이터가 사칙연산이 가능하기 때문에 분류한 것이고, 문자열형은 두 문자를 연결할 수 있는 데이터이기에 문자열형으로 분류한 것이다. 어떤 데이터에 어떤 연산자를 적용할 수 있느냐가 그 데이터의 타입을 결정하는 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;타입에 속한 데이터를 메모리에 어떻게 표현하는지는 외부로부터 철저하게 감춰진다. 데이터 타입의 표현은 연산 작업을 수행하기에 가장 효과적인 형태가 선택되며, 개발자는 해당 데이터 타입의 표현 방식을 몰라도 데이터를 사용하는 데 지장이 없다. 개발자는 해당 데이터 타입을 사용하기 위해 단지 데이터 타입에 적용할 수 있는 연산자만 알고 있으면 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 책에서는 데이터 타입을 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터 타입은 메모리 안에 저장된 데이터의 종류를 분류하는데 사용하는 메모리 집합에 관한 메타데이터이다. 데이터에 대한 분류는 암시적으로 어떤 종류의 연산이 해당 데이터에 대해 수행될 수 있는지를 결정한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;객체와-타입&quot;&gt;객체와 타입&lt;/h3&gt;

&lt;p&gt;객체지향 프로그램을 작성할 때 우리는 객체를 일종의 데이터처럼 사용한다. 따라서 객체를 타입에 따라 분류하고 그 타입에 이름을 붙이는 것은 결국 프로그램에서 사용하 새로운 데이터 타입을 선언하는 것과 같다.&lt;/p&gt;

&lt;p&gt;그렇지만 객체는 데이터가 아니다. 객체에서 중요한 것은 객체의 행동이다. 상태는 행동의 결과로 초래된 부수효과를 쉽게 표현하기 위해 도입한 추상적인 개념일 뿐이다. 즉, 객체가 협력을 위해 어떤 책임을 지녀야 하는지를 결정하는 것이 객체지향 설계의 핵심이다.&lt;/p&gt;

&lt;p&gt;따라서 앞에서 데이터 아입에 관해 언급했던 두 가지 조언은 객체의 타입을 이야기할 떄도 동일하게 적용되어진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 객체가 어떤 타입에 속하는지를 결정하는 것은 그 객체가 수행하는 행동이다. 어떤 객체들이 동일한 행동을 수행할 수 있다면 그 객체들은 동일한 타입으로 분류될 수 있다.&lt;/li&gt;
  &lt;li&gt;객체의 내부적인 표현은 외부로부터 철저하게 감춰진다. 객체의 행동을 가장 효과적으로 수행할 수 만 있따면 객체 내부의 상태를 어떤 방식으로 표현하더라도 무방하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;행동이-우선이다&quot;&gt;행동이 우선이다.&lt;/h3&gt;

&lt;p&gt;결론적으로 객체의 타입을 결정하는 것은 객체의 행동뿐이다. 객체가 어떤 데이터를 보유하고 잇는 지는 타입을 결정하는 데 아무런 영향을 미치지 않는다.&lt;/p&gt;

&lt;p&gt;같은 타입에 속한 객체는 행동만 동일하다면 서로 다른 데이터를 가질 수 있다. 여기서 동일한 행동은 동일한 책임을 의미하고, 동일한 채김이란 동일한 메시지 수신을 의미한다. 다만 내부의 표현 방식이 다르기 떄문에 동일한 메시지를 처리하는 방식은 서로 다를 수밖에 없다. 이것은 다형성에 의미를 부여한다.&lt;/p&gt;

&lt;p&gt;다형성이란 동일한 요청에 대해 서로 다른 방식으로 응답할 수 있는 능력을 뜻한다. 동일한 메시지를 서로 다른 방식으로 처리하기 위해서는 객체들은 동일한 메시지를 수신할 수 있어야하기 떄문에 결과적으로 다형적인 객체들은 동일한 타입에 속하게 된다.&lt;/p&gt;

&lt;p&gt;행동만이 고려 대상이라는 사실은 외부에 데이터를 감춰야 한다는 것을 의미한다. 훌륭한 객체지향 설계는 외부에 행동만을 제공하고 데이터는 행동 뒤로 감춰야 한다. 이 원칙을 흔히 캡슐화라고 한다. 데이터가 캡슐의 벽을 뚫고 객체의 인터페이스를 오염시키는 순간 객체의 분류 체계는 급격히 위험에 노출되고 결과적으로 유연하지 못한 설계를 낳게 된다.&lt;/p&gt;

&lt;h3 id=&quot;일반화특수화-관계&quot;&gt;일반화/특수화 관계&lt;/h3&gt;

&lt;p&gt;타입과 타입 사이에는 일반화/특수화 관계가 존재할 수 있다. 앨리스가 트럼프 행렬에서 나온 객체들을 토끼를 제외하고 ‘트럼프’라고 칭했지만 사실 해당 객체들은 엄밀히 말하면 ‘트럼프 인간’이다. 트럼프 인간은 트럼프보다 특화된 행동을 하는 특수한 개념이다.&lt;/p&gt;

&lt;p&gt;일반화와 특수화는 동시에 일어난다. 트럼프 인간은 트럼프를 좀 더 특수하게 표현한 것이다. 더 특수하다는 것은 일반적인 개념보다 범위가 더 좁다는 것을 의미하므로 트럼프 인간에 속하는 객체는 트럼프에 속하는 객체보다 그 수가 적을 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;특수한 개념을 포괄하는 트럼프 인간은 일반적인 개념을 표현하는 트럼프의 부분집합이 된다. 여기서도 중요한 점은 일반화/특수화 관계를 결정하는 것이 객체의 상태를 표현하는 데이터가 아니라 행동이라는 것이다.&lt;/p&gt;

&lt;p&gt;특수한 타입이란 일반적인 타입이 가진 모든 타입을 포함하지만 거기에 더해 자신만의 행동을 추가하는 타입을 가리킨다. 따라서 일반적인 타입은 특수한 타입보다 더 적은 수의 행동을 가지고 특수한 타입은 일반적인 타입보다 더 많은 수의 행동을 가진다.&lt;/p&gt;

&lt;h3 id=&quot;슈퍼타입과-서브타입&quot;&gt;슈퍼타입과 서브타입&lt;/h3&gt;

&lt;p&gt;일반화/특수화의 관계는 좀 더 일반적인 한 타입과 좀 더 특수한 한 타입 간의 관계이다. 이 때 좀 더 일반적인 타이블 슈퍼타입(Supertype)이라고 하고, 좀 더 특수한 타입을 서브타입(Subtype)이라고 한다.&lt;/p&gt;

&lt;p&gt;일반적으로 서브타입은 슈퍼타입의 행위와 호환되기 때문에 서브타입은 슈퍼타입을 대체할 수 있어야한다. 즉, 트럼프 인간은 트럼프이므로 엎드리거나 뒤집어지기만 하는 경우에는 트럼프를 대체하더라도 무방할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mindock.github.io/assets/images/oop_generalization_specialization.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반화/특수화의 관계를 표기할 때는 서브타입을 하단에 위치시키고 속이 빈 삼각형으로 연결하여 표현한다. 이 때 서브타입에서는 슈퍼타입과 중복된 행위를 행략할 수 있다. 서브 타입은 슈퍼타입의 행위에 추가적으로 특수한 자신만의 행동을 추가하는 것이므로, 슈퍼타입의 행동은 서브타입에게 자동으로 상속된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;타입의-목적&quot;&gt;타입의 목적&lt;/h2&gt;

&lt;p&gt;타입을 사용하는 이유는 무엇일까? 타입은 인간의 인지능력으로 시간에 따라 동적으로 변화하는 객체의 복잡성을 극복하기위해 사용한다.&lt;/p&gt;

&lt;p&gt;앨리스의 상태는 행동에 따라 시시각각 변한다. 앨리스의 상태는 계속 변화하지만 모든 경우 앨리스는 단지 앨리스일 뿐이다. 앨리스를 다른 객체와 구별할 수 있는 식별성은 동일하게 유지된다. 따라서 앨리스의 상태가 임의의 값을 가지고 변화한다는 사실만 생각하여 상황을 단순하게 만들 수 있다.&lt;/p&gt;

&lt;p&gt;타입은 시간에 따라 동적으로 변하는 앨리스의 상태를 시간과 무관한 정적인 모습으로 다룰 수 있게 해준다. 앨리스의 상태에 시간이라는 복잡성을 제거하여 독립적인 정적인 모습으로 앨리스를 생각할 수 있게 해준다.&lt;/p&gt;

&lt;h3 id=&quot;결국-타입은-추상화다&quot;&gt;결국 타입은 추상화다&lt;/h3&gt;

&lt;p&gt;이러한 관점에서 타입은 추상화이다. 어떤 시점에 앨리스에 관해 생각할 때 불필요한 시간이라는 요소와 상태 변화라는 요소를 제거하거 철저하게 정적인 관점에서 앨리스의 모습을 묘샇는 것을 가능하게 해준다.&lt;/p&gt;

&lt;p&gt;타입은 추상화다. 타입을 이용하면 객체의 동적인 특성을 추상화 할 수 있다. 결국 타입은 시간에 딸느 객체의 상태 변겨잉라는 복잡성을 단순화 할 수 잇는 효과적인 방법인 것이다.&lt;/p&gt;

&lt;h3 id=&quot;동적-모델과-정적-모델&quot;&gt;동적 모델과 정적 모델&lt;/h3&gt;

&lt;p&gt;객체를 생각할 때 우리는 두 가지 모델을 동시에 고려한다는 사실을 알 수 있다.&lt;/p&gt;

&lt;p&gt;하나는 객체가 특정 시점에 구체적으로 어떤 상태를 가지느냐이다. 이를 객체의 &lt;strong&gt;스냅샷(snapshot)&lt;/strong&gt;이라고 한다. 객체지향 모델링을 위한 표준 언어인 UML에서 스냅샷은 객체 다이어그램(object diagram)이라고도 불린다. 스냅샷처럼 실제로 객체가 살아움직이는 동안 상태가 어떻게 변하고 어떻게 행동하는지를 포착하는 것을 동적모델 이라고 한다.&lt;/p&gt;

&lt;p&gt;다른 하나는 객체가 가질 수 잇는 모든 상태와 모든 행동을 시간에 독립적으로 표현하는 것이다. 이런 모델을 &lt;strong&gt;타입 모델(type diagram)&lt;/strong&gt;이라고 한다. 이 모델은 동적으로 변하는 객체의 상태가 아니라 객체가 속한 타입의 정적인 모습을 표현하기 때문에 정적 모델이라고도 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;객체를 분류하는 기준은 타입이며, 타입을 나누는 기준은 객체가 수행하는 행동이라는 사실을 기억하자. 객체를 분류하기 위해 타입을 결정한 후 프로그래밍 언어를 이용해 타입을 구현할 수 있는 한 가지 방법이 클래스라는 사실을 아는 것으로 충분하다.&lt;/p&gt;

&lt;p&gt;결국 객체지향에서 중요한 것은 동적으로 변하는 객체의 상태와 상태를 변경하는 행위이다. 클래스는 타입을 구현하기 위해 프로그래밍 언어에서 제공하는 구현 메커니즘이 된다.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Jan 2022 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//OOP_4</link>
        <guid isPermaLink="true">https://achasan.github.io//OOP_4</guid>
        
        <category>ETC</category>
        
        
      </item>
    
      <item>
        <title>객체지향의 사실과 오해 3장 : 추상화</title>
        <description>&lt;h1 id=&quot;객체지향의-사실과-오해-3장--타입과-추상화&quot;&gt;객체지향의 사실과 오해 3장 : 타입과 추상화&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;일단 컴퓨터를 조작하는 것이 추상화를 구축하고, 조작하고, 추론하는 것에 관한 모든 것이라는 것을 깨닫고 나면 컴퓨터 프로그램을 작성하기 위한 중요한 전제 조건은 추상화를 정확하게 다루는 능력이라는 것이 명확해진다. - 키스 데블린&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;현재 전 세계의 주요 대도시 지하에는 지하철이 거미줄처럼 도시 곳곳에 이어져있다. 승객들이 지하철을 큰 어려움없이 이용가능한 이유는 단순하고 직관적으로 연결되어있는 지하철 노선도가 있기 때문일 것이다. 전 세계 어디든 지하철 노선도는 형식이 유사하기 때문에 어떻게 지하철을 이용해야할지 어렵지 않게 정보를 얻을 수 있다.&lt;/p&gt;

&lt;p&gt;지하철을 이용하는 승객의 목적은 하나의 역에서 다른 역으로 이동하는 것이다. 승객이 원하는 것은 어떤 역에서 출발해야하는지, 어떤 역에서 환승해야하는지, 어떤 역을 거쳐야지 가장 쉽고 빠르게 목적지에 도착가능한지를 직관적이고 단순히 보여주는 것이다. 역과 역 사이의 연결성을 얼마나 직관적으로 표현하였는지가 중요할 뿐, 다른 정보는 크게 영향을 끼치지 않는다.&lt;/p&gt;

&lt;p&gt;초기의 지하철 노선도는 지형을 구체적으로 묘사함에 따라 현재의 단순한 지하철 노선도와는 거리가 멀었다. 역과 역 사이의 연결성을 한 눈에 알아보기 힘들었다.&lt;/p&gt;

&lt;p&gt;현재의 지하철 노선도는 해리 벡이 1933년에 고안하였으며, 이는 지도가 가져야하는 정확성을 버리고 지하철 노선도의 &lt;strong&gt;‘목적’&lt;/strong&gt;에 집중한 결과이다. 모든 역의 위치와 거리도 부정확하고 경로를 표시한 직선은 실제 지하철이 이동하는 경로와 상관이 없음에도 불구하고, 현재의 지하철 노선도는 승객들이 길을 찾을 때 가장 먼저 접하게 되는 중요한 정보이다. 해리 백은 지하철 노선을 &lt;strong&gt;추상화&lt;/strong&gt;함으로써 이해하고 쉽고 단순하며 목적에 부합하는 지하철 노선도를 만들어낼 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;추상화를-통한-복잡성-극복&quot;&gt;추상화를 통한 복잡성 극복&lt;/h2&gt;

&lt;p&gt;해리 백의 지하철 노선도는 단순함을 달성한 추상화의 훌륭한 예이다. 지형 정보를 제거하고 역 사이의 연결성을 강조하여 승객들의 목적에 맞게 현실을 단순화 하였다.&lt;/p&gt;

&lt;p&gt;진정한 의미의 추상화란 현실에서 출발하되 불필요한 부분을 도려내가며 사물의 본질을 드러나게 하는 과정이라고 할 수 있다. 추상화의 목적은 불필요한 부분을 무시함으로써 현실에 존재하는 복잡성을 극복하는 것이다.&lt;/p&gt;

&lt;p&gt;추상화는 다음과 같이 정의할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떤 양상, 세부사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;복잡성을 다루기 위해 추상화는 두 차원에서 이루어진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;구체적인 사물들 간의 공통점은 취하고 차이점은 버리는 일반화를 통해 단순하게 만드는 것&lt;/li&gt;
  &lt;li&gt;중요한 부분을 강조하기위해 불필요한 세부 사항을 제거함으로써 단순하게 만드는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;복잡성을 이해하기 쉬운 수준으로 단순화하는 것이 추상화의 목적이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;객체지향과-추상화&quot;&gt;객체지향과 추상화&lt;/h2&gt;

&lt;p&gt;이번엔 다시 앨리스의 이야기로 돌아와서 추상화의 예시를 살펴보도록 하자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;아름다운 정원으로 들어가게 된 앨리스는 세 명의 정원사를 마주친다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정원사들은 트럼프처럼 생겼고, 몸에는 스페이드 무늬가 그려져 있었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;갑자기 하트 여왕의 행렬이 정원으로 들어섰다. 세 명의 정원사는 땅바닥에 엎드렸다. 행렬의 맨 앞에는 클로버를 든 열 명의 병사들이 행진하여 들어왔다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그 뒤로는 온 몸을 반짝거리는 다이아몬드로 치장한 신하들이 열을 지어 들어왔다. 그 속에는 하얀 토끼도 섞여있었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;행렬의 마지막에는 하트 왕과 하트 여왕이 모습을 드러냈다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 여왕을 쳐다보며 속으로 생각했다. ‘기껏해야 트럼프에 불과해, 무서워할 필요 없어’&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앨리스는 이야기에 등장한 모든 객체들 중에 토끼를 제외한 나머지 객체들을 트럼프로 단순화하여 바라보고 있다. 트럼프 행렬의 객체들은 각자 독특한 모습을 하고 있으며, 독특한 행동양식을 가지고 있다. 하지만 이런 것들을 무시한 채 ‘트럼프’라는 유사성을 기반으로 추상화하여 바라보는 것이다.&lt;/p&gt;

&lt;p&gt;앨리스의 이야기에 등장하는 정원사, 병사, 신하, 왕자와 공주, 하객으로 참석한 왕과 왕비들, 하트 잭, 하트 왕과 하트 여왕은 서로의 특징이 다 다르고 서로를 쉽게 구분할 수 있다. 이 처럼 명확한 경계를 가지고 서로 구별할 수 있는 구체적인 사람이나 사물을 객체지향 패러다임에서는 객체라고 한다.&lt;/p&gt;

&lt;p&gt;우리가 이 다양한 객체(인물)들을 ‘트럼프’라고 줄일 수 있는 이유는 공통적으로 ‘트럼프’라고 했을 때 떠오르는 일반적인 외형과 행동방식을 지니고 있기 때문일 것이다. 여기서 토끼는 ‘트럼프’의 행동양식과 외형을 가지지 않기 때문에 ‘트럼프’에 포함되지 않는다.&lt;/p&gt;

&lt;p&gt;다수의 개별적인 인물이 아니라 ‘트럼프’와 ‘토끼’라는 도 개의 추상화를 통해 정원을 바라보는 것은 정원의 내재된 복잡성을 효율적으로 감소시킨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;개념&quot;&gt;개념&lt;/h2&gt;

&lt;p&gt;수 많은 객체들을 개별적인 단위로 취급하기에 인간이 지닌 인지능력은 턱없이 부족하다. 따라서 인간은 본능적으로 공통적인 특성을 기준으로 객체를 여러 그룹으로 묶어 상황을 단순화 하려고 노력한다.&lt;/p&gt;

&lt;p&gt;이 처럼 공통점을 기반으로 객체들을 묶기 위한 그릇을 &lt;strong&gt;개념(concept)&lt;/strong&gt;이라고 한다. 개념이란 일반적으로 우리가 인식하고 있는 다양한 사물이나 객체에 적용할 수 있는 아이디어나 관념을 뜻한다.&lt;/p&gt;

&lt;p&gt;개념을 이용하면 객체를 여러 그룹으로 &lt;strong&gt;분류(classification)&lt;/strong&gt;할 수 있다. 앨리스가 정원에 존재하는 객체를 ‘트럼프’와 ‘토끼’로 나눈 것 처럼, 공통점을 기반으로 객체를 분류할 수 있는 일종의 체라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;객체에 어떤 개념을 적용하는 것이 가능해서 개념 그룹의 일원이 될 때 객체를 그 개념의 &lt;strong&gt;인스턴스(instance)&lt;/strong&gt;라고 한다. 따라서 객체를 다음과 같이 정의할 수도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체란 특정한 개념을 적용할 수 있는 구체적인 사물을 의미한다. 개념이 객체에 적용됐을 때 객체를 개념의 인스턴스라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;개념의-세-가지-관점&quot;&gt;개념의 세 가지 관점&lt;/h3&gt;

&lt;p&gt;일반적으로 객체의 분류 장치로서 개념을 이야기 할 때는 아래의 세 가지 관점을 함께 언급한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;심볼(symbol) : 개념을 가리키는 간략한 이름이나 명칭&lt;/li&gt;
  &lt;li&gt;내연(intension) : 개념의 완전한 정의를 나타내며, 내연의 의미를 이용해 객체가 개념에 속하는지 여부를 확인할 수 있다.&lt;/li&gt;
  &lt;li&gt;외연(extension) : 개념에 속하는 모든 객체의 집합(set)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‘트럼프’는 심볼이 되고, 몸이 납작하고 두 손 두 발이 네모난 몸 모서리에 달려 있다는 트럼프에 대한 설명이 내연, 정원사, 병사, 신하, 왕자와 공주, 하객으로 참석한 왕과 왕비들, 하트 잭, 하트 왕과 하트 여왕은 모두 트럼프의 외연을 구성하는 객체 집합에 속한다.&lt;/p&gt;

&lt;p&gt;심볼, 내연, 외연은 객체의 분류 방식에 대한 지침을 제공한다. 이 개념을 이용해 객체를 &lt;strong&gt;분류할 수 있다는 사실&lt;/strong&gt;이 중요하다. 이는 객체지향 패러다임이 복잡성을 극복하는 데 사용하는 가장 기본적인 인지 수단이기 때문이다.&lt;/p&gt;

&lt;h3 id=&quot;객체를-분류하기-위한-틀&quot;&gt;객체를 분류하기 위한 틀&lt;/h3&gt;

&lt;p&gt;어떤 객체와 마주했을 때 객체에게 적용할 개념을 결정하는 것은 해당 객체를 개념이 적용된 객체 지합의 일원으로 맞아들인다는 것을 의미한다. 앨리스의 이야기에서 트럼프라고 지칭한 객체들은 트럼프라는 개념을 적용할 수 있는 객체의 집합에 속하게 된다.&lt;/p&gt;

&lt;p&gt;객체에 어떤 개념을 적용할 것인지를 결정하는 것은 결국 객체들을 개념에 따라 분류하는 것과 동일하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;분류란 객체에 특정한 개념을 적용하는 작업이다. 객체에 특정한 개념을 적용하기로 결심했을 때 우리는 그 객체를 특정한 집합의 멤버로 분류하고 있는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;객체를 적절한 개념에 따라 분류하지 못한 애플리케이션은 유지보수가 어렵고 변화에 쉽게 대처하지 못한다. 중요한 것은 적절한 분류 체계는 애플리케이션을 다루는 개발자의 머릿속에 객체를 쉽게 찾고 조작할 수 있는 정신적인 지도를 제공한다는 것이다. 따라서 최대한 직관적으로 객체를 분류하는 것이 중요하다.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Jan 2022 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//OOP_3</link>
        <guid isPermaLink="true">https://achasan.github.io//OOP_3</guid>
        
        <category>ETC</category>
        
        
      </item>
    
      <item>
        <title>객체지향의 사실과 오해 2장 : 행동, 캡슐화, 식별자</title>
        <description>&lt;h1 id=&quot;객체지향의-사실과-오해-2장--행동-캡슐화-식별자&quot;&gt;객체지향의 사실과 오해 2장 : 행동, 캡슐화, 식별자&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 글은 이전 글에 이어서 작성된 글이다. &lt;a href=&quot;https://achasan.github.io/oop_2&quot;&gt;(객체지향의 사실과 오해 2장 : 상태)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;행동&quot;&gt;행동&lt;/h2&gt;

&lt;p&gt;객체의 상태는 행동에 의해서 바뀐다. 객체의 상태를 변경하는 것은 객체의 자발적인 행동 뿐이다.&lt;/p&gt;

&lt;p&gt;객체가 취하는 행동은 객체 자신의 상태를 변경시킨다. 행동에 의해 상태가 변경되는 것은 행동이 부수효과(side effect)를 초래하는 것을 의미한다. 앨리스가 케이크를 먹는 행동은 앨리스의 키를 작게 변화시키는 부수효과를 초래한다.&lt;/p&gt;

&lt;p&gt;객체의 행동은 객체의 상태를 변경시키지만 행동의 결과는 객체의 상태에 의존적이다. 음료를 마시는 행동의 결과가 앨리스의 키에 의존한다는 것을 생각해 보면 될 것이다. 앨리스가 아름다운 정원으로 들어가기위해 문을 통과할 수 있는 지는 앨리스의 키가 현재 몇 센티미터 인지에 달려 있다. 앨리스의 키가 문보다 크다면 문을 통과할 수 없을 것이다.&lt;/p&gt;

&lt;p&gt;따라서 상태와 행동 사이에는 다음과 같은 관계가 있음을 알 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체의 행동은 상태에 영향을 받는다.&lt;/li&gt;
  &lt;li&gt;객체의 행동은 상태를 변경시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위는 다음과 같이 표현할 수도 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상호작용이 현재의 상태에 어떤 방식으로 의존하는가&lt;/li&gt;
  &lt;li&gt;상호작용이 어떻게 현재의 상태를 변경시키는가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앨리스의 이야기를 예시로 들면 아래와 같이 설명이 가능하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앨리스의 키가 40센티미터 이하라면 문을 통과할 수 있다.&lt;/li&gt;
  &lt;li&gt;문을 통과한 후에 앨리스의 위치는 아름다운 정원으로 바뀌어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;상태를 사용하면 복잡한 객체의 행동을 쉽게 이해할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;협력과-행동&quot;&gt;협력과 행동&lt;/h2&gt;

&lt;p&gt;객체는 자신에게 주어진 책임을 완수하기위해 다른 객체를 이용하고 다른 객체에게 서비스를 제공한다. 어떤 객체도 섬이 아니다. 객체는 서로 상호작용하며 협력하는 객체들의 공동체에 참여하기위해 노력한다.&lt;/p&gt;

&lt;p&gt;객체는 서로 메시지를 통해서만 의사소통이 가능하다. 객체는 수신한 메시지에 따라 행동하면서 협력에 참여하고, 자신의 상태를 변경시킨다. 또한 다른 객체의 상태 변화를 유발하기도 한다. 앨리스가 음료수를 마시면 자신의 키가 줄어들지만 음료 객체에 양을 감소시키라는 메시지를 전달하는 것처럼말이다. 메시지를 받은 음료 객체는 메시지에 따라 적절히 자신의 상태를 변경시킨다.&lt;/p&gt;

&lt;p&gt;이를 정리하면 객체의 행동은 두 가지 관점의 부수효과를 명확히 서술해야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체 자신의 상태를 변경&lt;/li&gt;
  &lt;li&gt;행동 내에서 협력하는 다른 객체에 대한 메시지를 전송&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제 행동을 정의해보자. 이 책에서는 행동을 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;행동이란 외부의 요청 또는 수신된 메시지에 응답하기 위해 동작하고 반응하는 활동이다. 행동의 결과로 객체는 자신의 상태를 변경하거나 다른 객체에게 메시지를 전달할 수 있다. 객체는 행동을 통해 다른 객체와의 협력에 참여하므로 행동은 외부에 가시적이어야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;상태-캡슐화&quot;&gt;상태 캡슐화&lt;/h2&gt;

&lt;p&gt;현실 세계의 객체와 객체지향 세계의 객체 사이에는 중요한 차이점이 있는데, 바로 객체는 &lt;strong&gt;능동적인 존재&lt;/strong&gt;라는 것이다. 현실 세계에서의 음료 객체는 혼자서는 아무것도 하지 못하는 수동적인 존재이다. 음료의 상태를 변경시키는 주체는 음료를 마시는 사람, 앨리스가 될 것이다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;strong&gt;객체지향 세계에서는 모든 객체가 능동적&lt;/strong&gt;이다. 스스로 자신의 상태를 자율적으로 관리한다. 따라서 이전부터 설명했지만, 객체가 다른 객체의 상태를 직접적으로 변경하는 것이 아닌, 메시지를 전달하기만 할 뿐 그 다음은 신경쓰지 않는다. 메시지를 전달받은 객체가 능동적으로 자신의 상태를 변경할 뿐이다.&lt;/p&gt;

&lt;p&gt;앨리스가 음료를 마시면, 앨리스 객체는 음료 객체에 자신이 먹은 음료의 양 만큼 상태를 변경하라는 메시지를 보낸다. 음료의 양을 줄일지 말지는 음료 객체가 결정할 사항이며, 앨리스 객체는 메시지를 전달하는 것까지만 행동한다. 음료의 양을 줄여달라는 요청만 보낼 뿐이다.&lt;/p&gt;

&lt;p&gt;메시지를 송신하는 자는 메시지를 수신하는 객체의 상태 변경에 대해서 전혀 알지 못한다. 이것이 &lt;strong&gt;캡슐화&lt;/strong&gt;가 의미하는 것이다. 객체는 상태를 캡슐 안에감춰둔 채 외부로 노출하지 않으며, &lt;strong&gt;객체가 외부에 노출하는 것은 행동 뿐이다&lt;/strong&gt;. 외부에서 객체에 접근할 수 있는 유일한 방법 또한 행동뿐이다.&lt;/p&gt;

&lt;p&gt;상태를 외부에 노출시키지 않고 행동을 경계로 캡슐화 시키는 것은 결과적으로 객체의 자율성을 높인다. 객체의 자율성이 높아질수록 객체의 지능도 높아진다. 지능이 높아지면 객체의 협력은 유연하고 간결해진다.&lt;/p&gt;

&lt;h2 id=&quot;식별자&quot;&gt;식별자&lt;/h2&gt;

&lt;p&gt;모든 객체는 식별자를 가지며 식별자를 이용하여 객체를 구별할 수 있다.&lt;/p&gt;

&lt;p&gt;모든 객체가 식별자를 가진다는 것은 반대로 객체가 아닌 단순한 값은 식별자를 가지지않는다는 것을 의미한다. 이는 단순한 값은 식별자를 가지지 않는 것을 의미한다. 단순한 값은 객체의 프로퍼티에 들어가는 타입 중 하나라고 이전에 설명했었다.&lt;/p&gt;

&lt;p&gt;시스템을 설계할 때는 단순한 값과 객체의 차이점을 명확히 구분하고 명시적으로 표현하는 것이 매우 중요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;값은 숫자, 문자, 날짜 시간 등 변하지 않는 양을 모델링하기 때문에 불변상태(immutable state)를 가진다.
    &lt;ul&gt;
      &lt;li&gt;따라서 두 인스턴스의 상태가 같다면 두 인스턴스를 같은 것으로 판단한다. 따로 식별하지 않는다.&lt;/li&gt;
      &lt;li&gt;상태를 이용해 두 값이 같은지 판단할 수 있는 성질을 &lt;strong&gt;동등성&lt;/strong&gt;이라고 한다.&lt;/li&gt;
      &lt;li&gt;값은 오직 상태만을 이용해 동등성을 판단하기 때문에 인스턴스를 구별하기위한 별도의 식별자를 필요로 하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;객체는 시간에 따라 변경되는 상태를 포함한다. 또한 행동으로 상태를 변경한다. 따라서 객체는 가변상태(mutable state)를 가진다.
    &lt;ul&gt;
      &lt;li&gt;타입이 같은 두 객체의 상태가 똑같더라도 두 객체는 별개의 객체로 다루어야 한다.&lt;/li&gt;
      &lt;li&gt;두 객체의 상태가 다르더라도 식별자가 같다면 두 객체는 같은 객체로 볼 수 있다. 이를 &lt;strong&gt;동일성&lt;/strong&gt;이라고 한다.&lt;/li&gt;
      &lt;li&gt;시간의 흐름에 따라 객체의 상태는 변하기 때문에 가변적인 두 객체의 동일성을 판단하기 위해서는 식별자가 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그렇다면 식별자가 무엇인지 정의해보도록 하자, 식별자는 다음으로 정의하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;식별자란 어떤 객체를 다른 객체와 구분하는데 사용하는 객체의 프로퍼티이다. 값은 식별자를 가지지 않기 때문에 상태를 이용한 동등성 검사를 통해 두 인스턴스를 비교해야한다. 객체는 상태가 변경될 수 있기 때문에 식별자를 이용한 동일성 검사를 통해 두 인스턴스를 비교할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;식별자는 객체지향에서 다형성, 캡슐화, 상속에 비해서 중요하게 다루어지지 않는 개념일 수 있다. 하지만 식별자는 객체지향 패러다임의 표현력을 높여주는 중요한 역할을 한다. 상태가 변하지 않는 값과, 상태가 변하는 객체들이 균형을 맞추며 조화를 이루어야한다.&lt;/p&gt;

&lt;p&gt;지금까지 작성한 내용을 간략하게 정리해보았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체는 상태를 가지고, &lt;strong&gt;상태는 변경가능&lt;/strong&gt;하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;상태를 변경시키는 것은 객체의 행동이다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;행동의 결과는 상태에 의존적&lt;/strong&gt;이며 상태를 이용하여 서술이 가능하다.&lt;/li&gt;
      &lt;li&gt;행동의 순서가 실행 결과에 영향을 미친다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;객체는&lt;/strong&gt; 어떤 상태에 있더라도 &lt;strong&gt;유일하게 식별&lt;/strong&gt;이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 01 Jan 2022 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//OOP_3</link>
        <guid isPermaLink="true">https://achasan.github.io//OOP_3</guid>
        
        <category>ETC</category>
        
        
      </item>
    
      <item>
        <title>객체지향의 사실과 오해 2장 : 상태</title>
        <description>&lt;h1 id=&quot;객체지향의-사실과-오해-2장--상태&quot;&gt;객체지향의 사실과 오해 2장 : 상태&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체지향 패러다임은 지식을 추상화하고 추상화한 지식을 객체 안에 캡슐화함으로써 실세계 문제에 내재된 복잡성을 관리하려고 한다. 객체를 발견하고 창조하는 것은 지식과 행동을 구조화하는 문제다. - 레베카 워프스브록&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2장에서의 핵심은 &lt;strong&gt;객체지향의 패러다임이 현실세계를 모방하는 것이 아닌 현실세계를 기반으로 새로운 세계를 창조하는 것&lt;/strong&gt;이다. 객체의 상태와 행동을 통해 여러 객체들이 서로 협력하며 하나의 목표를 달성하는 원리들을 설명하면서, 현실과 객체지향의 차이점을 보여주어 어떻게 소프트웨어를 설계해야하는지 방향을 제시해준다.&lt;/p&gt;

&lt;p&gt;이를 설명하기위해 글쓴이는 이상한 나라의 앨리스를 예시로 들어 설명한다. 요약하자면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 아름다운 정원을 발견했다. 정원에 들어가는 문이 40센티미터 이하여서 들어갈 수 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 주변에 ‘마셔라’가 적혀있는 병에있는 액체를 마시자 키가 24센티미터로 줄어들었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정원으로가는 문을 열려면 열쇠를 사용해야한다. 너무 작아져서 열쇠를 사용할 수 없게되었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이번엔 탁자 아래 케이크가 있어서 먹었더니 몸이 천장에 닿을만큼 훨씬 커지게되었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 때 주변을 지나가던 토끼가 놀라 부채를 떨어뜨렸다. 앨리스는 더워서 부채를 부쳤는데 키가 60센티미터로 다시 줄었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주변을 걸어가던 앨리스는 쐐기벌레를 만난다. 쐐기벌레는 버섯을 하나 주는데, 한쪽을 먹으면 크기가 작아지고, 반대쪽을 먹으면 크기가 커지는 버섯이었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 지금까지 얻은 물건을 통해 몸의 크기를 조절해 문을 열고 아름다운 정원으로 들어갔다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;앨리스-객체&quot;&gt;앨리스 객체&lt;/h2&gt;

&lt;p&gt;위의 이야기에서 주목해야할 점은 앨리스의 키의 변화이다. 정원으로 들어가기 위한 조건을 충족시키기위해 시간의 흐름에 따라 앨리스의 &lt;strong&gt;상태&lt;/strong&gt;는 바뀌게 된다. 앨리스의 상태를 변화시키는 것은 앨리스의 &lt;strong&gt;행동&lt;/strong&gt;이다. 버섯을 먹고, 음료수를 마시고, 부채질을 하고, 케이크를 먹으면서 앨리스의 키, 즉 상태는 변화한다.&lt;/p&gt;

&lt;p&gt;또한 앨리스의 행동으로 앨리스의 키가 커지거나 작아지게되는데, 행동을 하기 전에 앨리스의 키가 얼마였느냐가 행동 후의 앨리스의 상태를 결정하게된다. &lt;strong&gt;앨리스가 한 행동의 결과는 앨리스의 상태에 의존적이다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;앨리스의 행동으로 상태가 변화하게되고, 아름다운 정원으로 들어가기위해 앨리스는 적절한 행동을 통해 문을 통과할 수 있는 상태를 만들어야할 것이다. 이는 행동 간의 순서가 중요하다는 것을 의미한다. 문을 통과하려면 케이크나 음료수를 마시는 행동이 선행되어야한다.&lt;/p&gt;

&lt;p&gt;그렇다면 지금까지의 내용을 정리해보자. 지금까지의 내용이 객체와 중요한 공통점을 공유하게될 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 상태를 가지며 상태는 변경가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;앨리스의 상태를 변경시키는 것은 앨리스의 행동이다.
    &lt;ul&gt;
      &lt;li&gt;행동의 결과는 상태에 의존적이고, 상태를 이용해 서술가능하다.&lt;/li&gt;
      &lt;li&gt;행동의 순서가 결과에 영향을 미친다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;앨리스는 어떤상태에 있더라도 유일하게 식별 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;객체--상태와-행동&quot;&gt;객체 : 상태와 행동&lt;/h2&gt;

&lt;p&gt;객체의 다양한특성을 효과적으로 설명하기 위해서는 객체를 상태, 행동, 식별자를 지닌 식체로 보는 것이 가장 효과적이다. 이 책에서는 객체를 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체란 식별가능한 개체 또는 사물이다. 객체는 자동차처럼 만질 수 있는 구체적인 사물일 수도 있고, 시간처럼 추상적인 개념일 수도 있다. 객체는 구별가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가진다. 소프트웨어 안에서 객체는 저장된 상태와 실행가능한 코드를 통해 구현된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;상태&quot;&gt;상태&lt;/h3&gt;

&lt;p&gt;객체가 주변 환경과의 상호작용에 어떻게 반응하는가는 그 시점까지 객체에 어떤 일이 발생했느냐에 좌우된다. 예를 들면 비행기를 타기 위해서는 항공권을 발권해야한다. 없다면 비행기를 탈 수 없고, 있다면 탈 수 있게될 것이다. 비행기를 발권여부에 대한 행동이 비행기 탑승에 영향을 미친다.&lt;/p&gt;

&lt;p&gt;과거에 발생한 행동의 이력을 통해 현재 발생한 행동의 결과를 판단하는 방식은 복잡하고 번거로우며, 이해하기 쉽지 않다. 이를 단순하게 하기위해 &lt;strong&gt;상태&lt;/strong&gt;라는 개념을 만들게 된다. 위의 예시로 따지자면 항공권 소유여부를 상태로 만들어 이전에 비행기를 발권하는 행동을 했는지 설명과 예측이 가능해진다.&lt;/p&gt;

&lt;p&gt;상태를 사용하면 과거에 얽매이지 않을 수 있다. 세상의 복잡성을 완화하고 인지 과부화를 줄이는 중요한 개념이다.&lt;/p&gt;

&lt;h3 id=&quot;상태와-프로퍼티&quot;&gt;상태와 프로퍼티&lt;/h3&gt;

&lt;p&gt;모든 것을 객체로 표현할 수는 없다. 앨리스의 키는 객체가 아니다. 음료와 케이크의 양은 객체가 아니다. 상태로 표현되는 것들이다. 이러한 단순한 값들은 객체가 아니지만 객체의 상태를 표현하는 중요한 수단이 된다.&lt;/p&gt;

&lt;p&gt;때로는 객체를 사용해 다른 객체의 상태를 표현해야할 수도 있다. 가장 간단하고 직관적이 방법은 앨리스의 상태 일부를 음료라는 객체를 이용해 표현하는 것이다. 앨리스가 음료를 들고 있을 경우 음료 객체를 상태로 표현하여 앨리스가 음료를 들고 있는 상태임을 나타내게할 수 있다.&lt;/p&gt;

&lt;p&gt;앨리스가 음료를 들고 있게될 경우, 앨리스와 음료 객체는 서로 연결되게된다.&lt;/p&gt;

&lt;p&gt;결론적으로 모든 객체의 상태는 단순한 값과 객체의 조합으로 표현되며, 객체의 상태를 구성하는 모든 특징을 통틀어 객체의 &lt;strong&gt;프로퍼티(property)&lt;/strong&gt;라고한다. 일반적으로 프로퍼티는 변경되지 않고 고정되기 때문에 ‘정적’이다. 하지만 &lt;strong&gt;프로퍼티 값(property value)&lt;/strong&gt;은 시간의 흐름에 따라 변경되어 ‘동적’이다.&lt;/p&gt;

&lt;p&gt;앨리스가 음료를 들고 있을 경우 두 객체는 서로 연결되어있다. 앨리스가 음료를 마시게 될 경우, 앨리스는 음료를 마셨다는 메시지를 음료 객체에 전달하게되고, 음료 객체는 이에 따라 상태를 변화시킬 것이다. 객체와 객체사이의 의미 있는 연결을 &lt;strong&gt;링크(link)&lt;/strong&gt;라고 한다.&lt;/p&gt;

&lt;p&gt;링크와 달리 객체를 구성하는 단순한 값은 &lt;strong&gt;속성(attribute)&lt;/strong&gt;이라고 부른다. 앨리스의 키, 음료수의 양은 단순한 값으로 표현되므로 속성이다.&lt;/p&gt;

&lt;p&gt;객체의 상태를 정의해보자, 이 책에서는 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;상태는 특정 시점에 객체가 가지고 있는 정보의 집합으로 객체의 구조적인 특징을 표현한다. 객체의 상태는 객체에 존재하는 정적인 프로퍼티와 동적인 프로퍼티 값으로 구성된다. 객체의 프로퍼티는 단순한 값과 다른 객체를 참조하는 링크로 구분할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sat, 01 Jan 2022 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//OOP_2</link>
        <guid isPermaLink="true">https://achasan.github.io//OOP_2</guid>
        
        <category>ETC</category>
        
        
      </item>
    
      <item>
        <title>Spring framework 환경에서 git 세팅</title>
        <description>&lt;p&gt;기나긴 삽질 끝에 Spring을 사용하여 git 세팅하는 방법을 찾아냈다. 이전 프로젝트처럼 세팅하여 사용하면 될 줄 알았으나 JSP와 다르게 Spring에서는 Maven이라는 빌드 툴이 있어서 그런지 좀 더 디테일한 세팅이 필요한 것 같았다.&lt;/p&gt;

&lt;p&gt;가장 중요한 점은 gitignore를 사용하여 메타데이터가 원격저장소에 push 되지 않도록 해야한다는 것이다. gitignore를 세팅하지않고 사용했더니 나중에는 다른 팀원들이 프로젝트를 불러오지 못하게되어, 결국 원격저장소를 새로 만들어야하는 상황까지 나오게 되었다.&lt;/p&gt;

&lt;p&gt;Eclipse를 기준으로 스프링에서 git 세팅을 어떻게하는지 알아보자.&lt;/p&gt;

&lt;h1 id=&quot;원격저장소로-프로젝트-파일-저장하기&quot;&gt;원격저장소로 프로젝트 파일 저장하기&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-gitignore-세팅하기&quot;&gt;1. gitignore 세팅하기&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-11-13-27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 gitignore를 세팅해주어야 한다. 세팅방법은 생각보다 간단하다. &lt;a href=&quot;https://www.toptal.com/developers/gitignore&quot;&gt;gitignore.io&lt;/a&gt;사이트에서 자신이 사용하고 있는 스택을 적으면 이에 맞는 gitignore 코드를 생성해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-11-13-51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성된 코드를 복사해준다. 이 코드는 GitHub에서 새로운 프로젝트를 만들면서 생성한 gitignore 파일에 추가해줄 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-github에서-새로운-프로젝트-생성&quot;&gt;2. GitHub에서 새로운 프로젝트 생성&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-11-24-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;세팅이 완료되면 GitHub에서 새로운 저장소를 생성해준다. gitignore 파일을 추가해주고 파일 템플릿은 임의로 Java로 선택한다음 저장소를 생성해주었다.&lt;/p&gt;

&lt;p&gt;프로젝트가 생성되면 Eclipse에서 저장소를 clone해와야한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-11-26-17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 clone이 되었다면 아래와 같이 working tree에 .gitignore 파일이 있어야한다. .gitignore파일에 있는 내용을 전부 지우고 gitignore.io에서 생성한 코드를 붙여넣기 해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-11-27-00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-프로젝트와-github-저장소-연결&quot;&gt;3. 프로젝트와 GitHub 저장소 연결&lt;/h2&gt;

&lt;p&gt;여기까지 되었다면 이제 연동하려는 프로젝트를 우클릭 후 [Team] - [Share Project]를 클릭한 후clone한 원격저장소와 연결시켜주면 된다. Finish를 누르기 전에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use or create repository in parent of project&lt;/code&gt; 문항을 체크할지를 결정하자. 웬만하면 체크를 해제하고 진행하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-16-44-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후 git staging에서 push하려는 파일이 올바르게 올라와 있는지 확인 후 push하면 원격저장소로 프로젝트 파일이 push되게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;원격-저장소에서-프로젝트-불러오기&quot;&gt;원격 저장소에서 프로젝트 불러오기&lt;/h1&gt;

&lt;p&gt;push된 원격저장소를 다른 컴퓨터에서 간단하게 import 하는 방법을 알아보도록 하자.&lt;/p&gt;

&lt;p&gt;원격저장소 URL을 가지고 clone한 다음, working tree에 있는 소스파일 폴더 이름을 우클릭 한 후 [import projects]를 클릭하여 소스폴더를 import 해올 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-17-07-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;import를 하면 자동적으로 프로젝트가 생성되고, src 폴더 안에 소스파일이 포함되어 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-17-09-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성된 프로젝트 폴더는 자동으로 원격저장소와 연결되며, 변경된 사항이 있을 경우 push하여 원격저장소에 저장할 수 있다.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//spring_git_setting</link>
        <guid isPermaLink="true">https://achasan.github.io//spring_git_setting</guid>
        
        <category>ETC</category>
        
        
      </item>
    
      <item>
        <title>[PRO] LV2 : 가장 큰 수</title>
        <description>&lt;h1 id=&quot;프로그래머스-lv2--가장-큰-수&quot;&gt;프로그래머스 Lv2 : 가장 큰 수&lt;/h1&gt;

&lt;h2 id=&quot;문제-설명&quot;&gt;문제 설명&lt;/h2&gt;

&lt;p&gt;0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.&lt;/p&gt;

&lt;p&gt;예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고, 이중 가장 큰 수는 6210입니다.&lt;/p&gt;

&lt;p&gt;0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때, 순서를 재배치하여 만들 수 있는 가장 큰 수를 문자열로 바꾸어 return 하도록 solution 함수를 작성해주세요.&lt;/p&gt;

&lt;h2 id=&quot;제한-사항&quot;&gt;제한 사항&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;numbers의 길이는 1 이상 100,000 이하입니다.&lt;/li&gt;
  &lt;li&gt;numbers의 원소는 0 이상 1,000 이하입니다.&lt;/li&gt;
  &lt;li&gt;정답이 너무 클 수 있으니 문자열로 바꾸어 return 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;입출력-예&quot;&gt;입출력 예&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;[6, 10, 2] &amp;gt; “6210”&lt;/li&gt;
  &lt;li&gt;[3, 30, 34, 5, 9] &amp;gt; “9534330”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;입력한-코드&quot;&gt;입력한 코드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정렬 심화문제이다. 로직 자체는 매우 간단하지만 어떻게 구현해야할지 생각하는게 정말 힘들었다.&lt;/p&gt;

&lt;p&gt;처음에는 숫자의 맨 앞자리를 비교한 후, 같은 숫자가 있을 경우 다음 자릿수가 있는지 체크하고 이를 비교하는 Comparator 객체를 만드려고 했으나 로직이 너무 복잡해져서 문제의도를 이런식으로 출제하는 건 개발자스럽지 않다는 생각을 갖게되어 바로 포기했다.&lt;/p&gt;

&lt;p&gt;문제의 포인트는 ‘문자열’ 비교였다. 배열 내에 있는 각 원소들을 String타입으로 바꾸고 두 원소를 합친 다음에 compareTo() 메서드를 사용하여 정렬하게되면 손쉽게 구현이 가능했다. 큰 수를 구해야하므로 오름차순이 아닌 내림차순으로 구현되어야한다. 따라서 (o2+o1).compareTo(o1+o2)의 값을 리턴하도록 하였다.&lt;/p&gt;

&lt;p&gt;정렬문제는 Comparator 객체를 얼마나 잘 다루느냐가 핵심인 것 같다. 보통 정렬 알고리즘이 두 객체를 어떻게 비교하느냐에 따라서 결정되기 때문에 Comparator에 대한 이해가 잘 된다면 손 쉽게 문제에 접근할 수 있는 것 같다. 해당 객체는 &lt;a href=&quot;https://achasan.github.io/Comparator_Comparable&quot;&gt;여기&lt;/a&gt; 에서 따로 포스팅하여 다루었기 때문에 참고하는 것이 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;사실 처음에 생각했던 방법이 막힌다음 내 머리로는 못 풀겠다고 판단하여 구글링을 하면서 힌트를 얻었다. String으로 compareTo() 메서드를 응용하는 방법을 알았으므로 앞으로 사용할 일이 있으면 활용해야겠다.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//lv2_Biggest_Num</link>
        <guid isPermaLink="true">https://achasan.github.io//lv2_Biggest_Num</guid>
        
        <category>Algorhythm</category>
        
        
      </item>
    
      <item>
        <title>[BOJ] 1874번 : 스택 수열</title>
        <description>&lt;h1 id=&quot;1874번--스택-수열&quot;&gt;1874번 : 스택 수열&lt;/h1&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;스택 (stack)은 기본적인 자료구조 중 하나로, 컴퓨터 프로그램을 작성할 때 자주 이용되는 개념이다. 스택은 자료를 넣는 (push) 입구와 자료를 뽑는 (pop) 입구가 같아 제일 나중에 들어간 자료가 제일 먼저 나오는 (LIFO, Last in First out) 특성을 가지고 있다.&lt;/p&gt;

&lt;p&gt;1부터 n까지의 수를 스택에 넣었다가 뽑아 늘어놓음으로써, 하나의 수열을 만들 수 있다. 이때, 스택에 push하는 순서는 반드시 오름차순을 지키도록 한다고 하자. 임의의 수열이 주어졌을 때 스택을 이용해 그 수열을 만들 수 있는지 없는지, 있다면 어떤 순서로 push와 pop 연산을 수행해야 하는지를 알아낼 수 있다. 이를 계산하는 프로그램을 작성하라.&lt;/p&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;

&lt;p&gt;첫 줄에 n (1 ≤ n ≤ 100,000)이 주어진다. 둘째 줄부터 n개의 줄에는 수열을 이루는 1이상 n이하의 정수가 하나씩 순서대로 주어진다. 물론 같은 정수가 두 번 나오는 일은 없다.&lt;/p&gt;

&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;

&lt;p&gt;입력된 수열을 만들기 위해 필요한 연산을 한 줄에 한 개씩 출력한다. push연산은 +로, pop 연산은 -로 표현하도록 한다. 불가능한 경우 NO를 출력한다.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h3 id=&quot;입력-코드&quot;&gt;입력 코드&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumberFormatException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NO&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;문제만 읽었을 때는 도대체 어떤 방식으로 로직이 실행되는 지 눈으로 봐도 모르겠에서 구글링을 통해 힌트를 얻었다. 데이터를 입력하면 어떤 로직을 통해 예제의 출력값이 나오는지를 알아야했다.&lt;/p&gt;

&lt;p&gt;로직은 다음의 조건을 가지고 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;값을 입력하면 그 값만큼 stack에 push한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;3을 입력했을 때 stack.push(1), stack.push(2), stack.push(3)&lt;/li&gt;
      &lt;li&gt;StringBuilder에 ‘+’를 추가해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;stack.poll() 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;배열에 저장한다. (필자는 StringBuilder에 append 하였다.) 입력한 값을 temp 변수에 저장한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정수를 입력한다. 입력한 값이 1에서 입력한 값보다 클 경우에는 값만큼 stack.push한다.
입력한 값이 1에서 입력한 값보다 작을 경우에는 현재 stack에 있는 값이 입력한 값보다 큰 지를 확인한다. 클 경우에는 NO를 출력해야한다. - 입력한 값을 모두 입력한 후 NO를 출력해야하므로 boolean 변수를 따로 생성한 다음 반복문을 빠져나오고나서 if문을 통해 출력값을 설정하였다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;문제를 이해한다면 로직을 구현하는데 큰 문제는 없었다. 문제를 이해하고 Stack 객체를 활용할 줄 안다면 로직 구현은 매우 쉬워진다. 위의 로직을 그대로 코드로 구현만 하면 될 것 같다.&lt;/p&gt;

&lt;p&gt;백준을 풀 때 항상 지문을 이해하기가 너무 어려운 것 같다. 예시를 보다 구체적으로 들어주면 좋을 것 같은데,, 다양한 문제를 제공하는 것은 장점이지만 문제의 출제의도를 파악하고 어떤 자료구조를 요구하는지를 바로 알아채기가 힘든 것 같다.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//s3_stack_sequence</link>
        <guid isPermaLink="true">https://achasan.github.io//s3_stack_sequence</guid>
        
        <category>Algorhythm</category>
        
        
      </item>
    
      <item>
        <title>[BOJ] 18870번 : 좌표 압축</title>
        <description>&lt;h1 id=&quot;18870번--좌표압축&quot;&gt;18870번 : 좌표압축&lt;/h1&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;수직선 위에 N개의 좌표 X1, X2, …, XN이 있다. 이 좌표에 좌표 압축을 적용하려고 한다.&lt;/p&gt;

&lt;p&gt;Xi를 좌표 압축한 결과 X’i의 값은 Xi &amp;gt; Xj를 만족하는 서로 다른 좌표의 개수와 같아야 한다.&lt;/p&gt;

&lt;p&gt;X1, X2, …, XN에 좌표 압축을 적용한 결과 X’1, X’2, …, X’N를 출력해보자.&lt;/p&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;

&lt;p&gt;첫째 줄에 N이 주어진다.&lt;/p&gt;

&lt;p&gt;둘째 줄에는 공백 한 칸으로 구분된 X1, X2, …, XN이 주어진다.&lt;/p&gt;

&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;

&lt;p&gt;첫째 줄에 X’1, X’2, …, X’N을 공백 한 칸으로 구분해서 출력한다.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h3 id=&quot;작성-코드&quot;&gt;작성 코드&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumberFormatException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreTokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rankArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rankArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rankArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;백준 문제가 정말 불친절하게 느껴진다. 내가 수포자라서 그런건진 몰라도..&lt;/p&gt;

&lt;p&gt;좌표압축을 활용한 ranking list를 만드는 문제이다. 특정한 알고리즘은 아니라고한다. 보통 코딩테스트에서 쓰일 때는 위의 문제와 같이 순위를 매기고자 할 때 쓰이고, 2차원 배열에서부터 활용되기 시작하는데, 흔히 쓰는 zip 파일과 같은 파일 압축프로그램이 위의 원리와 비슷하게 동작한다고 보면 된다.&lt;/p&gt;

&lt;p&gt;문제가 이해하기 어렵게 묘사되어있는 것 같다. 일단 내 기준으로 봤을 때는 그렇다.
문제를 해석하면 배열 안에있는 값들의 순위를 매기는 것이다. 단, 0순위부터 시작한다. 제일 작은숫자(음수)부터 순위가 매겨진다.&lt;/p&gt;

&lt;p&gt;일단 배열안에 있는 데이터의 index를 기억해야하기 때문에 원본 배열이 하나 필요하고, Arrays.copyOf() 메서드를 사용하여 배열을 하나 복사한다.&lt;/p&gt;

&lt;p&gt;복사한 배열은 sort하여 오름차순으로 정렬한 다음, HashMap 객체를 이용하여 배열에 있는 값을 key로, 순위를 value로 하여 넣어놓는다.&lt;/p&gt;

&lt;p&gt;여기서 중요한 점은 containsKey 메서드를 사용하여 중복여부를 판단하는 것이다. 문제 자체가 중복되는 값은 같은 순위값을 매기기 때문에 중복되는 값이 있으면 반복문에서 걸러내는 작업이 중요하다.&lt;/p&gt;

&lt;p&gt;좌표압축이라는 키워드를 처음 들어보기도했고, 문제설명이 조금 이해안되게 나온 것 같기도하고.. 구현하는데는 큰 어려움은 없었다. 다만 이해가 안되서 좌표압축이 무엇인지 구글링을 해보긴 했다.. 이번 기회에 이해하고 넘어가는게 좋을 듯 싶다.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//s2-compression_coordinates</link>
        <guid isPermaLink="true">https://achasan.github.io//s2-compression_coordinates</guid>
        
        <category>Algorhythm</category>
        
        
      </item>
    
      <item>
        <title>Comparator, Comparable 객체 정리</title>
        <description>&lt;h1 id=&quot;comparator-comparable-정리&quot;&gt;Comparator, Comparable 정리&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;보통 배열이나 컬렉션 객체에 들어있는 데이터를 오름차순, 내림차순으로 정렬하기위해서 sort() 메서드를 많이 사용할 것이다.&lt;/p&gt;

&lt;p&gt;Arrays.sort(), Collections.sort()를 사용하면 기본적으로 오름차순으로 정렬이 된다. 하지만 정렬 기준을 보다 세부적으로 설정하거나, 기본자료형이 아닌 객체를 정렬할 경우 등 직접 기준을 세워 어떤 데이터를 기준으로 정렬할 지를 정해야하는 경우가 있다.&lt;/p&gt;

&lt;p&gt;정렬하는 기준을 설정하기 위해서는 Comparator, Comparable 객체를 사용하여 정렬해야한다. 두 객체는 모두 인터페이스이며, 객체를 생성할 경우 추상메서드를 구현하여 사용하여야 한다.&lt;/p&gt;

&lt;p&gt;두 객체는 정렬할 시 기준을 정하여 두 원소를 비교한다는 공통점을 가지고 있지만, 비교하는 방식에서 차이점을 보인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;comparator&quot;&gt;Comparator&lt;/h2&gt;

&lt;p&gt;일단 예시코드를 한번 보도록 하자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;보통 오름차순 정렬을 할 때는 Arrays.sort(arr)를 사용하여 정렬할 것이다. 여기서 두 번째 매개변수에 Comparator 익명 객체를 생성하여 compare 추상 메서드를 구현하면 원하는 정렬기준을 설정하고 이를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;위에서는 Comparator 객체를 생성하여 사용하였다. Comparator 객체는 제네릭을 사용하여 비교하는 객체를 하나의 타입으로 제한하여 사용한다. 원래는 클래스에서 상속하여 compare 메서드를 구현하여 사용할 수있지만 익명객체를 생성하면 간단한 배열의 정렬기준에도 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;이제 compare 메서드를 알아보자. compare 메서드는 Comparator 인터페이스의 추상메서드이고, &lt;strong&gt;두 객체를 비교할 때&lt;/strong&gt; 사용한다.&lt;/p&gt;

&lt;p&gt;위의 코드블럭을 보면 String o1, String o2가 매개변수로 들어가게되어 두 객체를 비교한 다음 int 값을 리턴함으로써 정렬기준을 만들게 된다. compare 메서드는 int값을 리턴하여 두 객체를 비교했을 때 교환해야할지 말아야할지를 결정한다.&lt;/p&gt;

&lt;p&gt;int 값이 음수일 경우 두 원소의 교환이 일어나지 않고, 양수일 경우 두 원소를 교환한다. 0일 때는 기본적으로 교환이 일어나지 않는다.&lt;/p&gt;

&lt;p&gt;int 값을 리턴할 때는 -1, 0, 1로 return 하도록 설정하여 사용하는 것이 바람직하다. int 값의 범위는 -21,4748,3648 ~ +21,4748,3647 이므로, 만약 두 객체를 비교했는데 해당 값의 범위를 초과할 경우 음수, 양수가 바뀌게 되어 잘못된 정렬이 설정될 수 있다.&lt;/p&gt;

&lt;p&gt;정리하자면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Comparable은 compare 추상메서드를 가진 인터페이스이다. 익명객체로 만든다음 이를 구현하여 Arrays.sort() 메서드의 정렬기준을 설정할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;compare 메서드는 int값을 리턴한다. -1, 0 일 경우 두 비교 객체는 교환안함(default), 1일 경우에는 두 비교 객체의 교환이 일어난다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;보통은 두 객체를 빼거나 더함으로써 나오는 int값을 리턴하도록 설정한다. 하지만 int값의 범위는 한정적이므로 이를 감안하여 사용하도록 하자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;comparable&quot;&gt;Comparable&lt;/h2&gt;

&lt;p&gt;Comparable도 Comparator객체와 사용방법이 비슷하다. 다만 추상메서드로 compareTo()를 가지고 있다. compareTo() 메서드는 자기 자신과 대상 객체를 비교하게된다는 점에서 차이점을 가진다.&lt;/p&gt;

&lt;p&gt;또한 lang 패키지에서 제공되어 import 없이 사용가능한 Comparator와 다르게 Comparable 객체는 util 패키지에서 제공되어진다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;같은 예제코드이다.&lt;/p&gt;

&lt;p&gt;o1, o2 String 변수를 비교했을 때 길이가 같을 경우 compareTo 메서드를 사용하여 나온 int값을 리턴하도록 되어있다. 이미 String 클래스에서는 Comparable 인터페이스를 상속받고 compareTo 메서드가 구현이 되어있기 때문에 바로 사용이 가능한 것이다. compareTo는 비교할 자신과 대상객체를 작성하기 때문에 매개변수는 하나이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anotherString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anotherString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anotherString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isLatin1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringLatin1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringUTF16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isLatin1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringLatin1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareToUTF16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringUTF16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareToLatin1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;String 클래스의 compareTo는 다음과 같이 구현되어있다. (참고)&lt;/p&gt;

&lt;p&gt;알고리즘 문제를 풀 때 정렬은 어디서나 물어볼 수 있다고 생각한다. 따라서 정렬을 사용하는 인터페이스를 알아두고, 문제해결을 하기 위해 할외하는 시간을 줄이기 위해 해당 인터페이스를 정리하는 글을 작성하였다.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//Comparator_Comparable</link>
        <guid isPermaLink="true">https://achasan.github.io//Comparator_Comparable</guid>
        
        <category>Algorhythm</category>
        
        
      </item>
    
      <item>
        <title>[BOJ] 1427번 : 소트인사이드</title>
        <description>&lt;h1 id=&quot;1427번--소트인사이드-링크&quot;&gt;1427번 : 소트인사이드 &lt;a href=&quot;https://www.acmicpc.net/problem/1427&quot;&gt;(링크)&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;배열을 정렬하는 것은 쉽다. 수가 주어지면, 그 수의 각 자리수를 내림차순으로 정렬해보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;첫째 줄에 정렬하려고 하는 수 N이 주어진다. N은 1,000,000,000보다 작거나 같은 자연수이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;첫째 줄에 자리수를 내림차순으로 정렬한 수를 출력한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;작성코드&quot;&gt;작성코드&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;


            &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;입력한 값을 받아서 toCharArray() 메서드를 사용하면 문자열이 하나씩 분리되어 배열에 저장되게된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;저장된 배열을 Arrays.sort() 정적메서드를 사용하여 정렬해준다. char 자료형은 각 문자마다 고유코드가 존재하며, 그 코드가 기준이되어 정렬을 하기 때문에 char 자료형으로 정렬하더라도 문제가 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;내림차순으로 정렬한 수를 출력해야하므로 반복문을 거꾸로해서 구현하였다. StringBuilder 객체에 append하여 하나씩 합쳐준 다음 출력하면 끝이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 23 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//s5_sort_inside</link>
        <guid isPermaLink="true">https://achasan.github.io//s5_sort_inside</guid>
        
        <category>Algorhythm</category>
        
        
      </item>
    
      <item>
        <title>[BOJ] 11651번 : 단어 정렬</title>
        <description>&lt;h1 id=&quot;11651번--단어-정렬&quot;&gt;11651번 : 단어 정렬&lt;/h1&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;알파벳 소문자로 이루어진 N개의 단어가 들어오면 아래와 같은 조건에 따라 정렬하는 프로그램을 작성하시오.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;길이가 짧은 것부터&lt;/li&gt;
  &lt;li&gt;길이가 같으면 사전 순으로&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;

&lt;p&gt;첫째 줄에 단어의 개수 N이 주어진다. (1 ≤ N ≤ 20,000) 둘째 줄부터 N개의 줄에 걸쳐 알파벳 소문자로 이루어진 단어가 한 줄에 하나씩 주어진다. 주어지는 문자열의 길이는 50을 넘지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;

&lt;p&gt;조건에 따라 정렬하여 단어들을 출력한다. 단, 같은 단어가 여러 번 입력된 경우에는 한 번씩만 출력한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumberFormatException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Arrays.sort()를 사용하여 문제를 풀었다. Arrays.sort() 매개변수로 배열을 넣으면 오름차순으로 정렬되지만, 위 문제처럼 길이가 짧은 순, 사전 순으로 우선순위가 정해진 경우에는 비교 객체를 만들어서 문제를 풀어야한다.&lt;/p&gt;

&lt;p&gt;비교객체는 Comparator, Comparable이 있다. 두 객체 모두 인터페이스이다. 여기서는 Comparator를 사용하여 문제를 풀었다. 익명객체를 생성한 다음 추상메서드인 compare를 구현하여 문제를 풀었다.&lt;/p&gt;

&lt;p&gt;같은 단어가 여러 번 입력된 경우 한 번씩 출력해야되는 조건을 까먹고있어서 몇 번 틀렸는데, 아래에서 반복문을 통해 이전 단어와 일치하지 않을 때만 StringBuilder에 넣어서 출력하도록 하였다.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//s5-Coordinate_alignment2</link>
        <guid isPermaLink="true">https://achasan.github.io//s5-Coordinate_alignment2</guid>
        
        <category>Algorhythm</category>
        
        
      </item>
    
      <item>
        <title>[BOJ] 11650번 : 좌표 정렬하기</title>
        <description>&lt;h1 id=&quot;11650번--좌표-정렬하기&quot;&gt;11650번 : 좌표 정렬하기&lt;/h1&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2차원 평면 위의 점 N개가 주어진다. 좌표를 x좌표가 증가하는 순으로, x좌표가 같으면 y좌표가 증가하는 순서로 정렬한 다음 출력하는 프로그램을 작성하시오.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;첫째 줄에 점의 개수 N (1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N개의 줄에는 i번점의 위치 xi와 yi가 주어진다. (-100,000 ≤ xi, yi ≤ 100,000) 좌표는 항상 정수이고, 위치가 같은 두 점은 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;첫째 줄부터 N개의 줄에 점을 정렬한 결과를 출력한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;작성코드&quot;&gt;작성코드&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumberFormatException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2차원 배열을 정렬하는 문제, 2차원 배열을 정렬하기 위해서는 Array.sort() 메서드를 사용하되, 비교하는 로직을 따로 설정해주어야한다. 안그러면 예외 발생&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;입력값에 공백이 있으므로 StringTokenizer를 사용하여 공백을 제거하고 값을 각각 넣어주었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Arrays.sort 부분을 보면 첫 번째 파라미터로 배열, 두 번째는 콜백을 넣어서 정렬을 진행하도록 구현했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;만약 x 배열과 y 배열을 비교하는데 첫 번째 행의 값이 같을 경우, 두 번째 행의 값을 비교하여 리턴하고, 같지 않을 경우에는 첫 번째 행을 비교하여 리턴하도록 콜백을 만들었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이후 출력문과 동일하게 StringBuilder를 사용하여 출력되도록 설정하였다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2차원 배열의 정렬방식은 Array.sort() 메서드를 사용하되, 값을 비교하는 방식은 콜백으로 따로 설정해주어 사용해야한다. 만약 내림차순으로 정렬하려고할 때도 위의 형식으로 콜백을 만들어주면 로직에 맞춰서 정렬을 해주니 참고하는 것이 좋을 것 같다.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//s5-Coordinate_alignment</link>
        <guid isPermaLink="true">https://achasan.github.io//s5-Coordinate_alignment</guid>
        
        <category>Algorhythm</category>
        
        
      </item>
    
      <item>
        <title>[BOJ] 2018번 : 통계학</title>
        <description>&lt;h1 id=&quot;2018번--통계학-link&quot;&gt;2018번 : 통계학 &lt;a href=&quot;https://www.acmicpc.net/problem/2108&quot;&gt;Link&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;수를 처리하는 것은 통계학에서 상당히 중요한 일이다. 통계학에서 N개의 수를 대표하는 기본 통계값에는 다음과 같은 것들이 있다. 단, N은 홀수라고 가정하자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;산술평균 : N개의 수들의 합을 N으로 나눈 값&lt;/li&gt;
  &lt;li&gt;중앙값 : N개의 수들을 증가하는 순서로 나열했을 경우 그 중앙에 위치하는 값&lt;/li&gt;
  &lt;li&gt;최빈값 : N개의 수들 중 가장 많이 나타나는 값&lt;/li&gt;
  &lt;li&gt;범위 : N개의 수들 중 최댓값과 최솟값의 차이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;N개의 수가 주어졌을 때, 네 가지 기본 통계값을 구하는 프로그램을 작성하시오.&lt;/p&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;

&lt;p&gt;첫째 줄에 수의 개수 N(1 ≤ N ≤ 500,000)이 주어진다. 단, N은 홀수이다. 그 다음 N개의 줄에는 정수들이 주어진다. 입력되는 정수의 절댓값은 4,000을 넘지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;

&lt;p&gt;첫째 줄에는 산술평균을 출력한다. 소수점 이하 첫째 자리에서 반올림한 값을 출력한다.&lt;/p&gt;

&lt;p&gt;둘째 줄에는 중앙값을 출력한다.&lt;/p&gt;

&lt;p&gt;셋째 줄에는 최빈값을 출력한다. 여러 개 있을 때에는 최빈값 중 두 번째로 작은 값을 출력한다.&lt;/p&gt;

&lt;p&gt;넷째 줄에는 범위를 출력한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;최빈값을 구하는 로직을 구현하다가 막혀서 개고생한 문제이다. 최빈값이 여러 개 있을 경우에는 두 번째로 작은 값을 출력해야되는데, 안풀려서 풀었다 안풀었다 한 문제.&lt;/p&gt;

&lt;h3 id=&quot;코드&quot;&gt;코드&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumberFormatException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// -4000 ~ 4000 정수&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 최대최소, 평균 변수 생성&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 입력한 값 배열에 넣기, min, max 값 산출, 총합 구하기&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]++;&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//중앙값 구하기&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                    &lt;span class=&quot;cm&quot;&gt;/**
                    * 중앙값 구하기, count가 (n+1)/2 보다 작을 경우에는
                    * mid 값 설정
                    */&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;



                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mode_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mode_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode_num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이 문제에서 중요하게 보아야할 부분은 정수의 절댓값이 4000을 넘지 않는다는 점이다. Counting sort를 사용하여 문제를 풀라는 소리와 같다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;따라서 8001개의 공간을 가진 int 배열을 생성해서 입력한 값에 따라 해당하는 배열 자리에 수를 하나씩 더하여 값을 저장하였다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;산술평균과 범위를 구하는 법은 쉽다. 배열에 값을 추가할 때마다 최솟값과 최대값인지를 확인하고 변수에 값을 저장하기만 하면 된다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;산술평균의 경우 값을 소수점 첫 번째 자리에서 반올림한다고 했으므로, sum 변수를 double타입으로 캐스팅해야 값이 누락되지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Counting sort를 사용하므로 반복문에서 i를 사용하여 중앙값을 구할 수 없다. 따라서 count라는 변수를 따로 만든 다음 입력한 n의 절반이하라면 중앙값을 갱신하도록 구현하였다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;최빈값을 구하기 위해서는 2가지의 조건이 같이 돌아가야한다. 단순히 최빈값이 하나만 나오면 쉬워지지만, 같은 최빈값을 가진 수가 2개 이상이라면 이야기가 달라진다. 두 번째로 작은 값을 뽑아내야되기 때문에 check 이라는 boolean 변수를 만들어 같은 최빈값이 두 번째로 나왔다면 그 값을 홀드하고 check을 false로 만들어 다음에 또 최빈값이 나오더라도 패스하도록 구현하였다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 23 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//s4-Statistics</link>
        <guid isPermaLink="true">https://achasan.github.io//s4-Statistics</guid>
        
        <category>Algorhythm</category>
        
        
      </item>
    
      <item>
        <title>객체지향의 사실과 오해 1장 정리</title>
        <description>&lt;h1 id=&quot;객체지향의-사실과-오해-1장-정리&quot;&gt;객체지향의 사실과 오해 1장 정리&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ObjectOrientation.png&quot; alt=&quot;book&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;시너지를 생각하라, 전체는 부분의 합보다 크다. - 스티븐 코비&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;협력하는-객체들의-공통체&quot;&gt;협력하는 객체들의 공통체&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1장에서는 지금까지 설명해온 객체지향의 개념을 부정하며 시작한다.&lt;/li&gt;
  &lt;li&gt;객체지향 소프트웨어는 실세계의 투영, 객체란 현실 세계에 존재하는 사물에 대한 추상화이지만 이는 철학적인 개념&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;실용적인 관점에서는 설명하기에 적합하지 않다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;객체지향의 목표는 실세계를 모방하는 것이 아닌 새로운 세계를 창조하는 것&lt;/li&gt;
  &lt;li&gt;하지만 실세계의 비유가 객체지향의 다양한 측면을 이해하고 학습하는데 효과적&lt;/li&gt;
  &lt;li&gt;실세계로 객체지향을 설명해야 핵심 사상인 &lt;strong&gt;연결안정성&lt;/strong&gt;을 설명하는데 적합한 틀 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;협력하는-사람들&quot;&gt;협력하는 사람들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;한 에피소드를 이야기하며 시작.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;커피를 마시고 싶은 손님이 커피를 주문하기위해 캐시어한테 커피를 주문, 점원은 바리스타에게 커피를 한 잔 달라고 요청, 만들어진 커피는 손님에게 전달됨.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;손님이 커피를 마시기까지의 과정에 암묵적인 &lt;strong&gt;협력&lt;/strong&gt;관계가 숨어있음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;손님, 캐시어, 바리스타는 자신이 맡은 &lt;strong&gt;역할&lt;/strong&gt;이 있으며, 이를 성실히 수행하기위해 &lt;strong&gt;책임&lt;/strong&gt;을다한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사람이 사는 곳이라면 어디서나 &lt;strong&gt;역할, 책임, 협력&lt;/strong&gt;이 존재하며 이는 객체지향에서 가장 중요한 개념 세 가지가 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;요청과-응답으로-구성된-협력&quot;&gt;요청과 응답으로 구성된 협력&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;사람은 스스로 해결하지 못하는 문제와 마주치면 다른 사람에게 도움을 &lt;strong&gt;요청(request)&lt;/strong&gt; 한다. 문제의 규모가 클 수록 요청은 연쇄적으로 발생하게된다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;손님은 커피를 못 만드므로 커피를 캐시어에게 요청한다.&lt;/li&gt;
      &lt;li&gt;캐시어는 주문을 받고 바리스타에게 커피를 만들도록 요청한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;요청을 받은 사람은 주어진 책임을 다하며 다른사람의 요청에 &lt;strong&gt;응답(response)&lt;/strong&gt; 한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;바리스타는 캐시어의 요청을 받고 커피를 만든다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;캐시어는 바리스타로 부터 만들어진 커피를 받고, 손님의 요청에 응답한다.(전달)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위의 과정을 통해 다른사람과 &lt;strong&gt;협력(collaboration)&lt;/strong&gt; 할 수 있는 능력은 거대하고 복잡한 문제를 해결할 수 있는 공통를 생성시킨다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;역할과-책임&quot;&gt;역할과 책임&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;협력하는 과정 속에서 특정한 역할을 부여받게된다. 위의 과정에서는 손님, 캐시어, 바리스타라는 역할이 존재한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;여기서 역할은 책임이라는 개념을 내포한다. 경찰이 범죄자를 잡아야하는 책임, 선생님이 제자를 가르쳐야하는 책임이 있는 것처럼 말이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;역할을 맡고, 적합한 책임을 수행하는 것은 몇 가지 중요한 개념을 제시한다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;여러 사람이 동일한 역할을 수행할 수 있다.&lt;/li&gt;
      &lt;li&gt;역할은 대체 가능성을 의미한다.&lt;/li&gt;
      &lt;li&gt;책임을 수행하는 방법은 자율적으로 선택할 수 있다.&lt;/li&gt;
      &lt;li&gt;한 사람이 동시에 여러 역할을 수행할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;역할-책임-협력&quot;&gt;역할, 책임, 협력&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;손님, 캐시어, 바리스타가 가지고 있던 역할과 책임을 객체지향적으로 바꾸어보자.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사람이라는 단어를 객체로, 요청을 메시지로, 요청을 처리하는 방법을 메서드로 바꾸면 객체지향의 문맥으로 옮길 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사람들이 타인과 관계를 맺고, 협력하는 과정이 객체지향과 근본개념과 유사하다는 사실을 공감할 수 있게된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;역할과-책임을-수행하며-협력하는-객체들&quot;&gt;역할과 책임을 수행하며 협력하는 객체들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;협력의 핵심은 특정한 책임을 수행하는 역할을 간의 연쇄적인 요청과 응답을 통해 목표를 달성한다는 것이다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;목표의 규모가 커질 수록 목표는 작은 단위로 쪼개지게되며, 하나의 단위에 적합한 사람이 역할을 수행하게되면서 요청과 응답은 연쇄되어 하나의 목표를 달성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체의 경우 애플리케이션의 기능을 구현하기위해 협력하게된다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;하나의 시스템은 역할과 책임을 수행하는 객체로 분할되고, 시스템의 기능은 객체 간의 연쇄적인 요청과 응답의 흐름으로 구성된 협력으로 구현된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체의 역할은 사람의 역할과 유사하게 다음과 같은 특징을 지닌다.
    &lt;ul&gt;
      &lt;li&gt;여러 객체가 동일한 역할을 수행&lt;/li&gt;
      &lt;li&gt;역할은 대체 가능성을 의미&lt;/li&gt;
      &lt;li&gt;각 객체는 책임을 수행하는 방법을 자율적으로 선택&lt;/li&gt;
      &lt;li&gt;하나의 객체가 동시에 여러 역할을 수행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;협력-속에-사는-객체&quot;&gt;협력 속에 사는 객체&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;역할, 책임, 협력에 참여하는 주체는 객체이다. 협력 공동체의 일원으로서 객체는 두 가지의 덕목을 갖추어야 한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;객체는 충분히 협력적이어야한다.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;다른 객체의 요청에 귀 기울이고, 적극적으로 도움을 요청하는 열린 마음&lt;/li&gt;
          &lt;li&gt;모든 것을 스스로 처리하는 객체는 자멸하고만다.&lt;/li&gt;
          &lt;li&gt;수동적이어야한다는 의미가 아니다. 어떤 방식으로 처리할지는 객체 스스로가 결정해야한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;객체는 충분히 자율적이어야한다.&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;‘자기 스스로의 원칙에 따라 어떤 일을 하거나 통제하여 절제하는 것’&lt;/li&gt;
          &lt;li&gt;요청에 의해 역할을 수행하지만 방식은 스스로의 판단에 따라 결정하고 행동한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;객체지향 설계의 묘미는 다른 객체와 조화롭게 협력하는만큼 개방적인 동시에 참여하는 방법을 스스로 결정할 수 있는 자율적인 객체들의 공동체를 설계하는데 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;상태와-행동을-함께-지닌-자율적인-객체&quot;&gt;상태와 행동을 함께 지닌 자율적인 객체&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체를 상태(state)와 행동(behavior)을 함께 지닌 실체로 정의&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;객체의 자율성은 객체의 내부와 외부를 명확히 구분하는 것&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;객체의 사적인 부분은 스스로 관리하고 외부에서 간섭할수 없어야한다.&lt;/li&gt;
      &lt;li&gt;외부에서는 접근이 허락된 수단을 통해서만 객체와 의사소통&lt;/li&gt;
      &lt;li&gt;무엇(what)을 수행하는지는 알 수 있지만 어떻게(how) 수행하는지에 대해서는 알 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;전통적인 개발방법과 객체지향의 개발방법을 구분짓는 가장 핵심적인 차이이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;협력과-메시지-메서드와-자율성&quot;&gt;협력과 메시지, 메서드와 자율성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체는 메시지로 의사소통한다. 메시지를 전송하고 수신하며 소통한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;객체지향의 세계에서 협력은 메시지를 전송하는 객체와 메시지를 수신하는 객체 사이의 관계로 구성된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메시지를 수신하는 객체는 메시지를 이해할 수 있는지 판단하고, 자신만의 방법에 따라 메시지를 처리한다. 이를 메서드라고 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메시지와 메서드의 분리는 객체들 간의 자율성을 증진시킨다. 메시지에 응답하기위해 여러가지 메서드를 사용할 수 있게 되는 것이다. 이것은 &lt;strong&gt;캡슐화&lt;/strong&gt;라는 개념과 깊이 관련되어 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 22 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//OOP_1</link>
        <guid isPermaLink="true">https://achasan.github.io//OOP_1</guid>
        
        <category>ETC</category>
        
        
      </item>
    
      <item>
        <title>Gitignore_pull</title>
        <description>
&lt;p&gt;이번 JSP 프로젝트를 할 때 팀원들 사이에서 나온 말 중 하나는 Git을 써보고 싶다는 이야기였다.&lt;/p&gt;

&lt;p&gt;이전에 JDBC 프로젝트를 할 때는 팀원들이 각자 만든 파일을 직접 취합하는 조가 많았는데, 취합을 하는 과정에서 시간도 오래 걸리고 무엇보다 팀원들이 어떤 부분을 수정했는 지 알아내기가 거의 불가능하다는 말이 많았었다.&lt;/p&gt;

&lt;p&gt;나는 이전 프로젝트였던 JDBC 프로젝트를 할 때 조장으로써 Git을 쓰는 것이 병합하는 시간을 줄일 수 있을 것 같아 팀원들에게 Git을 써보자고 이야기했었고, Git 사용방법을 팀원들에게 알려주면서 사용했던 기억이 있어서 Git 사용에 꽤나 익숙했었다. 무엇보다 혼자 공부한 내용을 GitHub에 push만 했었지, pull request나 branch를 생성하는 부분은 하나도 몰랐었는데 팀 프로젝트를 하면서 Git을 협업툴로써 어떻게 사용해야되는지 전체적인 흐름을 알 수 있어서 좋은 경험을 한 기억이 있었다.&lt;/p&gt;

&lt;p&gt;JDBC 프로젝트에서 Git을 사용하면서 겪었던 여러가지 애로사항들을 GitHub에 정리했었다. Git을 사용하면서 어떤 문제가 발생했었고, 문제를 해결하기위해서 어떻게 처리했는지에 대한 내용들 위주로 정리했었던 기억이 난다. &lt;a href=&quot;https://achasan.github.io/github_jdbc&quot;&gt;(관련링크)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;아무튼 나는 Git을 사용하는 것에 있어서 긍정적이었고, 이번 JSP 프로젝트에서도 팀원들한테 화면부분 구현을 완료하고 1차적인 취합이 끝나면 Git을 사용해보자고 이야기하였다.&lt;/p&gt;

&lt;p&gt;이번 글을 쓰게 된 이유는 JDBC에서 Git을 사용할 때 아쉬웠던 부분들이 많아서이다.&lt;/p&gt;

&lt;p&gt;팀원들마다 컴퓨터경로가 달라 매 번 병합을 할 때마다 라이브러리 경로를 수정하고, 팀원들이 작성한 절대경로를 매 번 바꿔주어야하고, 이런 부분에 있어서 불편한 점들이 많았다.&lt;/p&gt;

&lt;p&gt;이 부분을 해결하기위해 구글링을 열심히 해봤는데, gitIgnore를 이용해서 커밋할 때 파일을 제외할 수 있는 기능이 있었다. 이 기능을 알았을 때는 JDBC 프로젝트가 막바지여서 사용할 기회가 없어서 아쉬웠던 기억이 있었다. 그래서 JSP 프로젝트에는 gitIgnore를 사용해서 병합을 좀 더 효율적으로 사용해보고싶어 미리 공부해보자는 마인드로 정리글을 쓴다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;gitIgnore 파일 생성하기
gitIgnore의 존재는 알았는데, 도대체 어떻게 사용하는지를 몰라서 여러가지를 살펴보던 와중에 gitIgnore.io 라는 사이트를 발견했다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;사용중인 운영체제, 언어, IDE 키워드를 입력하면 이에 맞게 gitIgnore에 넣어야하는 텍스트를 자동으로 생성시켜준다. 여기에서 내가 원하는대로 텍스트를 수정하여 사용하면 기본적인 부분들은 ignore 처리가 되는 것 같다.&lt;/p&gt;

&lt;p&gt;일단 가장 먼저 제외해야겠다고 생각했던 부분은 .project, .classpath이다. 해당 파일들은 이클립스에 종속되는 파일들인데, 팀원들의 컴퓨터환경이 다 다르기 때문에 컴퓨터마다 다르게 메타정보가 입력되어져 있다. 만약 이 파일들을 그대로 GitHub에 업로드하고 팀원들이 clone하게 된다면 메타정보가 일치하지 않기 때문에 정상적으로 실행되지 않을 것이다.&lt;/p&gt;

&lt;p&gt;gitIgnore의 생김새(?) : #으로 되어있는 부분은 주석이다
gitIgnore를 추가했는데도 classpath, project 파일이 계속 스테이지에 올라오길래 뭘 잘못했나 싶었다. 나중에 보니 gitIgnore.io에서 기본적으로 classpath와 project가 추가되어있지 않아서 내가 직접 추가했다.&lt;/p&gt;

&lt;p&gt;1-1. Git cache 지우기
gitIgnore만 추가했다고해서 문제가 바로 해결되는 것은 아니였다. 파일을 추가해도 계속 classpath, project 파일이 스테이지에 올라오길래 무슨 문제인가 싶어서 구글링을 해봤더니 gitIgnore를 추가하기 전에 커밋을 했거나, git 폴더에 파일들이 올라와있으면 git 캐시에 해당 파일들을 추적하는 데이터가 남아있기 때문에 이를 없애주어야한다.&lt;/p&gt;

&lt;p&gt;없애는 방법은 git 콘솔창을 띄운다음에&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rm -r --cached .
git add .
&amp;lt;!-- @import &quot;[TOC]&quot; {cmd=&quot;toc&quot; depthFrom=1 depthTo=6 orderedList=false} --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;git commit -m “cache clear”
해당 문장을 실행해주어야한다. 콤마(.)의 위치를 유의해서 사용하도록 하자.&lt;/p&gt;

&lt;p&gt;여기까지 했다면 gitIgnore 세팅은 완료된 상태이다. GitHub에 push할 경우 메타정보파일들은 빠지고 소스파일들만 GitHub에 올라가게 될 것이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;이클립스로 clone은 어떻게?
gitIgnore로 메타정보파일들을 제외하여 파일 업로드를 완료했다. 하지만 소스파일 그대로를 clone하면 정상적으로 작동하지 않을 것이다. 기본적인 프로젝트 정보가 세팅이 안되있기 때문에 이클립스에서는 단순한 폴더로만 인식하게 될 것이다. 이 부분을 해결해보자.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git에 올린 소스파일을 clone해서 git 폴더를 생성하고,&lt;/p&gt;

    &lt;p&gt;[New] - [Dynamic Web Project] 로 새로운 프로젝트폴더 생성하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성한 프로젝트 폴더 클릭 후, 상단 바 [New] - [Import] 클릭&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[General] - [File System] 클릭&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From Directory에 clone한 소스파일이 저장되어있는 폴더를 경로로 설정하고,&lt;/p&gt;

    &lt;p&gt;아래와 같이 Advanced 옵션을 체크해준다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;정리하자면 clone한 소스파일을 새로 생성한 프로젝트 폴더에 Link 시키는 것이다. git에 push할 때는 소스파일들만 업로드되게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;20211112 수정 : Create virtual folders는 체크하면 안된다. 가상폴더로 만들어서 읽기전용으로 파일을 링크하는건데, 이럴 경우 새로운 파일추가나 수정이 불가능해진다.&lt;/p&gt;

&lt;p&gt;이 상태로 css 작업을 좀 진행하고 branch를 새로 생성해서 push해봤는데, 일단은 문제없이 진행이 되는 것 같다. 내일 팀원들한테 세팅방법, git의 기본적인 흐름과 기능들을 알려줄 생각인데 문제없이 작동되었으면 좋겠다는 생각이 든다. 아마 새로운 문제가 발견되면 이 게시글에 추가해서 쓰게 될 듯 하다.&lt;/p&gt;

&lt;p&gt;나는 소스파일들만 추적하도록 했지만 이 외에도 여러가지 추적환경을 다루는 행동들을 형상관리(구성관리)라고 하는 것 같다. 소프트웨어 소스 코드 뿐 아니라 개발 환경, 빌드 구조 등 전반적인 환경 전반적인 내역에 대한 관리 체계를 뜻하는 것으로 보인다. 나중에 Spring 프로젝트를 할 때는 Maven이나 Gradle로 여러 라이브러리를 사용하면서 보다 복잡한 세팅이 되게 될 텐데, 미리 알아두는 것도 좋을 것 같다.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//gitignore_pull</link>
        <guid isPermaLink="true">https://achasan.github.io//gitignore_pull</guid>
        
        
      </item>
    
      <item>
        <title>AJAX를 사용하여 아이디 중복체크하기</title>
        <description>&lt;h1 id=&quot;ajax-사용하여-아이디-중복체크하기스프링부트&quot;&gt;AJAX 사용하여 아이디 중복체크하기(스프링부트)&lt;/h1&gt;

&lt;p&gt;곧 JSP 프로젝트가 시작된다. 시작하기 전에 AJAX에 대해 알아보고 어떻게 사용하는지 익히기 위해서 글을 작성하였다.&lt;/p&gt;

&lt;p&gt;AJAX의 개념적인 부분은 이미 구글링을 하면 다 나와있기에 여기서 자세히 설명하지는 않을 것이다. 이 글에서는 AJAX를 통해 아이디 중복확인을 하는 로직을 간단하게 구현하는 방법에 대해서 초점을 맞출 생각이다.&lt;/p&gt;

&lt;p&gt;일단 DB연동같은건 하지 않았다. 그냥 Controller에 String 배열로 임의의 아이디 여러 개를 생성해놓고, 클라이언트가 ID를 입력할 때 String 배열에 있는 값과 일치할 경우 실행될 로직을 작성해보았다. 스프링 부트로 구현해보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;test.html&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/2021-11-07-22-11-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그냥 아이디와 비밀번호가 존재하는 단순한 HTML 파일이다. input 입력란 옆에 span태그를 숨겨놓고 텍스트를 입력할 때 로직이 실행되도록 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/2021-11-07-22-21-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로직을 요약하자면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;먼저 span 태그를 숨긴다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아이디 input 태그에 아이디를 입력할 때마다 함수가 실행되는 keyup을 사용하였다. 텍스트 길이가 4미만 또는 16 이상일 때 span 태그로 조건에 만족하지 않는 멘트를 날리도록 코드를 작성했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;만약 길이가 4 이상 16 이하라면 ajax로 서버와 통신한다. post방식으로 입력한 아이디를 서버로 전송하고, url은 “/id-check”으로 설정한다. 받는 데이터 타입은 간단하게 text로 하였다. json형식으로도 받을 수 있고, 스프링부트에서 json으로 데이터를 반환하는 기능들을 지원하지만 간단하게 구현하기위해 text로 하였다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;success는 데이터를 성공적으로 받았을 때 실행되는 함수이다. 받은 데이터가 false이면 사용가능한 아이디, true이면 이미 사용중인 아이디라고 멘트가 나오도록 했다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;처음 사용할 때는 삽질을 엄청했다. 특히 데이터를 넘기는 부분. 사실 ajax를 처음 쓴다기 보다는 jQuery가 익숙치 않아서 삽질이 길어진 것 같다. 데이터를 넘길 때는 data에 값을 넣고, 데이터를 받을 때는 success의 function 파라미터로 받아오기 때문에 이 부분을 정확히 모르는 상태에서 사용하다 시간이 길어졌다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Controller&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/2021-11-07-22-24-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;먼저 이미 등록된 아이디를 ids 배열에 저장했다(임의로 작성). 입력한 아이디가 ids에 있는 아이디와 일치할 경우 이미 사용중인 아이디가 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AJAX의 url을 “/id-check”으로 설정했다. @PostMapping(“/id-check”)으로 데이터가 들어오게 되고, 여기서 로직이 실행된다. @RequestParam으로 입력값을 받아오도록 했다. AJAX부분을 보면 JSON 형식으로 key는 id, value는 입력값으로 되어있었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ids 배열을 for문으로 돌려서 만약 입력값과 일치하는 아이디가 나오면 아이디가 중복되므로 리턴할 isDistinct 변수를 true로 설정한다. 아닐 경우는 false로 설정한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 부분이 제일 스트레스 받았던 구간, 아직 스프링 부트를 배운지 얼마 안됐고, @RequestBody와 @RequestParam이 헷갈려서 데이터 값이 이상하게 오는 줄도 모르고 다른 코드를 고치고 있었다.&lt;/p&gt;

&lt;p&gt;@RequestBody는 GET이나 POST 방식이 아닐 때 사용해야하는 애노테이션이다. 정확히 말하면 쿼리파라미터로 오는 데이터가 아닐 때 사용해야한다. 모델 객체를 사용할 때 사용하는 것이 좋다. 모델 객체의 필드변수와 읽어오는 데이터의 key 값이 일치하면 모델 객체로 바인딩을 해주는 방식인데, 이를 깜빡하고 @RequestBody를 사용해서 시간이 엄청 오래걸렸다.&lt;/p&gt;

&lt;p&gt;@RequestParam은 쿼리파라미터로 값을 가져올 때 사용한다. AJAX로 보내는 값의 key가 id이므로 메서드 파라미터의 변수명도 id로 일치시키면 스프링부트는 둘의 이름이 같으므로 바인딩을 하게된다. 따라서 Model 객체가 아닌 이상은 @RequestBody를 사용하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;@ModelAttribute 애노테이션도 있다. 하지만 이 애노테이션은 쿼리파라미터를 받을 때 사용하는 Model 객체이므로 여기서는 예외.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;결과&quot;&gt;결과&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/result.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트를 한다면 정규식으로 아이디 양식을 제한하는 코드를 만들어보고 싶다. 일단 AJAX의 기본적인 기능에 대해서 알 수 있었으므로 만족한다. 비동기로 기능을 구현하는게 굉장히 편한 것 같다. 나중에는 게시판 페이징을 비동기로 이동하는 것도 구현해보고 싶은 생각이 든다.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//ajax_id_distinct</link>
        <guid isPermaLink="true">https://achasan.github.io//ajax_id_distinct</guid>
        
        <category>ETC</category>
        
        
      </item>
    
      <item>
        <title>HTTP 기본 지식 : 캐시(Cache)</title>
        <description>&lt;h1 id=&quot;http-웹-기본-지식-8&quot;&gt;HTTP 웹 기본 지식 8&lt;/h1&gt;

&lt;h2 id=&quot;캐시&quot;&gt;캐시&lt;/h2&gt;

&lt;p&gt;캐시를 사용하는 상황은 언제일까? 주로 브라우저의 이미지파일을 저장해놓고 해당 홈페이지를 로딩할 때 바로 리소스를 가져오도록 하기 위해서 사용될 것이다. 캐시를 사용해야하는 상황에 대해 사진으로 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-17-38-19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;웹 브라우저가 star.jpg라는 이미지를 서버에 요청하면 서버는 star.jpg를 클라이언트에 전송할 것이다. 여기서 HTTP 헤더는 0.1MB, star.jpg는 1.0MB라고 가정해보자. 서버는 웹브라우저에게 총 1.1MB의 데이터를 전송하였고, 클라이언트는 성공적으로 웹페이지에 star.jpg를 출력했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-17-39-21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;클라이언트가 웹페이지를 탐색하다가 다시 star.jpg를 요청해야하는 상황이 되었다. 서버는 HTTP 요청 메시지를 읽고 다시 클라이언트에게 star.jpg파일을 전송한다. 1.1MB의 데이터가 다시 전송된다.&lt;/p&gt;

&lt;p&gt;뭔가 비효율적이다. 클라이언트에서 한번 받았던 데이터를 서버에서 매 번 전송을 해야하는 것은 자원낭비이다. 클라이언트 측에서 서버로부터 받은 데이터를 가지고 있으면서 서버에서 해당 데이터가 변경되지 않았으면 클라이언트가 가지고 있던 데이터를 다시 재활용하게 만드는 것이 캐시이다.&lt;/p&gt;

&lt;p&gt;캐시가 없다면 데이터가 변경되지 않아도 계속 네트워크를 통해서 데이터를 다운로드 받아야한다. 인터넷 네트워크 자원은 매우 느리고 비싸기 대문에 브라우저 로딩속도가 느려질 뿐 더러 사용자의 경험도 나빠진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-17-41-35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번엔 캐시를 사용할 때 클라이언트가 star.jpg를 서버에 요청하는 상황이다. 서버는 클라이언트에 star.jpg를 넘겨준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-17-42-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;클라이언트는 서버로부터 받은 star.jpg를 브라우저 캐시에 저장한다. 서버에서 정한 캐시 유효시간 데이터를 읽은 다음 그 시간동안 유효한 캐시데이터를 저장소에 저장한다.&lt;/p&gt;

&lt;p&gt;이후 브라우저는 star.jpg가 필요한 페이지에서 데이터를 확인하고 싶을 때 캐시 저장소에 있는 star.jpg를 불러와서 페이지에 출력하여 볼 수 있게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;캐시의-특징&quot;&gt;캐시의 특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;캐시 덕분에 캐시 가능 시간동안 네트워크를 사용하지 않아도 된다.&lt;/li&gt;
  &lt;li&gt;비싼 네트워크 사용량을 줄일 수 있다.&lt;/li&gt;
  &lt;li&gt;브라우저 로딩 속도가 매우 빨라진다.&lt;/li&gt;
  &lt;li&gt;결과적으로 빠른 사용자 경험을 가질 수 있게 해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그렇다면 캐시의 유효시간이 지났을 경우에는 어떻게 처리될까? 캐시 유효시간이 초과하면 서버를 통해 데이터를 다시 조회하고 캐시를 갱신한다. 이 때 다시 네트워크 다운로드가 발생하게 된다.&lt;/p&gt;

&lt;p&gt;사실 캐시 유효시간이 초과해서 클라이언트가 서버에 다시 해당 데이터를 요청하면 2가지 상황이 일어난다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;서버에서 기존 데이터를 변경했을 경우 : 서버에서 해당 데이터를 변경했을 경우 클라이언트는 서버 측에서 데이터를 다시 전달받아야한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버에서 기존 데이터를 변경하지 않았을 경우 : 캐시가 만료되었지만 서버에서 해당 데이터를 변경하지 않았을 경우에는 저장했던 캐시데이터를 다시 사용해도 상관이 없다.
단, 클라이언트의 데이터와 서버의 데이터가 같다는 사실을 확인할 수 있는 방법이 필요하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2번의 경우에는 &lt;strong&gt;검증 헤더&lt;/strong&gt;를 사용하여 클라이언트의 데이터가 서버의 데이터와 일치하는지 여부를 확인이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;검증-헤더&quot;&gt;검증 헤더&lt;/h2&gt;

&lt;p&gt;검증헤더를 사용했을 경우 클라이언트의 캐시데이터가 어떻게 처리되는지를 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-17-48-43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 클라이언트가 star.jpg를 서버에 요청한다. 서버는 star.jpg를 클라이언트에 전달하면서 star.jpg의 &lt;strong&gt;최종수정일을 클라이언트에 보낸다.&lt;/strong&gt; 클라이언트는 받은 데이터를 브라우저 캐시저장소에 저장한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-17-49-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;클라이언트의 캐시데이터 시간이 만료되어 서버에 다시 star.jpg를 요청한다. 요청할 때 HTTP 헤더에 if-modified-since를 보낸다. 클라이언트가 가지고 있는 star.jpg의 최종수정일이 서버의 최종수정일과 다른지를 확인하는 것이다.&lt;/p&gt;

&lt;p&gt;최종 수정일이 다르지 않다는 것을 확인한 서버는 HTTP헤더에 304 Not Modified라는 상태코드를 넣어서 보내게 된다. 수정되지 않았으므로 캐시데이터를 그대로 사용하라는 의미가 된다 &lt;strong&gt;이 때, 이미지는 보내지 않고 HTTP 헤더만 보내게 되므로 데이터 용량은 0.1MB가 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;클라이언트는 서버의 응답을 받고 캐시데이터를 갱신하여 캐시저장소에서 불러온 이미지를 다시 사용하여 홈페이지를 랜더링하게 된다.&lt;/p&gt;

&lt;p&gt;정리를 하자면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;캐시 유효 시간이 초과해도, 서버의 데이터가 갱신되지 않으면&lt;/li&gt;
  &lt;li&gt;304 Not Modified + 헤더 메타정보만 응답데이터에 보낸다.&lt;/li&gt;
  &lt;li&gt;클라이언트는 서버가 보낸 응답 헤더 정보로 캐시의 메타정보를 갱신한다.&lt;/li&gt;
  &lt;li&gt;클라이언트는 캐시에 저장되어있는 데이터를 재활용한다.&lt;/li&gt;
  &lt;li&gt;결과적으로 네트워크 다운로드가 발생하지만 용량이 적은 헤더 정보만 다운로드 한다.&lt;/li&gt;
  &lt;li&gt;실용적인 해결책이라 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;검증-헤더와-조건부-요청&quot;&gt;검증 헤더와 조건부 요청&lt;/h2&gt;

&lt;h3 id=&quot;검증-헤더-1&quot;&gt;검증 헤더&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;검증 헤더는 캐시 데이터외 서버 데이터가 같은지 검증하는 데이터이다.&lt;/li&gt;
  &lt;li&gt;Last-Modified, ETag가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;조건부-요청-헤더&quot;&gt;조건부 요청 헤더&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;검증 헤더로 조건에 따른 분기&lt;/li&gt;
  &lt;li&gt;If-Modified-Since: Last-Modified를 사용한다.&lt;/li&gt;
  &lt;li&gt;If-None-Match: ETag를 사용한다.&lt;/li&gt;
  &lt;li&gt;조건이 만족하게되면 200 OK로 응답한다.&lt;/li&gt;
  &lt;li&gt;조건이 만족하지 않으면 304 Not Modified로 응답한다. (실패했다는 것이 아니라 데이터가 수정된 것이 없으니 그대로 사용하라는 뜻이다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ETag가 존재하는 이유에 주목해야한다. 위에서 캐시데이터의 최종 수정일을 비교하여 변경된 사항이 없으면 캐시데이터를 그대로 사용하였다. 먼저 Last-Modified, If-Modified-Since의 단점에 대해서 알아보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1초 미만(0.x초) 단위로 캐시 조정이 불가능하다.&lt;/li&gt;
  &lt;li&gt;날짜 기반의 로직을 사용한다.&lt;/li&gt;
  &lt;li&gt;데이터를 수정해서 날짜가 다르지만, 같은 데이터를 수정해서 데이터 결과가 똑같은 경우
    &lt;ul&gt;
      &lt;li&gt;스페이스나 주석처럼 크게 영향이 없는 변경에서 캐시를 유지하고 싶은 경우, 이미 데이터가 약간이라도 변경되어 최종수정일이 갱신되어서 다시 데이터를 받아야한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 단점을 개선하기 위해서 ETag를 사용한다. ETag는 Entity Tag의 줄임말로, 캐시용 데이터에 임의의 고유한 버전 이름을 달아둔 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ETag: “v1.0”, ETag: “a2jiodwjekjl3”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;데이터가 변경되면 ETag의 이름을 바꾸어서 변경한다(Hash를 다시 생성하는 것이다.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ETag: “aaaaa” -&amp;gt; ETag: “bbbbb”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;캐시데이터를 갱신할 때는 단순하게 ETag만 비교하여 같으면 유지하고, 다르면 다시 받도록 처리한다. 아래 사진은 ETag로 캐시데이터를 갱신하는 것을 그림으로 표현한 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-21-39-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-21-39-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;etag-정리&quot;&gt;ETag 정리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;단순히 ETag만 서버에 보내서 같으면 유지하고, 다르면 다시 받는다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;캐시 제어 로직을 서버에서 완전히 관리하게 된다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;클라이언트는 단순히 이 값을 서버에 제공한다(클라이언트는 캐시 매커니즘을 모른다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;캐시-제어-헤더&quot;&gt;캐시 제어 헤더&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Cache-Control: 캐시를 제어
    &lt;ul&gt;
      &lt;li&gt;Cache-Control: max-age
        &lt;ul&gt;
          &lt;li&gt;캐시의 유효시간, &lt;strong&gt;초 단위&lt;/strong&gt; 기준이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Cache-Control: no-cache
        &lt;ul&gt;
          &lt;li&gt;데이터는 캐시해도 되지만, 항상 원(origin) 서버에 검증하고 사용하도록 설정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Cache-Control: no-store
        &lt;ul&gt;
          &lt;li&gt;데이터에 민감한 정보가 있어서 캐시로 저장하면 안되는 데이터(메모리에서 사용 후 최대한 빨리 삭제한다.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pragma : 케시를 제어(Cache-Control 하위호환)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Cache-Control과 역할은 같다. 주로 HTTP 1.0에 호환하기 위해서 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Expires : 캐시 만료일을 지정(Cache-Control: max-age 하위호환)
    &lt;ul&gt;
      &lt;li&gt;캐시 만료일을 정확한 &lt;strong&gt;날짜로 지정&lt;/strong&gt;한다.&lt;/li&gt;
      &lt;li&gt;HTTP 1.0부터 사용할 수 있다.&lt;/li&gt;
      &lt;li&gt;지금은 더 유연하게 적용이 가능한 Cache-Control: max-age를 권장한다.&lt;/li&gt;
      &lt;li&gt;Cache-Control: max-age와 함께 사용 시 Expires는 무시된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;검증-헤더와-조건부-요청-헤더&quot;&gt;검증 헤더와 조건부 요청 헤더&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;검증 헤더(Validator)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;ETag: “v1.0”, ETag: “asid93jkrh2l”&lt;/li&gt;
      &lt;li&gt;Last-Modified: Thu, 04 Jun 2020 07:19:24 GMT&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조건부 요청 헤더&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;If-Match, If-None-Match: ETag 값 사용&lt;/li&gt;
      &lt;li&gt;If-Modified-Since, If-Unmodified-Since: Last-Modified값 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;프록시-캐시&quot;&gt;프록시 캐시&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-21-54-35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;클라이언트가 미국에 있는 원 서버에 접근하기 까지 0.5초의 시간이 걸린다. 0.5초는 짧은 시간이지만 웹페이지를 이동할 때마다 0.5초를 기다리는 것은 사용자입장에서 좋은 경험이 아니다.&lt;/p&gt;

&lt;p&gt;따라서 프록시 캐시 서버를 만들어서 미국에서 먼 사용자들이 프록시 캐시서버를 사용하여 웹페이지와 통신할 수 있도록 설계하면 이를 개선시킬 수 있다. CDN같은 서비스가 이에 해당한다.&lt;/p&gt;

&lt;p&gt;유튜브를 예로 들자면, 영상을 맨 처음 보는 유저는 캐시를 다운로드받아야해서 로딩 속도가 느려진다. 하지만 다른사람들은 처음 본 유저 덕분에 캐시가 다운로드되어 영상을 빠른속도로 볼 수 있게 된다.&lt;/p&gt;

&lt;p&gt;중간에서 공용으로 사용하는 프록시 캐시서버를 public 캐시라 하고, 웹 브라우저에서 사용하는 캐시를 private 캐시라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cache-control-캐시-지시어기타&quot;&gt;Cache-Control: 캐시 지시어(기타)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cache-Control: public - 응답이 public 캐시에 저장되어도 된다는 뜻이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cache-Control: private - 응답이 해당 사용자만을 위한 것이다. private 캐시에 저장되어야한다.(기본값)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;캐시-무효화&quot;&gt;캐시 무효화&lt;/h2&gt;

&lt;h3 id=&quot;cache-control-확실한-캐시-무효화-응답&quot;&gt;Cache-Control: 확실한 캐시 무효화 응답&lt;/h3&gt;

&lt;p&gt;캐시가 되어선 안되는 데이터는 캐시가 되지 않도록 설정해주어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cache-Control: no-cache, no-store, must-revalidate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-21-58-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;no-cache: 데이터는 캐시해도 되지만, 항상 원 서버에 검증하고 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;no-cache를 한다고 가정해보자, 원 서버에 검증하고 사용해야되므로, 프록시서버에서 no-cache를 확인하면 원서버로 캐시데이터를 보낸다.&lt;/p&gt;

&lt;p&gt;하지만 원서버가 순간적으로 접속이 끊겨서 원서버에서 검증을 실패했다고 가정해보자, 이럴 경우 &lt;strong&gt;프록시 서버에서는 이전 데이터를 클라이언트 측으로 보낸다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;에를들어 통장 잔고나 민감한 개인정보의 경우는 이전 데이터를 클라이언트로 보내서는 안된다. 자칫 사용자에게 정보에 대한 혼동을 줄 수 있게된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-22-00-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;must-revalidate: 캐시 만료 후 최초 조회 시 원 서버에 검증을 해야한다.
원 서버에 접근 실패 시 반드시 오류가 발생해야한다. - 504(Gateway Timeout)
must-revalidate는 캐시 유효시간이라면 캐시를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;must-revalidate는 캐시 만료 후 최초 조회 시 원 서버에 검증해야하는 것은 no-cache와 같은 공통점을 가진다. 하지만 원 서버에 접근 실패 시 반드시 오류가 발생해야하는 조건을 가지고 있다. 따라서 반드시 원 서버에서 검증 후에 데이터를 사용해야할 경우 must-revalidate를 넣어주어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;no-store: 데이터에 민감한 정보가 있으므로 저장하면 안된다(메모리에서 사용 후 최대한 빨리 삭제)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pragma: no-cache&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;HTTP 1.0 하위호환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 02 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//http_basic_8</link>
        <guid isPermaLink="true">https://achasan.github.io//http_basic_8</guid>
        
        <category>SpringBoot</category>
        
        
      </item>
    
      <item>
        <title>HTTP 기본 지식 : 쿠키(Cookie)</title>
        <description>&lt;h1 id=&quot;http-웹-기본-지식-7&quot;&gt;HTTP 웹 기본 지식 7&lt;/h1&gt;

&lt;h2 id=&quot;쿠키&quot;&gt;쿠키&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Set-Cookie: 서버에서 클라이언트로 쿠키를 전달한다.(응답)&lt;/li&gt;
  &lt;li&gt;Cookie: 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP 요청 시 서버로 전달한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;쿠키는 어떤 상황에서 사용되는지 아래 사진을 보고 확인해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-17-15-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음은 쿠키를 사용하지 않았을 때의 상황이다. POST 방식으로 /login URI에 user를 홍길동으로 하는 요청을 클라이언트에서 보냈을 때, 서버에서는 홍길동님이 로그인했다는 OK 응답메시지를 보내게 된다. “안녕하세요. 손님”이라는 문자를 출력한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-17-16-42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그인이 된 것을 확인하고 /welcome 페이지로 이동했으나, 서버에서는 “안녕하세요, 손님”으로 메시지가 바꿔진 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;이유는 HTTP의 Stateless때문이다. 무상태 프로토콜이기 때문에 서버와 클라이언트가 요청을 주고받으면 연결이 끊어지게 되므로, 클라이언트가 서버에 욫어을 하면 서버는 이전 요청을 기억하지 못하게 되는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-17-19-49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해 클라이언트에서 GET을 통해 쿼리파라미터에 user=홍길동이라는 데이터를 넘겨서 “안녕하세요, 홍길동님”을 출력시키려고 한다. 과연 이것이 올바른 해결책이라고 할 수 있을까?&lt;/p&gt;

&lt;p&gt;이런 문제를 해결하기 위해서 쿠키라는 개념이 등장하였다. 이제 쿠키를 사용하여 로그인처리를 어떻게 하는지 사진으로 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-17-20-51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;클라이언트가 POST 방식으로 user=홍길동 이라는 메시지를 서버에 전송하면 서버는 Set-Cookie: user=홍길동 을 통해 쿠키를 클라이언트에 전송하는 것을 볼 수 있다. 클라이언트는 받은 쿠키를 쿠키 저장소에 저장하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-17-22-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다른 URI로 이동할 때 클라이언트는 서버에 쿠키를 전송한다. 쿠키를 받은 서버는 쿠키 데이터정보를 읽고, 비즈니스 로직을 처리하면서 홍길동이 로그인 되었다는 메시지를 출력하게된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;쿠키-1&quot;&gt;쿠키&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;set-cookie: sessionId=abcde1234; expires=Sat, 26-Dec-2020 00:00:00 GMT; path=/; domain=.google.com; Secure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;쿠키의 사용처&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;사용자 로그인 세션 관리&lt;/li&gt;
      &lt;li&gt;광고 정보 트래킹(선호하는 광고가 어떤건지 체크)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;쿠키 정보는 항상 서버에 전송되는 것이 특징이다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;네트워크 트래픽을 추가적으로 유발한다.&lt;/li&gt;
      &lt;li&gt;따라서 최소한의 정보만 사용해야한다(세션 ID, 인증토큰 등)&lt;/li&gt;
      &lt;li&gt;서버에 전송하지않고 웹 브라우저 내부에 데이터를 저장하고 싶으면 웹 스토리지를 참고하는 것이 좋다(localStorage, sessionStorage)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;보안에 민감한 데이터는 저장해선 안된다(주민번호, 신용카드 등)&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;쿠키---생명주기&quot;&gt;쿠키 - 생명주기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Set-Cookie: &lt;strong&gt;expires&lt;/strong&gt;=Sat, 26-Dec-2020 04:39:21 GMT&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;만료일이 되면 쿠키가 삭제된다. (날짜를 기준으로 생명주기 설정)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set-Cookie: &lt;strong&gt;max-age&lt;/strong&gt;=3600 (3600초)&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;0이나 음수를 지정하면 쿠키가 삭제된다. (시간을 기준으로 생명주기 설정)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;쿠키의 생명주기 종류는 2 가지가 있다. 세션쿠키는 만료 날짜를 생략하면 브라우저 종료 시 까지만 유지되는 쿠키이고, 영속 쿠키는 만료 날짜를 입력하면 해당 날짜까지 유지되는 생명주기이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;쿠키---도메인&quot;&gt;쿠키 - 도메인&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;domain=example.org&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;도메인을 명시하면 명시한 문서를 기준으로 도메인과 서브도메인을 포함하여 쿠키가 사용될 수 있다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;위의 예시를 기준으로 보면 example.org는 물론 dev.example.org도 쿠키 접근이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;도메인을 생략하면 현재 문서 기준 도메인만 적용된다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;example.org에서 쿠키를 생성하고 domain 지정을 생략할 경우에는 example.org에서만 쿠키 접근이 가능하다. dev.example.org에서는 불가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;쿠키---경로&quot;&gt;쿠키 - 경로&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;path=/home&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이 &lt;strong&gt;경로를 포함한 하위 경로 페이지만&lt;/strong&gt; 쿠키에 접근이 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일반적으로 path=/ 루트로 지정한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;쿠키---보안&quot;&gt;쿠키 - 보안&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Secure : 쿠키는 http, https 구분하지 않고 전송하는데 Secure를 적용하면 https인 경우에만 전송한다.&lt;/li&gt;
  &lt;li&gt;HttpOnly : XSS 공격을 방지하기위해서 사용, JS에서 접근이 불가하다. HTTP 전송에만 사용된다.&lt;/li&gt;
  &lt;li&gt;SameSite : XSRF공격을 방지하고 요청 도메인과 쿠키에 설정된 도메인이 같은 경우만 쿠키를 전송한다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 02 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//http_basic_7</link>
        <guid isPermaLink="true">https://achasan.github.io//http_basic_7</guid>
        
        <category>SpringBoot</category>
        
        
      </item>
    
      <item>
        <title>HTTP 헤더 살펴보기(협상, 우선순위)</title>
        <description>&lt;h1 id=&quot;http-웹-기본-지식-6&quot;&gt;HTTP 웹 기본 지식 6&lt;/h1&gt;

&lt;h2 id=&quot;http-헤더-자세히&quot;&gt;HTTP 헤더 자세히&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-12-45-06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTTP 헤더는 HTTP 전송에 필요한 모든 부가정보들을 담은 구역이라고 말했었다. HTTP 헤더의 자세한 구조를 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-12-46-49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;헤더의-분류rfc2616-기준&quot;&gt;헤더의 분류(RFC2616 기준)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;General 헤더 : 메시지 전체에 적용되는 정보를 말한다. (Connection: close)&lt;/li&gt;
  &lt;li&gt;Request 헤더 : 요청 클라이언트의 정보를 말한다.(User-Agent: Mozilla/5.0 ..)&lt;/li&gt;
  &lt;li&gt;Response 헤더 : 응답 정보를 말한다. (Server: Apache)&lt;/li&gt;
  &lt;li&gt;Entity 헤더 : 엔티티 바디의 정보를 말한다. (Content-Type: text/html; charset=UTF-8, Content-Length: 3423)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-12-49-30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메시지 본문(Message Body)는 엔티티 본문(entity body)을 전달하는데 사용한다.&lt;/li&gt;
  &lt;li&gt;엔티티 본문은 요청이나 응답에서 전달할 실제 데이터가 담겨있다.&lt;/li&gt;
  &lt;li&gt;엔티티 헤더는 엔티티 본문의 데이터를 해석할 수 있는 정보를 제공한다.
    &lt;ul&gt;
      &lt;li&gt;데이터 유형(html, json), 데이터 길이, 압축정보 등등을 제공한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메시지 본문이 엔티티 본문을 포함한다고 보면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;원래는 이렇게 정의가 되어 있엇으나, &lt;strong&gt;2014년에 RFC7230~7235 개정판이 등장&lt;/strong&gt;하게 된다. 변경사항은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;엔티티(Entity)를 표현(Representation)으로 바꿈&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;여기서 Representation = Representation Metadata + Representation Data 를 말한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-12-54-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메시지 본문(message body)을 통해 표현 데이터를 전달하게된다.&lt;/li&gt;
  &lt;li&gt;여기서 메시지 본문을 페이로드(payload)라고 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;표현은 요청이나 응답에서 전달할 실제 데이터&lt;/strong&gt;를 말한다.&lt;/li&gt;
  &lt;li&gt;또한 &lt;strong&gt;표현헤더는 표현 데이터를 해석할 수 있는 정보를 제공&lt;/strong&gt;한다.
    &lt;ul&gt;
      &lt;li&gt;데이터 유형(html, json), 데이터의 길이, 압축정보 등등을 제공한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;표현&quot;&gt;표현&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Type: 표현 데이터의 형식
    &lt;ul&gt;
      &lt;li&gt;미디어 타입이나 문자 인코딩을 설명한다.&lt;/li&gt;
      &lt;li&gt;예) “text/html; charset=UTF-8”, “application/json”, “/assets/images/HTTP_images/png”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Content-Encoding: 표현 데이터의 압축 방식
    &lt;ul&gt;
      &lt;li&gt;표현한 데이터를 압축하기위해 사용한다.&lt;/li&gt;
      &lt;li&gt;데이터를 전달하는 곳에서 압축 후에 인코딩 헤더를 추가&lt;/li&gt;
      &lt;li&gt;데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축을 해제한다.&lt;/li&gt;
      &lt;li&gt;예) Content-Encoding: gzip&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Content-Language: 표현 데이터의 자연언어
    &lt;ul&gt;
      &lt;li&gt;표현 데이터의 자연 연어를 표현한다. (ko, en, en-US)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Content-Length: 표현 데이터의 길이. 바이트 단위이다.
    &lt;ul&gt;
      &lt;li&gt;Transfer-Encoding(전송코딩)을 사용하면 Content-Length를 사용해서는 안된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그렇다면 엔티티에서 표현으로 말고 단어를 바꾼 이유는 무엇일까? 표현이라는 단어를 사용하게 된 이유는 HTTP헤더에서 어떤 Content type으로 요청/응답을 하느냐에 따라 HTML로 표현될 지, JSON으로 표현될 지, image로 표현될 지가 달라지기 때문에 표현이라는 단어를 사용하게 된 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;협상컨텐츠-네고시에이션&quot;&gt;협상(컨텐츠 네고시에이션)&lt;/h2&gt;

&lt;p&gt;협상은 클라이언트가 선호하는 표현을 요청하는 것이다. 핵심적으로 사용되는 4가지가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Accept: 클라이언트가 선호하는 미디어 타입 전달&lt;/li&gt;
  &lt;li&gt;Accept-Charset: 클라이언트가 선호하는 문자 인코딩&lt;/li&gt;
  &lt;li&gt;Accept-Encoding: 클라이언트가 선호하는 압축 인코딩&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Accept-Language: 클라이언트가 선호하는 자연 언어&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;협상 헤더는 &lt;strong&gt;요청 시에만 사용&lt;/strong&gt;한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그렇다면 클라이언트가 선호하는 표현은 무엇이고, 협상이라는 것은 어디에 쓰이는 지 알아보자. 다음은 Accept-Language를 예로 들어 설명한 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-14-02-49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;상황은 이렇다. 한국어 브라우저를 사용하는 클라이언트가 있고, 영어(기본)와 한국어를 지원하는 서버가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트가 GET방식으로 /event URI가 있는 페이지를 요청한다.&lt;/li&gt;
  &lt;li&gt;서버는 클라이언트의 요청을 받는다. 클라이언트 측에서 따로 이야기한게 없었으므로 기본언어인 영어로 메시지 바디를 전송한다.&lt;/li&gt;
  &lt;li&gt;클라이언트는 한국어 브라우저를 사용하지만 영어로 작성된 페이지를 보게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클라이언트는 한국어를 사용하기 때문에 한국어로 되어있는 페이지를 보길 원한다. 하지만 한국어로 페이지를 달라는 표현이 없었기 때문에 서버에서는 기본언어로 설정되있는 영어로 페이지를 보여주게 된다. 한국어를 원하는 클라이언트는 이제 다음과 같이 요청을 보낸다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-14-09-21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Accept-Language: ko 라는 HTTP 헤더 정보를 넣어서 요청을 보냈다. 서버는 이를 읽으면 클라이언트 측에서 한국어를 사용한다는 것을 인지하고 한국어로 되어있는 HTML 페이지로 응답하게된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-14-10-58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;한 가지 더 생각해보자, 만약 서버에서 한국어를 지원하지 않고, 독일어(기본), 영어만 지원한다면 어떻게 될까? 기본언어가 독일어로 되어있지만 한국인은 그래도 영어로 홈페이지를 보는 것이 차라리 나을 것이다. 하지만 Accept-Language를 ko로 보내면 서버에서는 지원하는 언어가 없기 때문에 기본언어인 독일어를 보여주게 된다. 이럴 땐 어떻게 해야될까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;협상과-우선순위&quot;&gt;협상과 우선순위&lt;/h2&gt;

&lt;h3 id=&quot;quality-valuesq&quot;&gt;Quality Values(q)&lt;/h3&gt;

&lt;p&gt;Quality Values는 여러 옵션들 중에 우선순위를 정하는 값이라고 보면 된다. Quality Values의 범위는 0~1이고, 클수록 높은 우선순위를 갖는다. 만약 생략하면 자동으로 1로 할당되어진다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우선순위는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ko-KR;q=1 (q 생략됨)&lt;/li&gt;
  &lt;li&gt;ko;q=0.9&lt;/li&gt;
  &lt;li&gt;en-US;q=0.8&lt;/li&gt;
  &lt;li&gt;en;q=0.7&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-14-14-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선순위를 이용해서 이제 위의 예시로 돌아가보자, 독일어보다는 영어가 나은 한국인 입장에서, Accept-Language에 우선순위를 정하면 서버에서는 독일어보다 영어를 선호하니 영어로 홈페이지를 불러오게 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;협상과-우선순위2&quot;&gt;협상과 우선순위2&lt;/h3&gt;

&lt;p&gt;위 처럼 Quality Values의 값을 할당하여 우선순위를 정할 수도 있다. 아니면 구체적인 명시를 통해서도 자동으로 우선순위가 정해지는 경우도 있다. 예시를 보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Accept: text/*, text/plain, text/plain;format=flowed, */*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;text/plain;format=flowed&lt;/li&gt;
  &lt;li&gt;text/plain&lt;/li&gt;
  &lt;li&gt;text/*&lt;/li&gt;
  &lt;li&gt;*/*&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;우선순위는 구체적으로 쓴 순서대로이다. 1번부터4번 까지 봤을 때, 1번으로 갈 수록 보다 구체적으로 명시된 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;전송-방식&quot;&gt;전송 방식&lt;/h2&gt;

&lt;p&gt;전송 방식은 크게 네 가지가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;단순 전송: 말 그대로 따로 처리 과정을 거치지 않고 그대로 응답을 보낸다. 기본적으로 Content-Length를 포함하여 보낸다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;압축 전송: [Content-Encoding: gzip]과 같은 형태로 인코딩 압축하여 응답을 보내는 방식, 클라이언트에서 응답을 받으면 압축을 해제한 다음 데이터를 읽게 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;분할 전송: 데이터를 덩어리(chunked)로 나누어서 보내는 것을 말한다. Transfer-Encoding: chunked를 HTTP 헤더에 적어서 보낸다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;범위 전송: 클라이언트가 데이터를 받아가 중간에 끊겼을 때, 데이터를 다시 처음부터 끝까지 받는 것은 비효율적이므로 못받은 부분만 범위를 입력하여 요청을 보내면 서버가 범위만큼만 응답하여 데이터를 보내는 방식. Range: bytes=1001-2000과 같은 형식으로 보낸다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;일반-정보&quot;&gt;일반 정보&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;From: 유저 에이전트의 이메일 정보&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;일반적으로 잘 사용되지 않는다.&lt;/li&gt;
      &lt;li&gt;검색 엔진같은 곳에서 주로 사용한다.&lt;/li&gt;
      &lt;li&gt;요청에서 사용된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Referer: 이전 웹 페이지 주소&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;현재 요청된 페이지의 이전 웹 페이지 주소를 말한다.&lt;/li&gt;
      &lt;li&gt;A &amp;gt; B로 이동하는 경우 B를 요청할 때 Referer: A를 포함해서 요청한다.&lt;/li&gt;
      &lt;li&gt;요청에서 사용한다.&lt;/li&gt;
      &lt;li&gt;Referer같은 경우에는 포털사이트를 들어가서 f12를 누르고 Network에서 HTTP 메시지를 보면 바로 확인이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;User-Agent: 유저 에이전트 애플리케이션 정보&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/
537.36 (KHTML, like Gecko) Chrome/86.0.4240.183 Safari/537.36&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;클라이언트의 애플리케이션 정보(웹 브라우저 정보 등등)&lt;/li&gt;
      &lt;li&gt;통계 정보&lt;/li&gt;
      &lt;li&gt;어떤 종류의 브라우저에서 장애가 발생하는지 파악이 가능하다.&lt;/li&gt;
      &lt;li&gt;요청에서 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Server: 요청을 처리하는 ORIGIN 서버의 소프트웨어 정보&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Server: Apache/2.2.22(Debian)
server: nginx&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;응답에서 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Date: 메시지가 발생한 날짜와 시간&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Date: Tue, 15 Nov 1994 08:12:31 GMT&lt;/li&gt;
      &lt;li&gt;응답에서 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특별한-정보&quot;&gt;특별한 정보&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-02-14-34-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Host: 요청한 호스트의 정보(도메인)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;요청에서 사용(필수값)&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;하나의 서버가 여러 도메인을 처리해야할 때 사용&lt;/li&gt;
      &lt;li&gt;하나의 IP주소에 여러 도메인이 적용되어 있을 때 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;호스트는 서버에서 가상 도메인을 활용하여 여러 개의 가상 호스트를 사용할 때, 어떤 호스트로 요청을 보내는 지를 서버가 구분할 때 필요하다. 요청에서의 필수값이므로 서버는 이 값을 보고 어떤 호스팅으로 보내야할 지를 판단하게된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Location: 페이지 리다이렉션
    &lt;ul&gt;
      &lt;li&gt;웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면 Location 위치로 자동이동하게 된다(리다이렉트) : 응답코드 3xx에서 설명한 바 있음&lt;/li&gt;
      &lt;li&gt;201 (Created) 상태코드의 경우 Location 값은 요청에 의해 생성된 리소스 URI이다.&lt;/li&gt;
      &lt;li&gt;3xx (Redirection): Location 값은 요청을 자동으로 리다이렉션하기 위한 대상 리소스를 가리킨다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Allow: 허용 가능한 HTTP 메서드
    &lt;ul&gt;
      &lt;li&gt;405 (Method Not Allowed)에서 응답에 포함해야한다.
        &lt;blockquote&gt;
          &lt;p&gt;Allow: GET, HEAD, PUT&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Retry-After: 유저 에이전트가 다음 요청을 하기까지 기다려야하는 시간&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;503(Service Unavailable) : 서비스가 언제까지 불능인지 알려줄 수 있다.&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;Retry-After: Fri, 31 Dec 1999 23:59:59 GMT (날짜 표기)&lt;/p&gt;
        &lt;/blockquote&gt;

        &lt;blockquote&gt;
          &lt;p&gt;Retry-After: 120 (초단위 표기)&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Authorization: 클라이언트 인증 정보를 서버에 전달하는 것&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Authorization: Basic xxxxxxxxxxx&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WWW-Authenticate: 리소스 접근 시 필요한 인증 방법을 정의함
    &lt;ul&gt;
      &lt;li&gt;401 Unauthorized 응답과 함께 사용한다.
        &lt;blockquote&gt;
          &lt;p&gt;WWW-Authenticate: Newauth realm=”apps”, type=1, title=”Login to &quot;apps&quot;”, Basic realm=”simple”&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 02 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//http_basic_6</link>
        <guid isPermaLink="true">https://achasan.github.io//http_basic_6</guid>
        
        <category>SpringBoot</category>
        
        
      </item>
    
      <item>
        <title>HTTP 상태코드, PRG(Post Redirect Get)</title>
        <description>&lt;h1 id=&quot;http-웹-기본-지식-5&quot;&gt;HTTP 웹 기본 지식 5&lt;/h1&gt;

&lt;h2 id=&quot;http-상태-코드&quot;&gt;HTTP 상태 코드&lt;/h2&gt;

&lt;p&gt;HTTP 상태코드는 클라이언트가 보낸 요청의 처리 상태를 응답해서 알려주는 기능을 말한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1xx (Informational): 요청이 수신되어 처리중&lt;/li&gt;
  &lt;li&gt;2xx (Successful): 요청 정상 처리&lt;/li&gt;
  &lt;li&gt;3xx (Redirection): 요청을 완료하려면 추가 행동이 필요&lt;/li&gt;
  &lt;li&gt;4xx (Client Error): 클라이언트 오류, 잘못된 문법등으로 서버가 요청을 수행할 수 없음&lt;/li&gt;
  &lt;li&gt;5xx (Server Error): 서버 오류, 서버가 정상 요청을 처리하지 못함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;만약 클라이언트가 인식할 수 없는 상태코드를 서버가 반환하더라도 클라이언트는 상위 상태코드로 해석하여 처리한다. 미래에 새로운 상태코드가 추가되더라도 클라이언트를 변경할 필요가 없어진다. 각 상태코드의 특징을 알아보자.&lt;/p&gt;

&lt;h3 id=&quot;1xx--거의-사용하지않으므로-생략&quot;&gt;1xx : 거의 사용하지않으므로 생략&lt;/h3&gt;

&lt;h2 id=&quot;2xx-successful&quot;&gt;2xx (Successful)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;200 OK : 서버가 클라이언트의 요청을 성공적으로 처리하면 200 상태코드를 전송한다. &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-22-19-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;201 Created : 클라이언트의 요청을 성공해서 새로운 리소스가 만들어 졌을 때 전송한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;202 Accepted : 요청이 접수되었으나 처리가 완료되지 않았을 경우&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;배치처리 같은 곳에서 사용한다.(요청 접수 후 1시간 뒤에 배치 프로세스가 처리)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;204 No Content : 서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없을 때&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;게시글 내용을 자동저장하는 경우에 포함 : 자동저장 버튼을 누르더라도 서버에서 따로 보낼 메시지는 없어도 되며, 같은 하면을 유지해야함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3xx-redirection&quot;&gt;3xx (Redirection)&lt;/h2&gt;

&lt;p&gt;3xx는 요청을 완료하기 위해 유저 에이전트의 추가 조치가 필요할 경우 사용한다. 그 전에 먼저 리다이렉트가 어떤 건지 알아보자. 먼저 리다이렉트가 무엇인지 그림으로 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-22-23-43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 /event URI을 요청&lt;/li&gt;
  &lt;li&gt;서버에서는 301 상태코드와 Location 헤더를 전송, Location에는 /new-event URI가 담겨있음.&lt;/li&gt;
  &lt;li&gt;클라이언트는 자동으로 /new-event URI로 요청하게됨&lt;/li&gt;
  &lt;li&gt;서버에서는 URI에 맞는 비즈니스 로직을 처리하고 200 상태코드 전송&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;만약 3xx 응답의 결과에 Location 헤더가 있으면 Location 위치로 자동이동하는데, 이를 리다이렉트라고 한다. 리다이렉트는 여러 종류가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;영구 리다이렉션 (301, 308)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;리소스의 URI가 영구적으로 이동하게됨&lt;/li&gt;
      &lt;li&gt;원래의 URL을 사용하지 않고, 검색엔진 등에서도 변경을 인지&lt;/li&gt;
      &lt;li&gt;301 : Moved Permanently
        &lt;ul&gt;
          &lt;li&gt;리다이렉트 시 &lt;strong&gt;요청 메서드가 GET으로 변하고&lt;/strong&gt;, 본문이 제거될 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-22-29-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;308 : Permanent Redirect
        &lt;ul&gt;
          &lt;li&gt;301과 기능은 같다. 리다이렉트시 &lt;strong&gt;요청 메서드와 본문을 유지&lt;/strong&gt;한다.(처음 POST를 보내면 리다이렉트도 POST방식을 유지한다.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일시적 리다이렉션(302, 307, 303)
    &lt;ul&gt;
      &lt;li&gt;리소스의 URI가 &lt;strong&gt;일시적으로 변경&lt;/strong&gt;된다.&lt;/li&gt;
      &lt;li&gt;검색엔진에서 URI를 변경하면 안된다.&lt;/li&gt;
      &lt;li&gt;302 Found
        &lt;ul&gt;
          &lt;li&gt;리다이렉트시 &lt;strong&gt;요청 메서드가 GET으로 변하고&lt;/strong&gt;, 본문이 제거될 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;307 Temporary Redirect
        &lt;ul&gt;
          &lt;li&gt;302와 기능은 같다, 리다이렉트시 &lt;strong&gt;요청 메서드와 본문을 유지&lt;/strong&gt;한다.(요청 메서드를 변경하면 안된다.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;303 See Other
        &lt;ul&gt;
          &lt;li&gt;302와 기능은 같다. 리다이렉트시 &lt;strong&gt;요청 메서드가 GET으로 변경&lt;/strong&gt;된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;prg-post-redirect-get&quot;&gt;PRG: Post Redirect Get&lt;/h3&gt;

&lt;p&gt;일시적인 리다이렉션의 예시를 알아보자. POST방식으로 주문 후에 웹 브라우저를 새로고침하면 어떻게 될까? 새로고침은 주문을 다시 요청하기 때문에 중복 주문이 되어 문제가 생길 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-22-33-59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;결과화면에서 새로고침을 하면 이전에 했던 요청을 다시하게되고, 서버는 DB에 해당 주문내역을 저장하게된다. 이럴 경우 중복 주문이 되어 클레임이 들어올 수 있고, 큰 문제가 될 수 있다. 이를 방지하기위해서 PRG를 사용한다. PRG를 사용하면 위의 중복주문을 방지할 수 있는데,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;POST로 주문 후 새로고침으로 인한 중복 주문을 방지&lt;/li&gt;
  &lt;li&gt;POST로 주문 후에 주문 결과 화면을 GET메서드로 리다이렉트&lt;/li&gt;
  &lt;li&gt;GET 메서드는 조회만 가능하도록 설계되므로 새로고침해도 결과화면이 조회만 된다.&lt;/li&gt;
  &lt;li&gt;중복 주문 대신 결과화면만 GET으로 다시 요청&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-22-36-06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PRG를 사용했을 경우의 과정이다. POST 방식이 GET 방식으로 변경되어 새로고침을 하더라도 주문 요청이 아닌 조회가 요청되어 응답으로 주문완료 데이터가 전송되는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;일시적인 리다이렉션은 302, 307, 303 세 가지가 있다. 어떤 것을 써야될까? 각 특징을 살펴보면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;302 Found -&amp;gt; GET으로 변할 수 있음&lt;/li&gt;
  &lt;li&gt;307 Temporary Redirect -&amp;gt; 메서드가 변하면 안됨&lt;/li&gt;
  &lt;li&gt;303 See Other -&amp;gt; 메서드가 GET으로 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;원래 302의 의도는 HTTP 메서드를 유지하는 것이었다. 하지만 명확하게 명시가 되어있지 않아 웹 브라우저에서는 대부분 GET 방식으로 바꿔서 사용을 했다. 이를 명확히 하기위해 나중에 307, 303이 등장하게 되었다.&lt;/p&gt;

&lt;p&gt;하지만 현실적으로 이미 많은 애플리케이션 라이브러리들이 302를 기본값으로 사용하기 때문에 GET으로 변해도 된다면 302를 사용해도 큰 문제는 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;기타-리다이렉션&quot;&gt;기타 리다이렉션&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;304 : Not Modified
    &lt;ul&gt;
      &lt;li&gt;캐시를 목적으로 사용하는 리다이렉션&lt;/li&gt;
      &lt;li&gt;클라이언트에게 리소스가 수정되지 않았음을 알려주는 상태코드이다. 이를 통해 클라이언트는 로컬 PC에서 저장된 캐시를 재사용할 수 있게 된다. (가지고 있는 캐시 데이터가 서버에서 수정되었는지, 만료되었는지를 확인하기위해 사용)&lt;/li&gt;
      &lt;li&gt;304 응답은 응답에 메시지 바디를 포함해서는 안된다.(로컬 캐시를 사용해야하기 때문)&lt;/li&gt;
      &lt;li&gt;조건부 GET, HEAD 요청시에 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4xx-클라이언트-오류&quot;&gt;4xx 클라이언트 오류&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트의 요청에 잘못된 문법 등으로 서버가 요청을 수행하지 못함&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;오류의 원인이 클라이언트에 있음&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;클라이언트가 이미 잘못된 요청, 데이터를 보내기 때문에 똑같은 재시도가 실패한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4xx-상태코드의-종류&quot;&gt;4xx 상태코드의 종류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;400 Bad Request : 클라이언트가 잘못된 요청을 해서 서버가 요청을 처리할 수 없다. 클라이언트는 요청 내용을 다시 검토하고 보내야한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;401 Unauthorized : 클라이언트가 해당 리소스에 대한 인증이 필요할 때
    &lt;ul&gt;
      &lt;li&gt;인증되지가 않았을 때 보내는 상태코드&lt;/li&gt;
      &lt;li&gt;응답에 WWW-Authenticate 헤더와 함께 인증방법을 설명한다.&lt;/li&gt;
      &lt;li&gt;참고 : 인증(Authentication) = 본인이 누구인지 확인(로그인), 인가(Authorization) = 권한부여(특정 리소스에 접근할 수 있는 권한, 인증이 있어야 인가가 있다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;403 Forbidden : 서버가 요청을 이해했지만 승인을 거부하는 경우
    &lt;ul&gt;
      &lt;li&gt;인증 자격 증명은 있지만 접근권한이 불충분한 경우에 보내는 상태코드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;404 Not Found : 요청 리소스를 찾을 수 없을 경우.
    &lt;ul&gt;
      &lt;li&gt;말 그대로 리소스가 서버에 없다. 또는 클라이언트가 권한이 부족한 리소스에 접근할 때 해당 리소스를 숨기고 싶을 때 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5xx-서버-오류&quot;&gt;5xx 서버 오류&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;서버 문제로 오류가 발생&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;서버에 문제가 있기 때문에 재시도하면 성공할 수도 있음&lt;/strong&gt;(복구가 됐을 때 등)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5xx-상태코드의-종류&quot;&gt;5xx 상태코드의 종류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;500 Internal Server Error : 서버 문제로 오류가 발생하는 경우, 애매하면 500 오류가 발생하게끔 한다.&lt;/li&gt;
  &lt;li&gt;503 Service Unavailable : 서비스 이용 불가.
    &lt;ul&gt;
      &lt;li&gt;서버가 일시적인 과부하, 예정된 작업으로 잠시 요청을 처리할 수 있음&lt;/li&gt;
      &lt;li&gt;Retry-After 헤더 필드로 얼마 두에 복구되는지 보낼 수도 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한 가지 알아야 할 점이라면 웬만해서는 서버 쪽 오류를 내지 않는 것이 좋다. 예를 들면 고객의 잔고가 부족할 때 서버 측 오류로 내면 안되고 클라이언트 오류로 내야한다. 고객의 잔고가 부족한 것이 서버에 문제가 있어서는 아니다.&lt;/p&gt;

&lt;p&gt;20살 이상만 주문을 해야하는데 18살이 주문을 했을 때도 서버 측 오류로 내면 안되고 클라이언트 오류로 내야한다.&lt;/p&gt;

&lt;p&gt;비즈니스 로직에 문제가 생겼을 때, DB서버에 문제가 생겼을 때 500 에러를 내야하지 &lt;strong&gt;예외케이스가 나왔다고 해서 서버 측 오류가 났다고 상태코드를 보내서는 안된다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//http_basic_5</link>
        <guid isPermaLink="true">https://achasan.github.io//http_basic_5</guid>
        
        <category>SpringBoot</category>
        
        
      </item>
    
      <item>
        <title>HTTP API 설계방법(REST API)</title>
        <description>&lt;h1 id=&quot;http-웹-기본-지식-4&quot;&gt;HTTP 웹 기본 지식 4&lt;/h1&gt;

&lt;h2 id=&quot;http-api-설계&quot;&gt;HTTP API 설계&lt;/h2&gt;

&lt;p&gt;HTTP API를 설계한다고 가정해보자, 회원목록 조회, 회원 조회, 회원 등록, 회원 수정, 회원 삭제를 구현한다고 했을 때,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;회원 목록 조회 /read-member-list&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회원 조회 /read-member-by-id&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회원 등록 /create-member&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회원 수정 /update-member&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회원 삭제 /delete-member&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 URI를 좋은 설계라고 말할 수 있을 까? HTTP API 설계 시 가장 중요한 점은 리소스를 식별할 수 있어야 한다는 점이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;회원을 등록하고 수정하고 조회하는 것이 리소스가 아니다. 회원이라는 개념 자체가 리소스이다. 주어에 포커스를 두어야 한다. 회원이라는 리소스만 식별하여 회원 리소스를 URI에 매핑하는 것이 올바른 HTTP API의 설계이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;URI는 리소스만 식별하도록 하게한다. 리소스와 해당 리소스를 대상으로하는 행위를 분리해야한다. 주어와 동사를 분리해서 설계해야한다는 것이다.&lt;/p&gt;

&lt;p&gt;그렇다면 이제 정리해보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리소스 : 회원&lt;/li&gt;
  &lt;li&gt;행위 : 조회, 등록, 삭제 변경(동사)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;리소스는 명사, 행위는 동사가 된다. 그렇다면 이제 배운 내용을 바탕으로 URI 설계를 다시해보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;회원 목록 조회 /members&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회원 조회 /members/{id}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회원 등록 /members/{id}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회원 수정 /members/{id}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회원 삭제 /members/{id}&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(계층 구조 상 상위를 컬렉션으로 보고 복수단어 사용을 권장한다.)&lt;/p&gt;

&lt;p&gt;일단 배운내용대로 리소스(회원)를 중심으로 URI를 설계하였다. 그렇다면 조회, 등록, 수정, 삭제를 어떤 방법으로 구분할 지가 궁금해질 것이다. &lt;strong&gt;HTTP 메서드&lt;/strong&gt;를 통해 이를 구분하는 것이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http-메서드의-종류&quot;&gt;HTTP 메서드의 종류&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;GET : 리소스 조회&lt;/li&gt;
  &lt;li&gt;POST : 요청 데이터를 처리, 주로 등록에 사용&lt;/li&gt;
  &lt;li&gt;PUT : 리소스를 대체한다, 해당 리소스가 없으면 생성한다.&lt;/li&gt;
  &lt;li&gt;PATCH : 리소스를 부분적으로 변경한다.&lt;/li&gt;
  &lt;li&gt;DELETE : 리소스를 삭제한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기타-메서드--head-options-connect-trace-가-있다-사용빈도-낮음&quot;&gt;기타 메서드 : HEAD, OPTIONS, CONNECT, TRACE 가 있다. (사용빈도 낮음)&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;get&quot;&gt;GET&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;리소스를 조회하는 메서드&lt;/li&gt;
  &lt;li&gt;서버에 전달하고 싶은 데이터는 &lt;strong&gt;query(쿼리파라미터, 쿼리스트링)&lt;/strong&gt;를 통해서 전달한다.&lt;/li&gt;
  &lt;li&gt;메시지 바디를 사용해서 데이터를 전달할 수 있지만 지원하는 곳이 적다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;post&quot;&gt;POST&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;요청 데이터를 처리한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;메시지 바디를 통해&lt;/strong&gt; 서버로 요청 데이터를 전달한다.&lt;/li&gt;
  &lt;li&gt;서버는 요청 데이터를 처리하고, 메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다.&lt;/li&gt;
  &lt;li&gt;서버는 주로 전달된 데이터를 통해 &lt;strong&gt;신규 리소스를 등록&lt;/strong&gt;하고, 프로세스 처리에 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;리소스 URI에 POST 요청에 오면 요청 데이터를 어떻게 처리할 지 리소스마다 따로 정해야한다. (POST는 따로 정해진게 없다는 뜻이다.)&lt;/p&gt;

&lt;p&gt;POST는 회원가입, 주문하기, 게시판 글쓰기, 댓글달기, 신규 주문 생성, 기존 자원에 데이터 추가와 같이 새로운 리소스를 생성하거나 입력 폼을 통해 데이터를 전달하여 서버에서 처리할 수 있는 작업을 할 때 사용되는 메서드이다. 다른 메서드를 사용하기 애매할 경우에는 POST를 사용할 정도로 거의 모든 데이터처리를 할 때 사용될 수 있는 메서드이다.&lt;/p&gt;

&lt;p&gt;[정리]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;새 리소스 생성(등록)
    &lt;ul&gt;
      &lt;li&gt;서버가 아직 식별하지 않은 새 리소스를 생성해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;요청 데이터를 처리
    &lt;ul&gt;
      &lt;li&gt;단순히 데이터를 생성하거나, 변경하는 것을 넘어 프로세스를 처리해야하는 경우에 해당한다.&lt;/li&gt;
      &lt;li&gt;주문의 경우 결제완료 &amp;gt; 배달 시작 &amp;gt; 배달완료처럼 단순히 값 변경을 넘어 프로세스의 상태가 변경되는 경우에도 POST를 사용한다.&lt;/li&gt;
      &lt;li&gt;POST의 결과로 새로운 리소스가 생성되지 않을 수도 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다른 메서드로 처리하기 애매한 경우 POST를 사용한다.
    &lt;ul&gt;
      &lt;li&gt;ex. JSON으로 조회 데이터를 넘겨야하는데 GET메서드를 사용하기 어려운 경우
사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;put&quot;&gt;PUT&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;리소스를 완전히 대체한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;리소스가 있으면 대체한다.&lt;/li&gt;
      &lt;li&gt;리소스가 없으면 생성한다.&lt;/li&gt;
      &lt;li&gt;리소스를 덮어씌운다고 생각하면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;클라이언트가 리소스를 식별한다&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;클라이언트가 리소스 위치를 알고 URI를 지정한다.&lt;/li&gt;
      &lt;li&gt;POST와의 차이점이다. POST는 서버에서 리소스를 지정하지만 PUT은 클라이언트에서 지정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서 리소스를 완전히 대체한다는 점에 주목해야한다. 예를 들어서 ID가100인 회원의 나이를 수정하기위해 “AGE” : 20을 PUT 메서드로 보낸다고 했을 때 서버에서는 ID 100에 “NAME” : STEVE, “AGE” : 50 이 저장되어있다면 서버의 데이터는 “AGE” : 20으로 완전히 대체된다. 이름이 누락되어버리는 것이다. 따라서 PUT을 사용할 경우 신중하게 입력 폼을 작성하는 것이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;patch&quot;&gt;PATCH&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;리소스를 부분변경한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PUT이 데이터를 완전 대체한다고 하면 PATCH는 부분변경이다. 위의 예시를 다시 참조하면, “AGE” : 20을 서버에 보내면 서버의 데이터는 “NAME” : STEVE, “AGE” : 20이 된다. NAME 데이터가 유지된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;delete&quot;&gt;DELETE&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;리소스를 삭제한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http-메서드의-속성&quot;&gt;HTTP 메서드의 속성&lt;/h2&gt;

&lt;p&gt;HTTP 메서드를 보기 전에 유의해야할 점 : &lt;strong&gt;해당 리소스만 고려&lt;/strong&gt;한다. 외부적인 요인은 고려하지 않는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;안전(Safe Methods) : 호출해도 리소스가 변경되지 않음(GET, HEAD)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;멱등(Idempotent Methods)&lt;/strong&gt; : 한 번 호출하든 두 번 호출하든 100번 호출하든 결과가 같다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;GET : 한 번 조회하든 두 번 조회하든 같은 결과가 조회된다.&lt;/li&gt;
      &lt;li&gt;PUT : 결과를 대체한다. 따라서 같은 요청을 여러 번 해도 대체된 결과를 출력하기 때문에 최종적인 결과는 같다.(리소스 자체만 따져봐야한다. 대체되는 과정은 포함하지 않음.)&lt;/li&gt;
      &lt;li&gt;DELETE : 결과를 삭제하면 그 리소스는 지워진다. 삭제된 결과는 같다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt; : 두 번 호출하면 같은 결제가 중복해서 발생할 수 있다. 멱등에 해당되는 부분&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;캐시가능(Cacheable Methods) : 응답결과 리소스를 캐시해서 사용해도 되는지의 여부&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;GET, HEAD, POST, PATCH는 캐시가 가능하다.
        &lt;ul&gt;
          &lt;li&gt;실제로는 GET, HEAD 정도만 캐시로 사용한다. POST, PATCH는 본문 내용까지 캐시 키로 고려해야한다. 하지만 구현이 쉽지 않다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http-메서드-활용&quot;&gt;HTTP 메서드 활용&lt;/h2&gt;

&lt;p&gt;이제 HTTP 메서드를 활용해보도록 하자. 클라이언트에서 서버로 데이터를 전송해야하는 상황에서 HTTP API를 설계하는 예시를 들어볼 것이다.&lt;/p&gt;

&lt;h3 id=&quot;클라이언트에서-서버로-데이터를-전송하는-방식&quot;&gt;클라이언트에서 서버로 데이터를 전송하는 방식&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;쿼리 파라미터를 통한 데이터 전송(GET) : 주로 정렬 필터에 사용한다.(검색어)&lt;/li&gt;
  &lt;li&gt;메시지 바디를 통한 데이터 전송(POST, PUT, PATCH) : 회원가입, 상품주문, 리소스 등록, 리소스 변경에 주로 사용되어진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;데이터를 전송하는 상황은 4가지의 상황으로 구분한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;정적 데이터 조회&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;이미지, 정적 테스트 문서&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;동적 데이터 조회&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;주로 검색, 게시판 목록에서 정렬 필터(검색어)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTML form을 통한 데이터 전송&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;회원가입, 상품주문, 데이터 변경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP API를 통한 데이터 전송&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;회원가입, 상품주문, 데이터 변경&lt;/li&gt;
      &lt;li&gt;서버 to 서버, 앱 클라이언트, 웹 클라이언트(AJAX)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-20-15-54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정적-데이터-조회&quot;&gt;정적 데이터 조회&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이미지나 정적 텍스트 문서를 조회&lt;/li&gt;
  &lt;li&gt;조회는 GET 방식을 사용한다.&lt;/li&gt;
  &lt;li&gt;정적 데이터는 일반적으로 &lt;strong&gt;쿼리 파라미터 없이 리소스 경로로 단순하게 조회&lt;/strong&gt;가 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-20-16-37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;동적-데이터-조회&quot;&gt;동적 데이터 조회&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;쿼리 파라미터를 사용&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;/search?q=hello&amp;amp;hl=ko&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;uri뒤에 있는 쿼리파라미터를 통해서 쿼리 파라미터에 따른 응답 결과를 다르게 출력하는 동적인데이터를 조회한다.&lt;/li&gt;
      &lt;li&gt;조회 조건을 줄여주는 필터, 조회 결과를 정렬하는 정렬 조건에 주로 사용한다. 조회는 GET방식을 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-20-18-26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;html-form-데이터-전송--post-방식&quot;&gt;HTML Form 데이터 전송 : POST 방식&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;POST 방식은 URI에 쿼리파라미터가 존재하지 않는다. 대신 form 태그에 입력한 내용을 key와 value의 형태로 요청메시지의 &lt;strong&gt;메시지바디 부분에 담아서&lt;/strong&gt; 보내게 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Content-type : application/x-www-form-urlencoded
    &lt;ul&gt;
      &lt;li&gt;POST 방식으로 데이터를 전송할 경우 요청 HTTP 메시지의 Content type은 application/x-www-form-urlencoded로 설정되어 보내진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GET은 조회에서만 사용한다. 만약 form 태그로 입력한 데이터를 GET을 통해서 보내면 쿼리파라미터를 통해 보내게 된다. 좋지않다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-20-22-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;enctype=”multipart/form-data” : 여러 Content-type의 데이터를 보낼 수 있게 해주는 인코딩 타입이다. form 태그에서 enctype 속성에 “multipart/form-data”를 입력하면 요청 메시지가 위의 사진처럼 입력되는데, 주로 바이너리 데이터를 전송할 때 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http-api-데이터-전송&quot;&gt;HTTP API 데이터 전송&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;아이폰은 클라이언트에서 서버로 바로 전송을 해야한다. 이럴 때 HTTP API 데이터를 사용한다.&lt;/li&gt;
  &lt;li&gt;서버 to 서버 : 백엔드 시스템 통신이다.&lt;/li&gt;
  &lt;li&gt;앱 클라이언트 : 아이폰, 안드로이드에서만 사용한다.&lt;/li&gt;
  &lt;li&gt;웹 클라이언트 : HTML에서 Form 전송 대신 자바 스크립트를 통한 통신에 사용한다(AJAX) &amp;gt; React, Vue.js와 같은 웹 클라이언트와 통신&lt;/li&gt;
  &lt;li&gt;POST, PUT, PATCH : 메시지 바디를 통해 데이터를 전송한다.&lt;/li&gt;
  &lt;li&gt;GET : 조회, 쿼리파라미터로 데이터를 전달한다.&lt;/li&gt;
  &lt;li&gt;Content-Type: application/json을 주로 사용한다(사실 상 표준) &amp;gt; TEXT, XML, JSON 등등&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;http-설계-예시-컬렉션-스토어-컨트롤-uri&quot;&gt;HTTP 설계 예시 (컬렉션, 스토어, 컨트롤 URI)&lt;/h1&gt;

&lt;p&gt;HTTP API를 설계하는 예시를 통해 HTTP 데이터 전송 시 사용되는 개념들을 익혀본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;회원관리-시스템--post&quot;&gt;회원관리 시스템 : POST&lt;/h2&gt;

&lt;p&gt;다시 회원 리소스로 돌아가보자, 배운 내용을 바탕으로 이제 회원 리소스로 CRUD를 어떻게 설계해야되는지 알았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;회원 목록 /members : GET&lt;/li&gt;
  &lt;li&gt;회원 등록 /members : POST&lt;/li&gt;
  &lt;li&gt;회원 조회 /members/{id} : GET&lt;/li&gt;
  &lt;li&gt;회원 수정 /members/{id} : PATCH, PUT, POST&lt;/li&gt;
  &lt;li&gt;회원 삭제 /members/{id} : DELETE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우리가 봐야할 건 회원 등록이 POST 기반으로 등록된다는 점이다. POST는 신규 자원을 등록할 때 사용할 수 있는데, 몇 가지 특징을 가지고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;클라이언트는 등록될 리소스의 URI를 모른다.&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;회원 등록 /members : POST&lt;/li&gt;
      &lt;li&gt;POST /members&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;서버가 새로 등록된 리소스 URI를 생성&lt;/strong&gt;해준다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;HTTP/1.1 201 Created&lt;/li&gt;
      &lt;li&gt;Location : /members/100&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 개념을 &lt;strong&gt;컬렉션(Collections)&lt;/strong&gt;이라고 한다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;서버가 관리하는 리소스 디렉토리&lt;/li&gt;
      &lt;li&gt;서버가 리소스의 URI를 생성하고 관리&lt;/li&gt;
      &lt;li&gt;여기서 컬렉션은 /members가 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클라이언트는 그냥 /members URI로 등록할 데이터를 전송하고, 서버가 생성된 회원의 URI를 /members/100과 같이설정한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;파일관리-시스템--put&quot;&gt;파일관리 시스템 : PUT&lt;/h2&gt;

&lt;p&gt;이번에는 파일 관리 시스템을 구현한다고 가정해보자, 파일 목록, 파일 조회, 등록, 삭제, 대량 등록을 구현한다고 했을 때,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파일 목록 /files -&amp;gt; GET&lt;/li&gt;
  &lt;li&gt;파일 조회 /files/{filename} -&amp;gt; GET&lt;/li&gt;
  &lt;li&gt;파일 등록 /files/{filename} -&amp;gt; PUT&lt;/li&gt;
  &lt;li&gt;파일 삭제 /files/{filename} -&amp;gt; DELETE&lt;/li&gt;
  &lt;li&gt;파일 대량 등록 /files -&amp;gt; POST&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음과 같이 구현할 수 있다. 파일을 등록할 때 PUT 방식을 사용하고, 대량 등록할 때 POST방식을 사용하는데, 어떤 특징이 있는 지 알아보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;put-신규자원-등록-특징&quot;&gt;PUT 신규자원 등록 특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;클라이언트가 리소스 URI를 알고있다.&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;파일 등록 /files/{filename} &amp;gt; PUT&lt;/li&gt;
      &lt;li&gt;PUT /files/star.jpg&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;클라이언트가 직접 리소스의 URI를 지정&lt;/strong&gt;한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 개념을 &lt;strong&gt;스토어(Store)&lt;/strong&gt;라고 한다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;클라이언트가 관리하는 리소스 저장소이며&lt;/li&gt;
      &lt;li&gt;클라이언트가 리소스의 URI를 알고 관리한다.&lt;/li&gt;
      &lt;li&gt;스토어의 리소스는 /files&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;간단히 생각해보자, 파일을 업로드 할 때는 로컬파일의 위치가 클라이언트에 있으므로 클라이언트에서 업로드를 해야된다. 클라이언트에서 파일을 업로드 할 때 파일의 위치를 서버에서 미리 지정할 순 없다. 서버는 파일을 받은 다음 DB에 저장을 해야하기 때문에 주도권은 클라이언트에게 있다.&lt;/p&gt;

&lt;p&gt;따라서 클라이언트 리소스의 URI를 먼저 지정을 하고 서버에 전달하게된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;html-form-사용&quot;&gt;HTML FORM 사용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HTML FORM은 GET과 POST 방식만 지원한다.&lt;/li&gt;
  &lt;li&gt;AJAX 같은 기술을 사용해서 한계를 극복할 수 있다.&lt;/li&gt;
  &lt;li&gt;여기서는 순수 HTML FORM만 언급한다.&lt;/li&gt;
  &lt;li&gt;GET, POST 방식만 지원하므로 제약이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 회원목록을 HTML FORM 만 사용하여 개발한다고 가정해보자,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;회원 목록 /members -&amp;gt; GET&lt;/li&gt;
  &lt;li&gt;회원 등록 폼 /members/new -&amp;gt; GET&lt;/li&gt;
  &lt;li&gt;회원 등록 /members/new, /members -&amp;gt; POST&lt;/li&gt;
  &lt;li&gt;회원 조회 /members/{id} -&amp;gt; GET&lt;/li&gt;
  &lt;li&gt;회원 수정 폼 /members/{id}/edit -&amp;gt; GET&lt;/li&gt;
  &lt;li&gt;회원 수정 /members/{id}/edit, /members/{id} -&amp;gt; POST&lt;/li&gt;
  &lt;li&gt;회원 삭제 /members/{id}/delete -&amp;gt; POST&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;URI를 보면 GET과 POST로만 구현을 해야하기 때문에 어쩔 수 없이 리소스 외에 동사를 사용하여 URI를 설계한 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;이 개념을 &lt;strong&gt;컨트롤 URI&lt;/strong&gt;라고한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GET, POST만 지원하므로 제약이 있음&lt;/li&gt;
  &lt;li&gt;이런 제약을 해결하기위해 동사로 된 리소스 경로를 사용&lt;/li&gt;
  &lt;li&gt;POST의 /new, /edit, /delete가 컨트롤 URI&lt;/li&gt;
  &lt;li&gt;HTTP 메서드로 해결하기 애매한 경우에 사용된다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 01 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//http_basic_4</link>
        <guid isPermaLink="true">https://achasan.github.io//http_basic_4</guid>
        
        <category>SpringBoot</category>
        
        
      </item>
    
      <item>
        <title>HTTP의 개념(역사, 특징, Stateless, Stateful, 비연결성)</title>
        <description>&lt;h1 id=&quot;http-웹-기본-지식-3&quot;&gt;HTTP 웹 기본 지식 3&lt;/h1&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP&lt;/h2&gt;

&lt;h3 id=&quot;http-메시지에-모든-것이-전송-가능&quot;&gt;HTTP 메시지에 모든 것이 전송 가능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HTML, TEXT&lt;/li&gt;
  &lt;li&gt;IMAGE, 음성, 영상 파일&lt;/li&gt;
  &lt;li&gt;JSON, XML(API)&lt;/li&gt;
  &lt;li&gt;거의 모든 형태의 데이터 전송이 가능&lt;/li&gt;
  &lt;li&gt;서버 간에 데이터를 주고 받을 떄도 대부분 HTTP를 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http의-역사&quot;&gt;HTTP의 역사&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1991년 : HTTP/0.9 - GET 메서드만 지원, HTTP 헤더 X&lt;/li&gt;
  &lt;li&gt;1996년 : HTTP/1.0 - 메서드와 헤더 추가됨&lt;/li&gt;
  &lt;li&gt;1997년 : HTTP/1.1 - 가장 많이 사용하고, 가장 중요한 버전이다.&lt;/li&gt;
  &lt;li&gt;2015년 : HTTP/2 - 성능 개선&lt;/li&gt;
  &lt;li&gt;현재진행중 : HTTP/3 - TCP 대신 UDP를 사용함, 성능 개선&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;가장 중요한 버전은 HTTP 1.1이다. 1.1 버전에서 대부분의 기능들을 가지고 있고, 이후의 버전들은 성능 개선에 초점을 맞추어서 업데이트되고 있다.&lt;/p&gt;

&lt;p&gt;현재 1.1 버전을 가장 많이 사용하고 있으며, 1.1 버전에 대한 개정은 2014년에 이루어진 RFC7235이다.&lt;/p&gt;

&lt;h3 id=&quot;http의-특징&quot;&gt;HTTP의 특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트 서버 구조&lt;/li&gt;
  &lt;li&gt;무상태 프로토콜(Stateless), 비연결성&lt;/li&gt;
  &lt;li&gt;HTTP 메시지&lt;/li&gt;
  &lt;li&gt;단순함과 확장가능성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;무상태-프로토콜&quot;&gt;무상태 프로토콜&lt;/h2&gt;

&lt;h3 id=&quot;stateless&quot;&gt;Stateless&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;서버가 클라이언트의 상태를 보존하지 않는 것.&lt;/li&gt;
  &lt;li&gt;장점은 서버의 확정성이 높다.(스케일 아웃)&lt;/li&gt;
  &lt;li&gt;단점은 클라이언트가 추가 데이터를 전송한다는 점&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stateful-stateless의-차이점&quot;&gt;Stateful, Stateless의 차이점&lt;/h3&gt;

&lt;p&gt;Stateful이 어떤 방식인지 다음 대화를 살펴보자&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;고객 : 이 노트북 얼마인가요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;점원 : 100만원 입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;고객 : 2개 구매하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;점원 : 200만원입니다. 신용카드, 현금 중에 결제수단을 선택해주세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;고객 : 신용카드로 구매하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;점원 : 200만원 결제완료 되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;대화를 보면 처음부터 끝까지 내용이 이어지고 있다. 대화내용의 중간부분을 자르면 대화의 흐름을 이해할 수가 없을 것이다. 만약 점원이 중간에 바뀐다면 어떻게 될지 보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;고객: 이 노트북 얼마인가요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;점원A: 100만원 입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;고객: 2개 구매하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;점원B: ? 무엇을 2개 구매하시겠어요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;고객: 신용카드로 구매하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;점원C: ? 무슨 제품을 몇 개 신용카드로 구매하시겠어요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stateful은 상태가 유지되는 것으로, 고객이 노트북을 산다고 말하면서 노트북이 상태유지되고, 2개를 산다고 말하면서 상태유지가 되고, 신용카드로 결제한다고 이야기하면서 데이터의 전송이 마무리 된다. 데이터를 처리하기까지 서버와 클라이언트가 계속 연결이 유지되어있어야하고, 중간에 서버가 바뀌면 어떤 데이터가 유지되고 있었는지 알 수 없게된다.&lt;/p&gt;

&lt;p&gt;이제 Stateless를 알아보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;고객: 이 노트북 얼마인가요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;점원A: 100만원 입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;고객: 노트북 2개 구매하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;점원B: 노트북 2개는 200만원 입니다. 신용카드, 현금중에 어떤 걸로 구매 하시겠어요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;고객: 노트북 2개를 신용카드로 구매하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;점원C: 200만원 결제 완료되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;무상태는 고객이 구매하려는 모든 데이터 정보를 가지고 있어서 서버가 바뀌더라도 비즈니스 로직의 처리가 가능해진다. 모든 데이터를 담고 있어서 데이터가 무거워지는 단점을 가지고 있지만, 서버 입장에서는 서버 증설이 가능해지고, 갑자기 몰리는 트래픽을 방지할 수 있어서 더 선호되는 상태이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stateful-stateless-정리&quot;&gt;Stateful, Stateless 정리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Stateful(상태유지) : 중간에 다른 점원으로 바뀌면 안된다. (중간에 다른 점원으로 바뀔 때 상태 정보를 다른 점원에게 미리 알려줘야 한다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stateless(무상태) : 중간에 다른 점원으로 바뀌어도 된다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;갑자기 고객이 증가해도 점원을 대거 투입할 수 있다.&lt;/li&gt;
      &lt;li&gt;갑자기 클라이언트 요청이 증가해도 서버를 대거 투입할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stateless는 응답서버를 쉽게 바꿀 수 있어서 무한한 서버 증설이 가능해진다.
이를 스케일 아웃(scale out)이라고 하는데, 무상태 요청정보를 클라이언트가 가지고 있어서 이를 읽을 수 있는 서버만 늘려주면 되기 때문에 대응하기가 훨씬 수월해진다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하지만 Stateless는 한계점을 가지고 있다. 대표적으로 로그인이다. 클라이언트에서 로그인을 했을 경우 서버에서는 로그인을 했다는 상태를 서버에 유지해야 다른 서비스들을 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;일반적으로 브라우저 쿠키와 서버 세션등을 사용해서 상태를 유지한다. 상태유지는 최소한만 사용하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;또한 Stateful에 비해서 Stateless는 데이터를 한 번에 많이 보낸다느 점도 단점이라할 수 있다.&lt;/p&gt;

&lt;p&gt;결론은 Stateless의 최대장점은 트래픽이 몰리더라도 서버를 왕창늘려도 비즈니스 로직을 처리하는데 문제가 없다는 것이다. 클라이언트 측에서 정보를 A부터 Z까지 가지고 있기 때문에 서버측에서 정보를 읽는데 문제가 없다. 이러한 메리트 때문에 Stateless로 설계하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;비연결성connectionless&quot;&gt;비연결성(Connectionless)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-31-22-58-37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기본적으로 웹 애플리케이션이 가동되면 서버는 클라이언트와 연결을 유지한다. 클라이언트가 요청을 보내지 않더라도 서버는 요청이 올때까지 계속 연결을 유지시킨다. 연결이 계속 유지될수록 서버의 자원은 지속적으로 소모되어 좋지 않다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-31-22-59-19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;비연결성은 클라이언트와 서버 간에 쵸엉이 없을 경우에는 연결을 끊고 클라이언트의 요청이 들어오면 그때 다시 연결을 하는 것을 말한다. 이럴 경우에는 서버는 최소한의 자원으로 서버를 유지할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;HTTP는 기본이 연결을 유지하지 않는 모델이다. 일반적으로 초 단위 이하의 빨느 속도로 응답하기 때문에 1시간동안 수 천명이 서비스를 사용해도 실제 서버에서 동시에 처리하는 요청은 수 십개 이하로 매우 적다.(브라우저가 랜더링하면 정보를 얻어오는 시간이 있기 때문)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-31-23-03-07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 비연결성의 단점은 무엇일까? 요청과 응답이 이루어지면 연결을 끊어버리기 때문에 다시 요청을 하기 위해선 새로 TCP/IP 연결을 맺어야한다는 점이다. 우리는 위에서 TCP/IP가 연결되는 과정을 보았다. 3 way handshake를 매 번 수행해야한다는 점은 별로 좋아보이지 않는다.&lt;/p&gt;

&lt;p&gt;또한 웹 브라우저로 사이트를 요청하면 HTML 뿐만 아니라 JS, CSS, 이미지 등 수 많은 자원들이 같이 다운로드가 된다. 하나 씩 받게되면서 연결과 종료를 반복하게 되는 것이다. 지금은 Persistent Connections(지속연결)을 통해 문제를 해결하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-31-23-03-28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지속연결을 할 경우에는 HTML, JS, CSS 이미지들을 모두 다운받을 때 까지 연결을 지속한다. 모든 리소스들을 다 받은 다음에 연결이 종료되어 효율적인 서버자원활용을 가능하게 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http-메시지&quot;&gt;HTTP 메시지&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-31-23-05-00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이전 강의에서 HTTP를 요청하고 응답이 어떻게 이루어지는 지 전체적인 흐름을 살펴보았다. 이번에는 HTTP 메시지가 어떤 구조를 가지고 있는지를 알아본다.&lt;/p&gt;

&lt;p&gt;HTTP의 메시지 구조는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;start-line(시작라인)&lt;/li&gt;
  &lt;li&gt;header(헤더)&lt;/li&gt;
  &lt;li&gt;empty line(공백라인) (CRLF : 엔터) : 꼭 있어야하는 라인&lt;/li&gt;
  &lt;li&gt;message body(바디태그) : 올 수도 있고 안 올수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;총 네 가지가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;요청-메시지-구조&quot;&gt;요청 메시지 구조&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-31-23-44-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;start-line = request-line&lt;/li&gt;
  &lt;li&gt;request-line = method SP(공백) request-target SP HTTP-version CRLF(엔터)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하나 씩 천천히 살펴보자. 먼저 요청 메시지는 시작 라인이 요청라인으로, 요청 라인은&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;메서드 요청대상 HTTP버전&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;으로 이루어져 있다. 공백은 무조건 띄어쓰기를 해주어야한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP메서드&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;종류는 GET, POST, PUT, DELETE 등이 있다.&lt;/li&gt;
      &lt;li&gt;서버가 수행해야할 동작을 지정한다. (GET: 리소스 조회, POST: 요청 내역 처리)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;요청대상&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;구성은 absolute-path[?query]로 구성되어있다. (절대경로[?쿼리])&lt;/li&gt;
      &lt;li&gt;여기서 절대경로는 “/”로 시작하는 경로를 말한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 버전 : 말 그대로 HTTP 버전을 나타낸다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;응답-메시지-구조&quot;&gt;응답 메시지 구조&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-17-45-07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;start-line = status-line&lt;/li&gt;
  &lt;li&gt;status-line = HTTP-version SP status-code SP reason-phrase CRLF&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;응답 메시지는 총 3개로 이루어져 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTP버전 HTTP상태코드 이유문구&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 버전 : 말 그대로 HTTP 버전을 나타냄&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 상태 코드 : 요청 성공, 실패를 나태낸다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;200 : 성공&lt;/li&gt;
      &lt;li&gt;400 : 클라이언트 요청 오류&lt;/li&gt;
      &lt;li&gt;500 : 서버 내부 오류&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이유 문구&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;사람이 이해할 수 있는 짧은 상태 코드를 설명하는 글&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;http-헤더&quot;&gt;HTTP 헤더&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-17-48-00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;header-field = field-name “:” OWS field-value OWS (OWS : 띄어쓰기 허용)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;field-name은 대소문자 구분이 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;용도&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;HTTP 전송에 필요한 모든 부가정보를 담는다.(메시지 바디의 내용, 크기, 압축, 인증, 요청 클라이언트의 정보…)&lt;/li&gt;
      &lt;li&gt;표준 헤더가 너무 많다는 점이 특징&lt;/li&gt;
      &lt;li&gt;필요시에는 임의의 헤더가 추가 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;http-메시지-바디&quot;&gt;HTTP 메시지 바디&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-11-01-17-52-17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실제로 전송할 데이터가 담겨있다.&lt;/li&gt;
  &lt;li&gt;HTML 문서, 이미지, 영상 JSON 등 byte로 표현할 수 있는 모든 데이터를 전송할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http-정리&quot;&gt;HTTP 정리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP 메시지에 모든 것을 전송할 수 있다.&lt;/li&gt;
  &lt;li&gt;HTTP버전은 1.1을 기준으로 한다. 이후 버전은 성능 개선에 초점이 맞춰져 있다.&lt;/li&gt;
  &lt;li&gt;클라이언트와 서버 구조는 요청과 응답을 통해 이루어진다.&lt;/li&gt;
  &lt;li&gt;무상태 프로토콜(Stateless)의 특징에 대해 알아두기&lt;/li&gt;
  &lt;li&gt;HTTP 메시지의 구조(요청, 응답)&lt;/li&gt;
  &lt;li&gt;HTTP는 단순하고 확장이 가능한 특징을 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 31 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//http_basic_3</link>
        <guid isPermaLink="true">https://achasan.github.io//http_basic_3</guid>
        
        <category>SpringBoot</category>
        
        
      </item>
    
      <item>
        <title>[Spring:9] 빈 스코프(Bean Scope)</title>
        <description>&lt;h1 id=&quot;빈-스코프-정리&quot;&gt;빈 스코프 정리&lt;/h1&gt;

&lt;h2 id=&quot;빈-스코프란&quot;&gt;빈 스코프란?&lt;/h2&gt;

&lt;p&gt;Bean Scope&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;SingleTon : 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ProtoType : 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프이다. 종료 메서드 호출이 되지 않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;웹 관련 스코프&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;request : 웹 요청이 들어오고 나갈 때 까지 유지되는 스코프&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;session : 웹 세션이 생성되고 종료될 때까지 유지되는 스코프&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;application : 웹의 서블릿 컨텍스트와 같은 범위로 유지되는 스코프이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;프로토타입-스코프&quot;&gt;프로토타입 스코프&lt;/h2&gt;

&lt;p&gt;프로토타입 스코프를 스프링 컨테이너에 조회하면 항상 새로운 인스턴스를 생성해서 반환한다(싱글턴이 아니다.)&lt;/p&gt;

&lt;p&gt;프로토타입 빈을 등록했을 경우, 스프링 컨테이너는 프로토타입 빈을 생성하고, 의존관계를 주입하고, 초기화까지만 처리한다. 클라이언트에 빈을 반환하고 빈을 아예 관리하지 않는다. 따라서 클라이언트가 받은 프로토타입 빈을 관리할 책임을 갖는다. 초기화까지만 처리하기 때문에 @PreDestroy 종료 메서드는 호출되지 않는다.&lt;/p&gt;

&lt;p&gt;@Configuration 어노테이션을 주지 않더라도 AnnotationConfigApplicationContext 파라미터에 클래스를 넣어주면 해당 클래스는 컨테이너에 등록이 된다.(정확히 말하면 컴포넌트 스캔 목록에 해당되게된다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;일반-스코프와-프로토타입-스코프의-차이점&quot;&gt;일반 스코프와 프로토타입 스코프의 차이점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;일반 스코프라면 (Singleton) 스프링 컨테이너가 등록될 때 빈이 생성되면서 init() 메서드가 실행되게 된다.(@PostConstruct)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로토타입 스코프는 스프링 컨테이너가 등록되면서 객체가 생성되지 않는다. 당연히 init() 메서드도 실행되지 않는다. 클라이언트가 프로토타입의 빈을 요청하면 그때 객체를 새로 생성하고 init() 메서드까지 한 다음에 클라이언트한테 객체를 던져주고 끝난다. 또한 같은 객체가 아닌 클라이언트가 요청할 때마다 새로운 객체를 생성해서 클라이언트한테 던져준다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클라이언트에게 객체를 줘버리기 때문에 컨테이너가 죽을 때destroy() 메서드는 실행되지 않는다. 만약 destroy()를 호출할 필요가 있을 경우 코드를 통해 수정으로 호출해주어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;프로토타입-스코프를-싱글톤-빈과-함께-사용시-문제점&quot;&gt;프로토타입 스코프를 싱글톤 빈과 함께 사용시 문제점&lt;/h2&gt;

&lt;p&gt;만약 싱글턴 빈에 프로토타입 빈을 의존관계 주입하게 되면 어떻게 될까? 싱글턴 빈은 컨테이너가 생성될 때 최초로 의존관계 주입이 되기 때문에 컨테이너에서 프로토타입 객체를 하나 생성해서 싱글턴 빈에 넣어줄 것이다.&lt;/p&gt;

&lt;p&gt;하지만 이렇게 된 다음 클라이언트가 싱글턴 빈을 호출하면 싱글턴 빈 안에 존재하는 프로토타입 빈만 계속 호출이 된다. 프로토타입 빈이 싱글턴이 되어버린 것이다.&lt;/p&gt;

&lt;p&gt;우리는 분명 싱글턴 빈에 프로토타입 빈을 의존관계 주입해서 빈을 호출할 때마다 새로운 프로토타입 빈 객체를 호출하게 구현하기를 원한다. 다른 방법을 찾아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;싱글톤-빈과-함께-사용시-provider로-문제-해결&quot;&gt;싱글톤 빈과 함께 사용시 Provider로 문제 해결&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singleton&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnnotationConfigApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이전 강의에서 싱글턴 빈에 프토토타입 빈을 의존관계 주입했을 때 프로토 타입 빈이 싱글턴이 되어버리는 현상을 보았었다. 따라서 위의 코드 처럼 클라이언트가 logic() 메서드를 실행하면 ApplicationContext를 통해 컨테이너에 등록되어있는 프로토타입 빈을 가져오게하도록 코드를 작성하여 메서드를 호출할 때마다 새로운 빈을 생성하도록 (어거지로) 구현했다.&lt;/p&gt;

&lt;p&gt;이 처럼 의존관계를 외부에서 주입받는게 아니라 직접 필요한 의존 관계를 찾는 것을 Dependency Lookup(DL) 의존관계라고 한다.&lt;/p&gt;

&lt;p&gt;하지만 이렇게 스프링의 애플리케이션 컨텍스트 전체를 주입받게 되면 스프링 컨테이너에 종속적인 코드가 되고, 단위테스트도 어려워지게 된다. 무엇보다 객체지향적이지 않은 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;objectfactory-objectprovider&quot;&gt;ObjectFactory, ObjectProvider&lt;/h2&gt;

&lt;p&gt;지정한 빈을 컨테이너에서 대신 찾아주는 DL 서비스를 제공&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singleton&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBeanProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBeanProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 작성했던 코드를 다음과 같이 바꿔보았다. 간단한 테스트를 위해서 필드주입으로 사용하였고, ObjectProvider를 사용하여 PrototypeBean을 직접 호출하여 호출할 때마다 새로운 객체를 받아오도록 하였다. 제네릭으로 어떤 빈을 호출할 건지를 적어주어야 한다.&lt;/p&gt;

&lt;p&gt;logic() 메서드를 보면 getObject() 메서드를 사용하여 컨테이너한테 프로토타입 빈의 새 객체를 요청한 다음 로직을 실행하는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;클라이언트가 메서드를 호출할 때마다 컨테이너는 새로운 객체를 주므로 테스트코드에서는 count의 수치가 1이 되어야 할 것이다. (테스트 성공)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;지금까지 내용을 다시 정리하자면, 생성자 주입을 할 때 프로토타입 빈을 싱글턴 빈에다가 주입하게되면 빈을 생성할 때 최초로 프로토타입 빈이 주입되고, 이후에는 싱글턴 빈을 호출할 때 주입된 프로토타입 빈만 계속 호출되어 프로토타입 빈이 싱글턴이 되어버린다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;이를 방지하기위해 ObjectProvider 객체를 사용하면 해당 객체를 getObject() 메서드를 통해서 새로운 객체를 호출할 수 있다. logic() 메서드에 getObject() 메서드를 집어넣어 메서드가 실행될 때 마다 새로운 객체를 생성해낸다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;원래는 ObjectFactory가 ObjectProvider보다 먼저 존재하고있었으나 ObjectProvider가 ObjectFactory를 상속하면서 여러가지 추가 기능들을 제공하는 객체가 만들어졌다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ObjectFactory : 기능이 단순하고 별도의 라이브러리가 필요없다. 스프링에 의존&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ObjectProvider : ObjectFactory를 상속한다. 옵션이나 스트림 처리 등 편의 기능이 많고 별도의 라이브러리가 필요없다. 스프링에 의존한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;providerjavaxinject&quot;&gt;Provider(javax.inject)&lt;/h2&gt;

&lt;p&gt;JSR-330인 자바 표준의 라이브러리이다. 라이브러리 이므로 그리들에 없다면 새로 설치를 해주어야 한다. dependencies 안에&lt;/p&gt;

&lt;p&gt;implementation ‘javax.inject:javax.inject:1’
를 작성해주면 된다.&lt;/p&gt;

&lt;p&gt;Provider라는 이름의 여러 객체들이 있으니 사용할 때는 javax.inject인지 확인하고 사용하여야 한다.&lt;/p&gt;

&lt;p&gt;ObjectProvider는 getObject()를 통해 새로운 객체를 컨테이너에 요청한다. Provider는 get() 메서드를 사용하여 컨테이너에 새 객체를 요청할 수 있다.&lt;/p&gt;

&lt;p&gt;Provider는 자바 표준이고, 기능이 매우 단순하므로 단위테스트를 만들거나 mock 코드를 만들기는 훨씬 쉬워진다.&lt;/p&gt;

&lt;p&gt;특징 :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;get() 메서드 하나로 기능이 매우 단순함&lt;/li&gt;
  &lt;li&gt;별도의 라이브러리가 필요하다.&lt;/li&gt;
  &lt;li&gt;자바 표준이므로 스프링이 아닌 다른 컨테이너에서도 사용할 수 있다. (근데 이럴일이 거의 없음)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정리&quot;&gt;[정리]&lt;/h3&gt;

&lt;p&gt;프로토타입 빈은 언제 사용할까? 매 번 사용할 때마다 의존관계 주입이 완료된 새로운 객체가 필요하면 사용하면 된다. 실무에서는 싱글턴 빈으로 대부분의 문제가 해결되기 떄문에 프로토타입 빈을 직접적으로 사용하는 일은 매우 드물다.&lt;/p&gt;

&lt;p&gt;프로토타입 뿐만 아니라 DL이 필요한 경우에는 위의 객체들을 모두 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;※ Provider, ObjectProvider 어떤걸 사용해야되는지 : ObjectProvider는 DL을 위한 편의 기능을 많이 제공해주고 스프링 외에 별도의 의존고나계 추가가 필요없기 때문에 편리하다.&lt;/p&gt;

&lt;p&gt;만약 코드를 스프링이 아닌 다른 컨테이너에서도 사용할 수 있어야 한다면 JSR-330 Provider를 사용해야한다.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//spring_basic_9</link>
        <guid isPermaLink="true">https://achasan.github.io//spring_basic_9</guid>
        
        <category>SpringBoot</category>
        
        
      </item>
    
      <item>
        <title>URI/URL/URN 정의, 웹 브라우저 요청의 전체적인 흐름</title>
        <description>&lt;h1 id=&quot;http-웹-기본-지식-2&quot;&gt;HTTP 웹 기본 지식 2&lt;/h1&gt;

&lt;h2 id=&quot;uri-url-urn&quot;&gt;URI? URL? URN?&lt;/h2&gt;

&lt;p&gt;웹 공부를 하면서 URI, URL은 흔하게 들어보았으나 URN은 처음 들어봤다. 세 키워드의 차이점이 무엇인지 알아보자.&lt;/p&gt;

&lt;h3 id=&quot;uri&quot;&gt;URI&lt;/h3&gt;

&lt;p&gt;URI(Uniform Resource Identifier)는 리소스를 식별하는 통합된 방법이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Uniform : 리소스를 식별하는 통일된 방식&lt;/li&gt;
  &lt;li&gt;Resource : 자원, URI로 식별할 수 있는 모든 것(제한없음)&lt;/li&gt;
  &lt;li&gt;Identifier : 다른 항목과 구분하는데 필요한 정보&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-29-21-30-46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;URI는 로케이터(locator), 이름(name) 또는 둘 다 추가로 분류될 수 있다, 즉 URI 안에 URL이 있는 것이고, URN이 있는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;url&quot;&gt;URL&lt;/h3&gt;

&lt;p&gt;URL은 Unifrom Resource Locator로, 우리가 흔히 볼 수 있는 주소창에 입력하는 그것이다. URL은 웹 애플리케이션의 리소스가 위치한 장소를 표시한다.&lt;/p&gt;

&lt;h3 id=&quot;urn&quot;&gt;URN&lt;/h3&gt;

&lt;p&gt;URN은 Unifrom Resource Name으로, 리소스에 이름을 부여한 것이다. 자주 사용되지는 않는다. 예를 들자면 책의 isbn urn을 예로 들 수 있다. 서점에 가면 뒷표지에 isbn과 바코드가 찍혀있는데, 책(리소스)의 고유한 식별자를 나타낸다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위치는 변할 수 있지만 이름은 변하지 않는다. 하지만 URN이름 만으로 실제 리소스를 찾을 수 있는 방법이 보편화 되지는 않았다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;urluri-분석하기&quot;&gt;URL(URI) 분석하기&lt;/h2&gt;

&lt;p&gt;https://www.google.com/search?q=hello&amp;amp;hl=ko&lt;/p&gt;

&lt;p&gt;위의 URL의 구조를 살펴보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-29-21-35-27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[URL scheme]&lt;/p&gt;

&lt;p&gt;scheme://[userInfo@]host[:port][/path][?query][#fragment]&lt;/p&gt;

&lt;p&gt;https://www.google.com:443/search?q=hello&amp;amp;hl=ko&lt;/p&gt;

&lt;p&gt;[scheme] : 주로 프로토콜을 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;프로토콜 : 어떤 방식으로 자원에 접근할 것인가 하는 약속규칙(http, https, ftp 등)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https는 80포트, https는 443 포트를 주로 사용한다. 포트는 생략이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https는 http에 보안을 추가한다(HTTP Secure)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[userInfo@]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;url에 사용자 정보를 포함해서 인증, 거의 사용하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[host]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;호스트명. 도메인명 또는 IP주소를 직접 사용 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[Port]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;접속 포트. 일반적으로 생략한다. 생략 시 http는 80, https는 443으로 자동설정된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[path]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리소스경로(path), 계층적 구조&lt;/li&gt;
  &lt;li&gt;ex) /home/file.jpg, /members, /members/100, /items/iphone12&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[?query]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;key=value 형태로 되어있다.
?로 시작하고 &amp;amp;로 추가가 가능하다. ?keyA=valueA&amp;amp;keyB=valueB
query parameter, query string 등으로 불린다. 웹서버에서 제공하는 파라미터, 문자 형태이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[#fragment]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;html 내부 북마크 등에 사용한다. 서버에 전송하는 정보는 아니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;웹-브라우저-요청-흐름&quot;&gt;웹 브라우저 요청 흐름&lt;/h2&gt;

&lt;p&gt;https://www.google.com/search?q=hello&amp;amp;hl=ko&lt;/p&gt;

&lt;p&gt;위의 URL 구조를 요청한다고 했을 때 전체적인 흐름을 살펴보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HTTPS 프로토콜을 사용한다는 점을 체크. 포트는 443으로 자동 할당된다.&lt;/li&gt;
  &lt;li&gt;호스트가 www.google.com이다. IP로 변환하니 200.200.200.2가 나옴(가정)&lt;/li&gt;
  &lt;li&gt;path = search&lt;/li&gt;
  &lt;li&gt;쿼리문 q=hello , hl=ko 로 되어있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 URL을 입력하게 되면 웹 브라우저는 해당 도메인 주소를 IP, 포트로 바꾸고 요청 메시지를 생성한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GET /search?q=hello&amp;amp;hl=ko HTTP/1.1
Host: www.google.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-29-21-53-54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;인터넷 프로토콜 4계층을 통해 HTTP 메세지가 담긴 패킷을 만들고, 서버로 전송한다.
요청 메시지를 받은 서버는 이제 해당 URL에 있는 리소스를 응답메시지로 전달해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-29-21-56-06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;응답할 메시지는 위와 같다. html을 클라이언트에 보내주면 웹 브라우저가 렌더링을 통해서 해당 URL의 화면을 출력해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;웹-브라우저-요청-전체적인-흐름-총-정리&quot;&gt;[웹 브라우저 요청 전체적인 흐름 총 정리]&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;resource 요청 시, 웹 브라우저가 HTTP 메시지 생성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SOCKET 라이브러리를 통해 TCP/IP로 3way handshake를 실행해 서버와 연결한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;운영체제 TCP/IP 계층으로 데이터 전송을 하기 위해 데이터를 전달한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 메시지가 포함된 TCP/IP 패킷을 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;패킷 정보가 인터넷으로 흘러간다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버에 요청 패킷이 도착하여 패킷 껍데기는 버리고 HTTP 메시지를 서버가 해석한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 응답 메시지를 마찬가지 방식으로 패킷을 생성하여 응답 패킷을 전달한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;수 많은 노드들을 통해서 응답 패킷이 도착하게 되면 웹 브라우저가 HTML 렌더링하여 화면에 보여준다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 29 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//http_basic_2</link>
        <guid isPermaLink="true">https://achasan.github.io//http_basic_2</guid>
        
        <category>SpringBoot</category>
        
        
      </item>
    
      <item>
        <title>IP 프로토콜, TCP/UDP의 정의, 특성, Port, DNS</title>
        <description>&lt;h1 id=&quot;http-웹-기본-지식&quot;&gt;HTTP 웹 기본 지식&lt;/h1&gt;

&lt;h2 id=&quot;인터넷-네트워크&quot;&gt;인터넷 네트워크&lt;/h2&gt;

&lt;p&gt;웹을 개발하기 위해 알아야하는 인터넷 네트워크는 크게 5가지이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인터넷 통신&lt;/li&gt;
  &lt;li&gt;IP(Internet Protocol)&lt;/li&gt;
  &lt;li&gt;TCP, UDP&lt;/li&gt;
  &lt;li&gt;PORT&lt;/li&gt;
  &lt;li&gt;DNS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인터넷-통신&quot;&gt;인터넷 통신&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;인터넷에서 컴퓨터 둘이 통신을한다고 가정해보자. 클라이언트가 서버에 Hello world라는 메시지를 보내려고 한다. 만약 클라이언트가 한국에 있고, 서버가 미국에 있을 때 클라이언트의 메시지는 수 많은 노드들을 거쳐 서버에 도착해야한다.&lt;/li&gt;
  &lt;li&gt;하지만 이 많은 노드들을 거쳐서 서버에 가는 동안 길을 잃지않고 목표한 지점의 서버까지 어떻게 이동할 수 있는 것일까?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ip--인터넷-프로토콜&quot;&gt;IP : 인터넷 프로토콜&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;IP의 역할은 지정한 IP주소에 데이터를 전달하는 것이다. 또한 패킷이라는 통신 단위로 데이터를 전달한다.&lt;/li&gt;
  &lt;li&gt;패킷?
    &lt;ul&gt;
      &lt;li&gt;패킷은 출발지IP, 목적지IP, 기타 정보들이 담겨있다.&lt;/li&gt;
      &lt;li&gt;클라이언트에서 Hello world 메시지를 담은 IP 패킷을 서버로 던진다. 서버는 IP패킷을 받으면 패킷을 읽는다.&lt;/li&gt;
      &lt;li&gt;서버들은 IP패킷에는 읽어오는 규약을 따르는데, 이를 통해 어떠한 클라이언트가 던진 패킷이더라도 IP 패킷을 읽을 수 있다.&lt;/li&gt;
      &lt;li&gt;읽은 패킷을 노드들끼리 던지면서 최종목적지 IP가 있는 서버로 패킷을 던져준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클라이언트의 메시지를 받은 서버는 응답 패킷을 다시 클라이언트에 던져준다. 여기서 클라이언트가 서버까지 오는 노드와는 다른 루트로 전달이 될 수 있다. 어떻게든 클라이언트의 요청에 응답하기만 하는 것이 목적이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ip-프로토콜의-한계&quot;&gt;IP 프로토콜의 한계&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;비연결성 : 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷이 전송된다.&lt;/li&gt;
  &lt;li&gt;비신뢰성 : 중간에 패킷이 사라진다면? 패킷이 순서대로 안온다면?
    &lt;ul&gt;
      &lt;li&gt;패킷의 용량이 클 경우에는 패킷을 쪼개서 순차적으로 보내야한다. 만약 1, 2, 3 순서대로 보냈는데 1, 3, 2순으로 도착했다면?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로그램 구분 불가 : 클라이언트에서 스트리밍으로 노래를 듣고, 통화를 하고, 게임을 한다고 했을 때 해당 클라이언트 아이피에서 보낸 요청이 어떤 프로그램 왔는 지 알 수 있는지?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tcp-udp&quot;&gt;TCP, UDP&lt;/h2&gt;

&lt;p&gt;IP프로토콜은 여러 한계점을 가지고 있다. 따라서 TCP, UDP가 더 많이 쓰인다. 어떤 장점을 가지고 있을까?&lt;/p&gt;

&lt;p&gt;이를 알기 위해서는 인터넷 프로토콜 스택의 4계층을 먼저 알아야한다.&lt;/p&gt;

&lt;h3 id=&quot;인터넷-프로토콜-스택의-4계층&quot;&gt;인터넷 프로토콜 스택의 4계층&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;애플리케이션 계층 : HTTP, FTP&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;전송계층 : TCP, UDP&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인터넷 계층 : IP&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;네트워크 인터페이스 계층(랜카드, 랜드라이버 …)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-29-20-57-36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 사진을 보면 4계층이 어떻게 이루어져있는지 볼 수 있다. 이제 TCP가 어떻게 전송되는지를 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-29-20-58-54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;구동중인 어플리케이션에서 Hello world라는 메시지를 생성한다.(HTTP 방식)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Socket 라이브러리를 통해 데이터를 전송계층에 보낸다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TCP 데이터를 생성한다. 메시지 데이터를 포함한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IP패킷을 생성하고 안에 TCP 데이터를 포함한다.(메시지도 같이 포함된다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;랜카드의 MAC 주소와 정보가 포함된 Ethernet frame을 생성하고 안에 TCP 데이터를 담는다(TMI)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;IP 패킷에는 출발지 IP와 목적지 IP, 기타 정보가 담겨있다. TCP에는 출발지의 Port와 목적지 Port가 담겨있고 전송 제어, 순서, 검증 정보 등이 담겨있고 그 안에 전송 데이터가 담겨져있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tcp-특징&quot;&gt;TCP 특징&lt;/h2&gt;

&lt;p&gt;TCP(/assets/images/HTTP_imagesTransfer Control Protocol)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;연결지향 : TCP 3 way handshake(가상연결) - 먼저 상대방과 연결이 되어있는지 확인한 다음에 전송한다.&lt;/li&gt;
  &lt;li&gt;데이터 전달 보증 : 클라이언트에서 데이터를 전송하면 서버에서 데이트를 받았다고 회신해준다. 클라이언트에서는 데이터가 전달되었다는 점을 확인 가능하다.&lt;/li&gt;
  &lt;li&gt;순서 보장 : 패킷을 1, 2, 3 순서로 전송했는데 1, 3, 2 순서로 도착했을 경우 서버에서 패킷 2부터 다시 보내라고 응답한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 3가지 특징으로 인해 TCP는 신뢰할 수 있는 프로토콜이 되었다. 현재는 대부분 TCP를 사용한다. 이제 각 특징에 대해 자세히 알아보자.&lt;/p&gt;

&lt;h3 id=&quot;1-tcp-3-way-handshake-&quot;&gt;1. TCP 3 way handshake &lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-29-21-05-43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 서버에 SYN이라는 신호를 보낸다.&lt;/li&gt;
  &lt;li&gt;SYN 신호를 받은 서버가 클라이언트에 SYN + ACK 신호를 보낸다.&lt;/li&gt;
  &lt;li&gt;SYN + ACK 신호를 받은 클라이언트가 ACK 신호를 서버에 보낸다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 서버로 데이터를 전송한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기서 SYN은 접속을 요청하는 신호이다. 클라이언트가 접속을 요청하면 서버는 접속요청과 요청 수락 신호를 같이 보낸다. 클라이언트는 요청 수락 신호를 보내게 되면 서로 연결이 가능하다는 뜻이므로 그제서야 클라이언트는 데이터를 전송하기 시작한다. (ACK 신호를 보내면서 같이 전송하기도 한다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-데이터-전달-보증&quot;&gt;2. 데이터 전달 보증&lt;/h3&gt;

&lt;p&gt;TCP는 클라이언트가 데이터를 서버에 보내면 서버에서 데이터를 받았다는 응답을 보낸다. IP 패킷의 경우에는 클라이언트가 데이터를 보내도 서버에서 받았다는 응답을 받지 못한다. 클라이언트에서는 데이터가 제대로 전송이 되었는 지 알 수가 없다. 신뢰성을 보장받지 못한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-순서-보장&quot;&gt;3. 순서 보장&lt;/h3&gt;

&lt;p&gt;클라이언트에서 TCP 프로토콜로 패킷을 쪼개서 1, 2, 3 순으로 보냈는데 1, 3, 2순으로 서버에 도착했다. 이럴 경우 서버에서는 TCP 정보를 읽고, 순서가 다르게 보내진 점을 인지하고 클라이언트에게 2번 패킷부터 다시 보내라고 응답을 보내게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;udp-특징&quot;&gt;UDP 특징&lt;/h2&gt;

&lt;p&gt;사용자 데이터그램 프로토콜(User Datagram Protocol)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UDP는 하얀 도화지에 비유할 수 있다.(기능이 거의 없음)&lt;/li&gt;
  &lt;li&gt;TCP의 3way handshake 같은 연결지향적인 기능이 없다.&lt;/li&gt;
  &lt;li&gt;데이터 전달 보증이 안된다.&lt;/li&gt;
  &lt;li&gt;순서 보장이 안된다.&lt;/li&gt;
  &lt;li&gt;하지만 구조가 단순하고 빠르다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UDP는 IP와 거의 같다고 보면 된다. 하지만 여기에 Port 정보와 체크섬 정보는 포함하고 있는게 차이점이다. 따라서 UDP를 사용하기 위해서는 애플리케이션에서 추가작업이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;port&quot;&gt;Port&lt;/h2&gt;

&lt;p&gt;TCP에 담기는 정보중에 Port가 있었다. port에 대해서 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-29-21-14-13.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;클라이언트가 게임, 화상통화, 웹 브라우저 각각 다른 프로그램들을 사용중이다. IP 프로토콜의 경우에는 요청을 보내도 IP만 적혀있어 어떤 프로그램에서 온 요청인지를 알 수 없다. 게임과 화상통화는 같은 서버를 공유하고 있어서 어느쪽으로 응답을 보내야될지 서버측에서 알 방법이 없다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-29-21-19-49.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 사진은 TCP와 IP 패킷을 합친 것이다. TCP/IP에는 출발지 PORT, 목적지 PORT가 포함되어 있는데 아이피 뒤에 :0000 방식으로 붙여져 있다. 프로그램마다 포트번호를 다르게 해서 어디서 온 요청인지 구분할 수 있게 해준다.&lt;/p&gt;

&lt;h3 id=&quot;port-특징-&quot;&gt;Port 특징 &lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;Port는 항구라는 뜻을 가지고 있다. IP가 아파트라면, Port는 동, 호수를 의미한다. 포트를 통해 어떤 애플리케이션에서 온 요청인지 구분짓고, 서버에스는 해당 포트로 다시 응답해주면 되어 데이터가 충될되지 않게 해준다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0 ~ 65535 할당 가능&lt;/li&gt;
  &lt;li&gt;0 ~ 1023 : 잘 알려진 포트로 사용하지 않는 것이 좋다.
    &lt;ul&gt;
      &lt;li&gt;FTP : 20, 21&lt;/li&gt;
      &lt;li&gt;TELNET : 23&lt;/li&gt;
      &lt;li&gt;HTTP : 80&lt;/li&gt;
      &lt;li&gt;HTTPS : 443&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dns-domain-name-system&quot;&gt;DNS (Domain Name System)&lt;/h2&gt;

&lt;p&gt;ip 주소는 숫자로 되어있어 기억하기가 어렵고 입력하기도 번거롭다. 또한 유동적인 ip를 사용할 경우에는 ip의 값이 변경될 수도 있다. 이렇게 될 경우 개발할 때 새로운 아이피 주소를 다시 작성해주어야 한다.&lt;/p&gt;

&lt;p&gt;이러한 단점을 보완하기위해 DNS가 등장하였다. DNS는 전화번호부라고 볼 수 있는데, IP 주소를 도메인 명으로 변환하는 시스템이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP_images/2021-10-29-21-27-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//http_basic_1</link>
        <guid isPermaLink="true">https://achasan.github.io//http_basic_1</guid>
        
        <category>SpringBoot</category>
        
        
      </item>
    
      <item>
        <title>[Spring:8] 빈 생명주기</title>
        <description>&lt;h1 id=&quot;빈-생명주기-콜백&quot;&gt;빈 생명주기 콜백&lt;/h1&gt;

&lt;p&gt;스프링 빈은 간단한 라이프사이클을 가진다&lt;/p&gt;

&lt;p&gt;객체 생성 &amp;gt; 의존관계 주입&lt;/p&gt;

&lt;p&gt;스프링 빈은 객체를 생성하고 의존관계 주입이 다 끝난 다음이 되야 필요한 데이터를 사용할 수 있는 준비가 완료된다. 초기화 작업은 의존관계 주입이 모두 완료되고 난 다음에 호출해야한다. 그렇다면 개발자가 의존관계 주입이 모두 완료된 시점을 어떻게 알 수 있을까?&lt;/p&gt;

&lt;p&gt;스프링은 의존관계 주입이 완료되면 스프링 빈에게 콜백메서드를 통해 초기화 시점을 알려주는 다양한 기능을 제공한다. 또한 스프링은 스프링 컨테이너가 종료되기 직전에 소멸 콜백을 준다. 따라서 안전하게 종료 작업을 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;빈 생명주기의 대표적인 예로는 DB connection Pool이 있다.&lt;/p&gt;

&lt;p&gt;※ DB Connection Pool :
어플리케이션 서버가 로딩될 때 DB연결을 미리 맺어놓는다. 10개~100개 정도의 연결객체를 연결해서 Pool에 저장해 놓고, 사용자가 요청할 때 연결객체를 전달한다음 close() 메서드가 호출될 때 다시 pool에 저장하는 방식.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스프링 빈의 이벤트 라이프 사이클&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;스프링 컨테이너 생성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스프링 빈 생성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;의존관계 주입(생성자 주입, 수정자 주입, 필드 주입…)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;초기화 콜백 : 빈이 생성되고 빈의 의존관계 주입이 완료된 후 호출&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;소멸 전 콜백 : 빈이 소멸되기 직전에 호출됨&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스프링 종료&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;” 객체의 생성과 초기화를 분리하자 “&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;단일책임원칙, 객체를 생성하는 생성자에는 메모리를 할당해서 객체를 생성하는 것에만 집중하도록 구현하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;객체가 초기화된다는 것은 객체가 동작한다는 것이다. 외부와 커넥션을 맺고 동작한다는 역할을 수행하는 것이다.
대부분의 경우에는 객체가 동작하도록 하는 행위는 별도의 초기화 메서드로 분리하도록 설계하는 것 유지보수관점에서 훨씬 좋다. 내부 값들을 간단하게 변경하는 정도로 단순한 경우에는 생성자에서 간단하게 처리하는 것이 더 나을 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;인터페이스-initializingbean-disposablebean&quot;&gt;인터페이스 InitializingBean, DisposableBean&lt;/h2&gt;

&lt;p&gt;인터페이스 InitializingBean, DisposableBean&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;InitializingBean : 추상메서드 afterPropertiesSet() 이 있다. 초기화 작업이 끝나면 실행될 코드를 작성할 수 있음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DisposableBean : 추상메서드 destroy()가 있음. 빈 생명주기가 끝날 때( 컨테이너에 있는 빈을 없앨 때) 호출되는 메서드&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;초기화, 소멸 인터페이스의 단점&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스프링 전용 인터페이스, 해당 코드가 스프링 전용 인터페이스에 의존하게 된다.&lt;/li&gt;
  &lt;li&gt;초기화, 소멸 메서드의 이름을 변경할 수 없다.&lt;/li&gt;
  &lt;li&gt;내가 코드를 고칠 수 없는 외부 라이브러리에 적용할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(인터페이스를 사용하는 초기화, 종료 방법은 스프링 초창기에 나온 방법들이고, 지금은 다음의 더 나은 방법들이 있어서 거의 사용하지 않는다. 무려 2003년에 나온 인터페이스이다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;빈-등록-초기화-소멸-메서드&quot;&gt;빈 등록 초기화, 소멸 메서드&lt;/h2&gt;

&lt;p&gt;인터페이스를 상속받지 않고 @Bean에 등록할 때 자동으로 초기화, destroy 메서드를 설정하는 방법이 있다.&lt;/p&gt;

&lt;p&gt;먼저 NetworkClient 메서드에 다음과 같이 메서드를 만들어 놓는다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NetworkClient.Init&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;초기화 연결 메세지&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NetworkClient.close()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 @Configuration 설정 클래스에 있는 @Bean 메서드에 다음과 같이 작성한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;init&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destroyMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NetworkClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;networkClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;NetworkClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;networkClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NetworkClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;networkClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://hello-spring.dev&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;networkClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@Bean으로 등록할 때 initMethod, destoryMethod를 작성하고 해당 메서드를 적용할 메서드 이름을 적어주면 된다.&lt;/p&gt;

&lt;p&gt;설정 정보 사용 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메서드 이름을 자유롭게 줄 수 있다.&lt;/li&gt;
  &lt;li&gt;스프링 빈이 스프링 코드에 의존하지 않는다.&lt;/li&gt;
  &lt;li&gt;코드가 아니라 설정 정보를 사용하기 때문에 코드를 고칠 수 없는 외부 라이브러리에도 초기화, 종료 메서드를 적용할 수 있다.(가장 큰 장점)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;@Bean의 destroyMethod 속성에는 특별한 기능이 있다. 라이브러리는 대부분 close, shutdown 이라는 이름의 종료 메서드를 주로 사용한다.&lt;/p&gt;

&lt;p&gt;@Bean의 destroyMethod는 기본값이 (inferred)로 등록되어있다. 이 추론기능은 close, shutdown라는 이름의 메서드를 자동으로 호출해준다. 종료메서드를 추론해서 호출하는 것이다.&lt;/p&gt;

&lt;p&gt;따라서 직접 스프링 빈으로 등록하면 종료메서드는 따로 적어주지 않아도 잘 동작하게 된다.&lt;/p&gt;

&lt;p&gt;따라서 위의 코드에서 destroyMethod를 작성하지 않아도 알아서 close 메서드를 추론하여 자동으로 실행시켜준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;생명주기-애노테이션-postconstruct-predestroy&quot;&gt;생명주기 애노테이션 @PostConstruct, @PreDestroy&lt;/h2&gt;

&lt;p&gt;@PostConstruct, @PreDestroy 애노테이션 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;최신 스프링에서 가장 권장하는 방법&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;애노테이션 하나만 붙이면 되므로 매우 편리&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;패키지를 보면 ‘javax.annotation.PostConstruct’이다. 스프링에 종속적이지 않고 JSR-250 이라는 자바 표준이다. 따라서 스프링이 아닌 다른 컨테이너에서도 동작한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컴포넌트 스캔과도 잘 어울린다. (@Bean을 등록하는 것이 아님)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;유일한 단점은 외부 라이브러리에는 적용하지 못한다는 것이다. 외부 라이브러리를 초기화, 종료 해야하면 @Bean의 기능을 사용하도록 하자.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[정리]&lt;/p&gt;

&lt;p&gt;@PostConstruct, @PreDestroy 애노테이션을 사용하자.&lt;/p&gt;

&lt;p&gt;코드를 고칠 수 없는 외부 라이브러리를 초기화, 종료해야하면 @Bean의 initMethod, destroyMethod를 사용하도록 하자.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://achasan.github.io//spring_basic_8</link>
        <guid isPermaLink="true">https://achasan.github.io//spring_basic_8</guid>
        
        <category>SpringBoot</category>
        
        
      </item>
    
  </channel>
</rss>