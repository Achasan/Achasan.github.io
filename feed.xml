<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://achasan.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://achasan.github.io/" rel="alternate" type="text/html" /><updated>2022-01-17T20:30:46+09:00</updated><id>https://achasan.github.io/feed.xml</id><title type="html">Memory Repo.</title><subtitle>by Achasan</subtitle><entry><title type="html">Toast ui Editor 사용하기</title><link href="https://achasan.github.io/toast_ui_1" rel="alternate" type="text/html" title="Toast ui Editor 사용하기" /><published>2022-01-06T00:00:00+09:00</published><updated>2022-01-06T00:00:00+09:00</updated><id>https://achasan.github.io/toast_ui_1</id><content type="html" xml:base="https://achasan.github.io/toast_ui_1">&lt;h1 id=&quot;위지윅-에디터-toast-ui-editor-사용법&quot;&gt;위지윅 에디터 Toast ui Editor 사용법&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;영화커뮤니티를 주제로 스프링 프로젝트를 진행중이다. 커뮤니티는 게시판 기능이 핵심이기 때문에 사용자가 게시글을 올리기 편하도록 기능을 구현하는데 중점을 맞춰야 한다고 생각한다.&lt;/p&gt;

&lt;p&gt;textarea 태그를 사용하여 게시글을 올리게 할 경우 텍스트만 올릴 수 있기 때문에 비효율적이다. 또한 글 크기나 굵기같은 수정이 안되기 때문에 불편하다.&lt;/p&gt;

&lt;p&gt;따라서 오픈소스 에디터로 눈길이 가게되었고, 여러가지 에디터중 Toast ui Editor를 사용해보기로 하였다.&lt;/p&gt;

&lt;p&gt;사실 오픈소스 에디터는 종류가 다양하다. 대표적인 위지윅 오픈소스 에디터로 CKEditor를 많이 사용하는 것 같았다. 여러 글을 찾아보니 확장성이 좋은 에디터인 것 같았지만 5.0으로 업데이트 되면서 에디터의 핵심기능이 유료로 전환되었다는 이야기가 많이 들리기도하고, 기능이 너무 많아서 난잡해보이는 생각이 들어서 내 스타일은 아니였다.&lt;/p&gt;

&lt;p&gt;그 와중에 Toast ui 에디터를 찾게 되었다. NHN에서 개발한 오픈소스 에디터로, 마크다운과 위지윅을 둘 다 지원하고, Viewer도 지원하기 때문에 작성한 글을 HTML태그로 쉽게 변환해주고, 또 작성된 글을 Viewer를 통해 손쉽게 게시글을 볼 수 있는 장점이 있었다.&lt;/p&gt;

&lt;p&gt;아무튼 이번 프로젝트를 통해 게시판 에디터 사용법을 알게되었으므로 기록하여 나중에 사용할 일이 생길 때 찾아볼 수 있도록 하는 것이 이번 글의 목적이 되겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;공식문서 가이드가 있으므로 &lt;a href=&quot;https://github.com/nhn/tui.editor/blob/master/docs/ko/getting-started.md&quot;&gt;여기&lt;/a&gt;에서 참고하도록 하자.&lt;/p&gt;

&lt;p&gt;먼저 CDN을 통해 에디터를 불러와야한다. Toast ui에서는 npm으로 사용하는 것을 권장하지만, 이번 프로젝트는 Spring/JSP를 사용하기 때문에 CDN으로 사용하기로 하였다.&lt;/p&gt;

&lt;p&gt;2021년 1월 6일 기준, 현재의 cdn 주소는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;editor를 불러오기 위해서는 HTML에 id가 editor인 div 태그를 생성한 후, 태그 바로 아래에 CDN을 입력해주어야한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;에디터를 사용하기 위해서는 제공하는 CSS도필요하다. 필자는 head태그 내부에 넣어주었다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor.min.css&quot;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CSS와 자바스크립트를 모두 불러왔다면, 이제 에디터를 띄워보자, 에디터는 자바스크립트 코드를 작성하여 불러올 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#editor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 작성했을 경우, 에디터를 볼 수 있게된다. 아래는 현재 프로젝트의 글쓰기 페이지에서 에디터를 띄운 모습이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/Tui_Editor/2022-01-08-22-53-52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아마 우측하단에 보이는 언어가 영어일 것이다. 에디터를 한국어로 설정하기 위해서는 CDN을 하나 더 가져와야 한다. 주소는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/i18n/ko-kr.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Editor를 한국어로 변경하기위해 작성한 JavaScript 문을 아래와 같이 수정한다. 지금까지 설명한 코드를 전부 합치면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor.min.css&quot;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/i18n/ko-kr.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#editor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ko-KR&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;일단 에디터를 불러오는 것과 한국어로 설정하는 것 까지는 완료되었다. 이제 에디터를 불러올 때 설정할 수 있는 옵션들을 알아보자.
전체적인 옵션은 &lt;a href=&quot;https://nhn.github.io/tui.editor/latest/ToastUIEditorCore&quot;&gt;여기&lt;/a&gt;에서 확인이 가능하다. 여기에서는 대표적인 옵션들을 알아본다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;height&lt;/code&gt; : 에디터의 높이를 설정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialEditType&lt;/code&gt; : Tui Editor는 마크다운과 위지윅을 지원한다. 에디터를 처음 불러왔을 때 입력방식을 정하는 옵션.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialValue&lt;/code&gt; : 에디터를 불러왔을 때 안에 입력될 내용을 해당 옵션을 통해 정할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt; : 에디터의 언어를 설정한다. 위에서 한국어 정보를 CDN으로 가져왔으므로 ‘ko-KR’를 입력하여 설정하였다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;placeholder&lt;/code&gt; : HTML의 placeholder와 역할이 동일하다. 에디터에 입력한 값이 없을 경우 밝은 회색으로 출력될 텍스트.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 옵션들을 가지고 에디터를 용도에 맞게 커스텀할 수 있다. 필자는 다음과 같이 작성하였다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toastui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#editor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;initialEditType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;wysiwyg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;내용을 입력해주세요&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;addImageBlobHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FormData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageUpload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ko-KR&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;개인적으로 자바스크립트가 HTML파일 안에서 길게 작성될 경우 지저분해 보일 수 있기 때문에 다른 파일로 빼낸 다음 import하여 사용하는 것을 추천한다. 해당 글에서 import하는 것은 생략한다.&lt;/p&gt;

&lt;p&gt;위에서 언급하지 않았지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hooks&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event&lt;/code&gt; 옵션은 에디터에서 사용자가 글을 작성할 때 특정한 이벤트가 발생할 경우에 작동하게할 수 있는 함수라고 보면 된다. 이는 다음 글 &lt;a href=&quot;https://achasan.github.io/toast_ui_2&quot;&gt;Toast ui Editor 이미지 업로드하기&lt;/a&gt;에서 자세히 다루도록 하겠다.&lt;/p&gt;</content><author><name>Achasan</name></author><category term="ETC" /><summary type="html">위지윅 에디터 Toast ui Editor 사용법</summary></entry><entry><title type="html">객체지향의 사실과 오해 3장 : 추상화</title><link href="https://achasan.github.io/OOP_3" rel="alternate" type="text/html" title="객체지향의 사실과 오해 3장 : 추상화" /><published>2022-01-02T00:00:00+09:00</published><updated>2022-01-02T00:00:00+09:00</updated><id>https://achasan.github.io/OOP_3</id><content type="html" xml:base="https://achasan.github.io/OOP_3">&lt;h1 id=&quot;객체지향의-사실과-오해-3장--타입과-추상화&quot;&gt;객체지향의 사실과 오해 3장 : 타입과 추상화&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;일단 컴퓨터를 조작하는 것이 추상화를 구축하고, 조작하고, 추론하는 것에 관한 모든 것이라는 것을 깨닫고 나면 컴퓨터 프로그램을 작성하기 위한 중요한 전제 조건은 추상화를 정확하게 다루는 능력이라는 것이 명확해진다. - 키스 데블린&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;현재 전 세계의 주요 대도시 지하에는 지하철이 거미줄처럼 도시 곳곳에 이어져있다. 승객들이 지하철을 큰 어려움없이 이용가능한 이유는 단순하고 직관적으로 연결되어있는 지하철 노선도가 있기 때문일 것이다. 전 세계 어디든 지하철 노선도는 형식이 유사하기 때문에 어떻게 지하철을 이용해야할지 어렵지 않게 정보를 얻을 수 있다.&lt;/p&gt;

&lt;p&gt;지하철을 이용하는 승객의 목적은 하나의 역에서 다른 역으로 이동하는 것이다. 승객이 원하는 것은 어떤 역에서 출발해야하는지, 어떤 역에서 환승해야하는지, 어떤 역을 거쳐야지 가장 쉽고 빠르게 목적지에 도착가능한지를 직관적이고 단순히 보여주는 것이다. 역과 역 사이의 연결성을 얼마나 직관적으로 표현하였는지가 중요할 뿐, 다른 정보는 크게 영향을 끼치지 않는다.&lt;/p&gt;

&lt;p&gt;초기의 지하철 노선도는 지형을 구체적으로 묘사함에 따라 현재의 단순한 지하철 노선도와는 거리가 멀었다. 역과 역 사이의 연결성을 한 눈에 알아보기 힘들었다.&lt;/p&gt;

&lt;p&gt;현재의 지하철 노선도는 해리 벡이 1933년에 고안하였으며, 이는 지도가 가져야하는 정확성을 버리고 지하철 노선도의 &lt;strong&gt;‘목적’&lt;/strong&gt;에 집중한 결과이다. 모든 역의 위치와 거리도 부정확하고 경로를 표시한 직선은 실제 지하철이 이동하는 경로와 상관이 없음에도 불구하고, 현재의 지하철 노선도는 승객들이 길을 찾을 때 가장 먼저 접하게 되는 중요한 정보이다. 해리 백은 지하철 노선을 &lt;strong&gt;추상화&lt;/strong&gt;함으로써 이해하고 쉽고 단순하며 목적에 부합하는 지하철 노선도를 만들어낼 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;추상화를-통한-복잡성-극복&quot;&gt;추상화를 통한 복잡성 극복&lt;/h2&gt;

&lt;p&gt;해리 백의 지하철 노선도는 단순함을 달성한 추상화의 훌륭한 예이다. 지형 정보를 제거하고 역 사이의 연결성을 강조하여 승객들의 목적에 맞게 현실을 단순화 하였다.&lt;/p&gt;

&lt;p&gt;진정한 의미의 추상화란 현실에서 출발하되 불필요한 부분을 도려내가며 사물의 본질을 드러나게 하는 과정이라고 할 수 있다. 추상화의 목적은 불필요한 부분을 무시함으로써 현실에 존재하는 복잡성을 극복하는 것이다.&lt;/p&gt;

&lt;p&gt;추상화는 다음과 같이 정의할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떤 양상, 세부사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;복잡성을 다루기 위해 추상화는 두 차원에서 이루어진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;구체적인 사물들 간의 공통점은 취하고 차이점은 버리는 일반화를 통해 단순하게 만드는 것&lt;/li&gt;
  &lt;li&gt;중요한 부분을 강조하기위해 불필요한 세부 사항을 제거함으로써 단순하게 만드는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;복잡성을 이해하기 쉬운 수준으로 단순화하는 것이 추상화의 목적이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;객체지향과-추상화&quot;&gt;객체지향과 추상화&lt;/h2&gt;

&lt;p&gt;이번엔 다시 앨리스의 이야기로 돌아와서 추상화의 예시를 살펴보도록 하자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;아름다운 정원으로 들어가게 된 앨리스는 세 명의 정원사를 마주친다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정원사들은 트럼프처럼 생겼고, 몸에는 스페이드 무늬가 그려져 있었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;갑자기 하트 여왕의 행렬이 정원으로 들어섰다. 세 명의 정원사는 땅바닥에 엎드렸다. 행렬의 맨 앞에는 클로버를 든 열 명의 병사들이 행진하여 들어왔다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그 뒤로는 온 몸을 반짝거리는 다이아몬드로 치장한 신하들이 열을 지어 들어왔다. 그 속에는 하얀 토끼도 섞여있었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;행렬의 마지막에는 하트 왕과 하트 여왕이 모습을 드러냈다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 여왕을 쳐다보며 속으로 생각했다. ‘기껏해야 트럼프에 불과해, 무서워할 필요 없어’&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앨리스는 이야기에 등장한 모든 객체들 중에 토끼를 제외한 나머지 객체들을 트럼프로 단순화하여 바라보고 있다. 트럼프 행렬의 객체들은 각자 독특한 모습을 하고 있으며, 독특한 행동양식을 가지고 있다. 하지만 이런 것들을 무시한 채 ‘트럼프’라는 유사성을 기반으로 추상화하여 바라보는 것이다.&lt;/p&gt;

&lt;p&gt;앨리스의 이야기에 등장하는 정원사, 병사, 신하, 왕자와 공주, 하객으로 참석한 왕과 왕비들, 하트 잭, 하트 왕과 하트 여왕은 서로의 특징이 다 다르고 서로를 쉽게 구분할 수 있다. 이 처럼 명확한 경계를 가지고 서로 구별할 수 있는 구체적인 사람이나 사물을 객체지향 패러다임에서는 객체라고 한다.&lt;/p&gt;

&lt;p&gt;우리가 이 다양한 객체(인물)들을 ‘트럼프’라고 줄일 수 있는 이유는 공통적으로 ‘트럼프’라고 했을 때 떠오르는 일반적인 외형과 행동방식을 지니고 있기 때문일 것이다. 여기서 토끼는 ‘트럼프’의 행동양식과 외형을 가지지 않기 때문에 ‘트럼프’에 포함되지 않는다.&lt;/p&gt;

&lt;p&gt;다수의 개별적인 인물이 아니라 ‘트럼프’와 ‘토끼’라는 도 개의 추상화를 통해 정원을 바라보는 것은 정원의 내재된 복잡성을 효율적으로 감소시킨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;개념&quot;&gt;개념&lt;/h2&gt;

&lt;p&gt;수 많은 객체들을 개별적인 단위로 취급하기에 인간이 지닌 인지능력은 턱없이 부족하다. 따라서 인간은 본능적으로 공통적인 특성을 기준으로 객체를 여러 그룹으로 묶어 상황을 단순화 하려고 노력한다.&lt;/p&gt;

&lt;p&gt;이 처럼 공통점을 기반으로 객체들을 묶기 위한 그릇을 &lt;strong&gt;개념(concept)&lt;/strong&gt;이라고 한다. 개념이란 일반적으로 우리가 인식하고 있는 다양한 사물이나 객체에 적용할 수 있는 아이디어나 관념을 뜻한다.&lt;/p&gt;

&lt;p&gt;개념을 이용하면 객체를 여러 그룹으로 &lt;strong&gt;분류(classification)&lt;/strong&gt;할 수 있다. 앨리스가 정원에 존재하는 객체를 ‘트럼프’와 ‘토끼’로 나눈 것 처럼, 공통점을 기반으로 객체를 분류할 수 있는 일종의 체라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;객체에 어떤 개념을 적용하는 것이 가능해서 개념 그룹의 일원이 될 때 객체를 그 개념의 &lt;strong&gt;인스턴스(instance)&lt;/strong&gt;라고 한다. 따라서 객체를 다음과 같이 정의할 수도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체란 특정한 개념을 적용할 수 있는 구체적인 사물을 의미한다. 개념이 객체에 적용됐을 때 객체를 개념의 인스턴스라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;개념의-세-가지-관점&quot;&gt;개념의 세 가지 관점&lt;/h3&gt;

&lt;p&gt;일반적으로 객체의 분류 장치로서 개념을 이야기 할 때는 아래의 세 가지 관점을 함께 언급한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;심볼(symbol) : 개념을 가리키는 간략한 이름이나 명칭&lt;/li&gt;
  &lt;li&gt;내연(intension) : 개념의 완전한 정의를 나타내며, 내연의 의미를 이용해 객체가 개념에 속하는지 여부를 확인할 수 있다.&lt;/li&gt;
  &lt;li&gt;외연(extension) : 개념에 속하는 모든 객체의 집합(set)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‘트럼프’는 심볼이 되고, 몸이 납작하고 두 손 두 발이 네모난 몸 모서리에 달려 있다는 트럼프에 대한 설명이 내연, 정원사, 병사, 신하, 왕자와 공주, 하객으로 참석한 왕과 왕비들, 하트 잭, 하트 왕과 하트 여왕은 모두 트럼프의 외연을 구성하는 객체 집합에 속한다.&lt;/p&gt;

&lt;p&gt;심볼, 내연, 외연은 객체의 분류 방식에 대한 지침을 제공한다. 이 개념을 이용해 객체를 &lt;strong&gt;분류할 수 있다는 사실&lt;/strong&gt;이 중요하다. 이는 객체지향 패러다임이 복잡성을 극복하는 데 사용하는 가장 기본적인 인지 수단이기 때문이다.&lt;/p&gt;

&lt;h3 id=&quot;객체를-분류하기-위한-틀&quot;&gt;객체를 분류하기 위한 틀&lt;/h3&gt;

&lt;p&gt;어떤 객체와 마주했을 때 객체에게 적용할 개념을 결정하는 것은 해당 객체를 개념이 적용된 객체 지합의 일원으로 맞아들인다는 것을 의미한다. 앨리스의 이야기에서 트럼프라고 지칭한 객체들은 트럼프라는 개념을 적용할 수 있는 객체의 집합에 속하게 된다.&lt;/p&gt;

&lt;p&gt;객체에 어떤 개념을 적용할 것인지를 결정하는 것은 결국 객체들을 개념에 따라 분류하는 것과 동일하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;분류란 객체에 특정한 개념을 적용하는 작업이다. 객체에 특정한 개념을 적용하기로 결심했을 때 우리는 그 객체를 특정한 집합의 멤버로 분류하고 있는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;객체를 적절한 개념에 따라 분류하지 못한 애플리케이션은 유지보수가 어렵고 변화에 쉽게 대처하지 못한다. 중요한 것은 적절한 분류 체계는 애플리케이션을 다루는 개발자의 머릿속에 객체를 쉽게 찾고 조작할 수 있는 정신적인 지도를 제공한다는 것이다. 따라서 최대한 직관적으로 객체를 분류하는 것이 중요하다.&lt;/p&gt;</content><author><name>Achasan</name></author><category term="ETC" /><summary type="html">객체지향의 사실과 오해 3장 : 타입과 추상화</summary></entry><entry><title type="html">객체지향의 사실과 오해 3장 : 타입</title><link href="https://achasan.github.io/OOP_4" rel="alternate" type="text/html" title="객체지향의 사실과 오해 3장 : 타입" /><published>2022-01-02T00:00:00+09:00</published><updated>2022-01-02T00:00:00+09:00</updated><id>https://achasan.github.io/OOP_4</id><content type="html" xml:base="https://achasan.github.io/OOP_4">&lt;h1 id=&quot;객체지향의-사실과-오해-3장--타입과-추상화&quot;&gt;객체지향의 사실과 오해 3장 : 타입과 추상화&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 글은 이전에 올린 글을 이어서 작성한 것이다. &lt;a href=&quot;https://achasan.github.io/oop_3&quot;&gt;(링크)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;타입&quot;&gt;타입&lt;/h2&gt;

&lt;p&gt;타입의 정의는 개념의 정의와 완전히 동일하다. 타입은 공통점을 기반으로 객체들을 묶기 위한 틀이다. 타입은 개념과 마찬가지로 심볼, 내연, 외연을 이용해 서술할 수 있고, 타입에 속하는 객체 역시 타입의 인스턴스라고 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;타입은 개념과 동일하다. 따라서 타입이란 우리가 인식하고 있는 다양한 사물이나 객체에 적용할 수 있는 아이디어나 관념을 의미한다. 어떤 객체에 타입을 적용할 수 있을 때 그 객체를 타입의 인스턴스라고 한다. 타입의 인스턴스는 타입을 구성하는 외연인 객체 집합의 일원이 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;컴퓨터가 어떤 작업을 수행하기 위해서는 작업에 필요한 데이터를 메모리 안으로 불러들여야 한다. 메모리에 불러들여진 데이터들은 무수히 많은 0과 1로 치장되어 메모리에 저장된다. 실제로 메모리 안에는 무수히 많은 0과 1의 행렬만이 존재한다. 사람이 이를 구별하기 위해서는 엄청난 시행착오를 각오해야할 것이다.&lt;/p&gt;

&lt;p&gt;이로인해 사람들은 메모리 안의 데이터에 특정한 의미를 부여하기 시작했다. 데이터에 사칙연산이 가능하다면 숫자형, 여러 문자로 구성되어있고 다른 문자와 연결될 수 있으면 문자열형으로 분류하였다. 참/거짓을 이야기할 수 있는 데이터는 논리형으로 분류했다.&lt;/p&gt;

&lt;p&gt;데이터를 목적에 따라 분류하기 시작하면서 타입 시스템(type system)이 자라나기 시작했다. 데이터를 분류함으로써 그 데이터에 제약사항을 부과한 것이다. 이를 통해 두 가지 중요한 사실을 알 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;타입은 데이터가 어떻게 사용되느냐에 관한 것이다. 숫자형 데이터가 사칙연산이 가능하기 때문에 분류한 것이고, 문자열형은 두 문자를 연결할 수 있는 데이터이기에 문자열형으로 분류한 것이다. 어떤 데이터에 어떤 연산자를 적용할 수 있느냐가 그 데이터의 타입을 결정하는 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;타입에 속한 데이터를 메모리에 어떻게 표현하는지는 외부로부터 철저하게 감춰진다. 데이터 타입의 표현은 연산 작업을 수행하기에 가장 효과적인 형태가 선택되며, 개발자는 해당 데이터 타입의 표현 방식을 몰라도 데이터를 사용하는 데 지장이 없다. 개발자는 해당 데이터 타입을 사용하기 위해 단지 데이터 타입에 적용할 수 있는 연산자만 알고 있으면 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 책에서는 데이터 타입을 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터 타입은 메모리 안에 저장된 데이터의 종류를 분류하는데 사용하는 메모리 집합에 관한 메타데이터이다. 데이터에 대한 분류는 암시적으로 어떤 종류의 연산이 해당 데이터에 대해 수행될 수 있는지를 결정한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;객체와-타입&quot;&gt;객체와 타입&lt;/h3&gt;

&lt;p&gt;객체지향 프로그램을 작성할 때 우리는 객체를 일종의 데이터처럼 사용한다. 따라서 객체를 타입에 따라 분류하고 그 타입에 이름을 붙이는 것은 결국 프로그램에서 사용하 새로운 데이터 타입을 선언하는 것과 같다.&lt;/p&gt;

&lt;p&gt;그렇지만 객체는 데이터가 아니다. 객체에서 중요한 것은 객체의 행동이다. 상태는 행동의 결과로 초래된 부수효과를 쉽게 표현하기 위해 도입한 추상적인 개념일 뿐이다. 즉, 객체가 협력을 위해 어떤 책임을 지녀야 하는지를 결정하는 것이 객체지향 설계의 핵심이다.&lt;/p&gt;

&lt;p&gt;따라서 앞에서 데이터 아입에 관해 언급했던 두 가지 조언은 객체의 타입을 이야기할 떄도 동일하게 적용되어진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 객체가 어떤 타입에 속하는지를 결정하는 것은 그 객체가 수행하는 행동이다. 어떤 객체들이 동일한 행동을 수행할 수 있다면 그 객체들은 동일한 타입으로 분류될 수 있다.&lt;/li&gt;
  &lt;li&gt;객체의 내부적인 표현은 외부로부터 철저하게 감춰진다. 객체의 행동을 가장 효과적으로 수행할 수 만 있따면 객체 내부의 상태를 어떤 방식으로 표현하더라도 무방하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;행동이-우선이다&quot;&gt;행동이 우선이다.&lt;/h3&gt;

&lt;p&gt;결론적으로 객체의 타입을 결정하는 것은 객체의 행동뿐이다. 객체가 어떤 데이터를 보유하고 잇는 지는 타입을 결정하는 데 아무런 영향을 미치지 않는다.&lt;/p&gt;

&lt;p&gt;같은 타입에 속한 객체는 행동만 동일하다면 서로 다른 데이터를 가질 수 있다. 여기서 동일한 행동은 동일한 책임을 의미하고, 동일한 채김이란 동일한 메시지 수신을 의미한다. 다만 내부의 표현 방식이 다르기 떄문에 동일한 메시지를 처리하는 방식은 서로 다를 수밖에 없다. 이것은 다형성에 의미를 부여한다.&lt;/p&gt;

&lt;p&gt;다형성이란 동일한 요청에 대해 서로 다른 방식으로 응답할 수 있는 능력을 뜻한다. 동일한 메시지를 서로 다른 방식으로 처리하기 위해서는 객체들은 동일한 메시지를 수신할 수 있어야하기 떄문에 결과적으로 다형적인 객체들은 동일한 타입에 속하게 된다.&lt;/p&gt;

&lt;p&gt;행동만이 고려 대상이라는 사실은 외부에 데이터를 감춰야 한다는 것을 의미한다. 훌륭한 객체지향 설계는 외부에 행동만을 제공하고 데이터는 행동 뒤로 감춰야 한다. 이 원칙을 흔히 캡슐화라고 한다. 데이터가 캡슐의 벽을 뚫고 객체의 인터페이스를 오염시키는 순간 객체의 분류 체계는 급격히 위험에 노출되고 결과적으로 유연하지 못한 설계를 낳게 된다.&lt;/p&gt;

&lt;h3 id=&quot;일반화특수화-관계&quot;&gt;일반화/특수화 관계&lt;/h3&gt;

&lt;p&gt;타입과 타입 사이에는 일반화/특수화 관계가 존재할 수 있다. 앨리스가 트럼프 행렬에서 나온 객체들을 토끼를 제외하고 ‘트럼프’라고 칭했지만 사실 해당 객체들은 엄밀히 말하면 ‘트럼프 인간’이다. 트럼프 인간은 트럼프보다 특화된 행동을 하는 특수한 개념이다.&lt;/p&gt;

&lt;p&gt;일반화와 특수화는 동시에 일어난다. 트럼프 인간은 트럼프를 좀 더 특수하게 표현한 것이다. 더 특수하다는 것은 일반적인 개념보다 범위가 더 좁다는 것을 의미하므로 트럼프 인간에 속하는 객체는 트럼프에 속하는 객체보다 그 수가 적을 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;특수한 개념을 포괄하는 트럼프 인간은 일반적인 개념을 표현하는 트럼프의 부분집합이 된다. 여기서도 중요한 점은 일반화/특수화 관계를 결정하는 것이 객체의 상태를 표현하는 데이터가 아니라 행동이라는 것이다.&lt;/p&gt;

&lt;p&gt;특수한 타입이란 일반적인 타입이 가진 모든 타입을 포함하지만 거기에 더해 자신만의 행동을 추가하는 타입을 가리킨다. 따라서 일반적인 타입은 특수한 타입보다 더 적은 수의 행동을 가지고 특수한 타입은 일반적인 타입보다 더 많은 수의 행동을 가진다.&lt;/p&gt;

&lt;h3 id=&quot;슈퍼타입과-서브타입&quot;&gt;슈퍼타입과 서브타입&lt;/h3&gt;

&lt;p&gt;일반화/특수화의 관계는 좀 더 일반적인 한 타입과 좀 더 특수한 한 타입 간의 관계이다. 이 때 좀 더 일반적인 타이블 슈퍼타입(Supertype)이라고 하고, 좀 더 특수한 타입을 서브타입(Subtype)이라고 한다.&lt;/p&gt;

&lt;p&gt;일반적으로 서브타입은 슈퍼타입의 행위와 호환되기 때문에 서브타입은 슈퍼타입을 대체할 수 있어야한다. 즉, 트럼프 인간은 트럼프이므로 엎드리거나 뒤집어지기만 하는 경우에는 트럼프를 대체하더라도 무방할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mindock.github.io/assets/images/oop_generalization_specialization.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반화/특수화의 관계를 표기할 때는 서브타입을 하단에 위치시키고 속이 빈 삼각형으로 연결하여 표현한다. 이 때 서브타입에서는 슈퍼타입과 중복된 행위를 행략할 수 있다. 서브 타입은 슈퍼타입의 행위에 추가적으로 특수한 자신만의 행동을 추가하는 것이므로, 슈퍼타입의 행동은 서브타입에게 자동으로 상속된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;타입의-목적&quot;&gt;타입의 목적&lt;/h2&gt;

&lt;p&gt;타입을 사용하는 이유는 무엇일까? 타입은 인간의 인지능력으로 시간에 따라 동적으로 변화하는 객체의 복잡성을 극복하기위해 사용한다.&lt;/p&gt;

&lt;p&gt;앨리스의 상태는 행동에 따라 시시각각 변한다. 앨리스의 상태는 계속 변화하지만 모든 경우 앨리스는 단지 앨리스일 뿐이다. 앨리스를 다른 객체와 구별할 수 있는 식별성은 동일하게 유지된다. 따라서 앨리스의 상태가 임의의 값을 가지고 변화한다는 사실만 생각하여 상황을 단순하게 만들 수 있다.&lt;/p&gt;

&lt;p&gt;타입은 시간에 따라 동적으로 변하는 앨리스의 상태를 시간과 무관한 정적인 모습으로 다룰 수 있게 해준다. 앨리스의 상태에 시간이라는 복잡성을 제거하여 독립적인 정적인 모습으로 앨리스를 생각할 수 있게 해준다.&lt;/p&gt;

&lt;h3 id=&quot;결국-타입은-추상화다&quot;&gt;결국 타입은 추상화다&lt;/h3&gt;

&lt;p&gt;이러한 관점에서 타입은 추상화이다. 어떤 시점에 앨리스에 관해 생각할 때 불필요한 시간이라는 요소와 상태 변화라는 요소를 제거하거 철저하게 정적인 관점에서 앨리스의 모습을 묘샇는 것을 가능하게 해준다.&lt;/p&gt;

&lt;p&gt;타입은 추상화다. 타입을 이용하면 객체의 동적인 특성을 추상화 할 수 있다. 결국 타입은 시간에 딸느 객체의 상태 변겨잉라는 복잡성을 단순화 할 수 잇는 효과적인 방법인 것이다.&lt;/p&gt;

&lt;h3 id=&quot;동적-모델과-정적-모델&quot;&gt;동적 모델과 정적 모델&lt;/h3&gt;

&lt;p&gt;객체를 생각할 때 우리는 두 가지 모델을 동시에 고려한다는 사실을 알 수 있다.&lt;/p&gt;

&lt;p&gt;하나는 객체가 특정 시점에 구체적으로 어떤 상태를 가지느냐이다. 이를 객체의 &lt;strong&gt;스냅샷(snapshot)&lt;/strong&gt;이라고 한다. 객체지향 모델링을 위한 표준 언어인 UML에서 스냅샷은 객체 다이어그램(object diagram)이라고도 불린다. 스냅샷처럼 실제로 객체가 살아움직이는 동안 상태가 어떻게 변하고 어떻게 행동하는지를 포착하는 것을 동적모델 이라고 한다.&lt;/p&gt;

&lt;p&gt;다른 하나는 객체가 가질 수 잇는 모든 상태와 모든 행동을 시간에 독립적으로 표현하는 것이다. 이런 모델을 &lt;strong&gt;타입 모델(type diagram)&lt;/strong&gt;이라고 한다. 이 모델은 동적으로 변하는 객체의 상태가 아니라 객체가 속한 타입의 정적인 모습을 표현하기 때문에 정적 모델이라고도 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;객체를 분류하는 기준은 타입이며, 타입을 나누는 기준은 객체가 수행하는 행동이라는 사실을 기억하자. 객체를 분류하기 위해 타입을 결정한 후 프로그래밍 언어를 이용해 타입을 구현할 수 있는 한 가지 방법이 클래스라는 사실을 아는 것으로 충분하다.&lt;/p&gt;

&lt;p&gt;결국 객체지향에서 중요한 것은 동적으로 변하는 객체의 상태와 상태를 변경하는 행위이다. 클래스는 타입을 구현하기 위해 프로그래밍 언어에서 제공하는 구현 메커니즘이 된다.&lt;/p&gt;</content><author><name>Achasan</name></author><category term="ETC" /><summary type="html">객체지향의 사실과 오해 3장 : 타입과 추상화</summary></entry><entry><title type="html">객체지향의 사실과 오해 2장 : 상태</title><link href="https://achasan.github.io/OOP_2" rel="alternate" type="text/html" title="객체지향의 사실과 오해 2장 : 상태" /><published>2022-01-01T00:00:00+09:00</published><updated>2022-01-01T00:00:00+09:00</updated><id>https://achasan.github.io/OOP_2</id><content type="html" xml:base="https://achasan.github.io/OOP_2">&lt;h1 id=&quot;객체지향의-사실과-오해-2장--상태&quot;&gt;객체지향의 사실과 오해 2장 : 상태&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체지향 패러다임은 지식을 추상화하고 추상화한 지식을 객체 안에 캡슐화함으로써 실세계 문제에 내재된 복잡성을 관리하려고 한다. 객체를 발견하고 창조하는 것은 지식과 행동을 구조화하는 문제다. - 레베카 워프스브록&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2장에서의 핵심은 &lt;strong&gt;객체지향의 패러다임이 현실세계를 모방하는 것이 아닌 현실세계를 기반으로 새로운 세계를 창조하는 것&lt;/strong&gt;이다. 객체의 상태와 행동을 통해 여러 객체들이 서로 협력하며 하나의 목표를 달성하는 원리들을 설명하면서, 현실과 객체지향의 차이점을 보여주어 어떻게 소프트웨어를 설계해야하는지 방향을 제시해준다.&lt;/p&gt;

&lt;p&gt;이를 설명하기위해 글쓴이는 이상한 나라의 앨리스를 예시로 들어 설명한다. 요약하자면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 아름다운 정원을 발견했다. 정원에 들어가는 문이 40센티미터 이하여서 들어갈 수 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 주변에 ‘마셔라’가 적혀있는 병에있는 액체를 마시자 키가 24센티미터로 줄어들었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정원으로가는 문을 열려면 열쇠를 사용해야한다. 너무 작아져서 열쇠를 사용할 수 없게되었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이번엔 탁자 아래 케이크가 있어서 먹었더니 몸이 천장에 닿을만큼 훨씬 커지게되었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 때 주변을 지나가던 토끼가 놀라 부채를 떨어뜨렸다. 앨리스는 더워서 부채를 부쳤는데 키가 60센티미터로 다시 줄었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주변을 걸어가던 앨리스는 쐐기벌레를 만난다. 쐐기벌레는 버섯을 하나 주는데, 한쪽을 먹으면 크기가 작아지고, 반대쪽을 먹으면 크기가 커지는 버섯이었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 지금까지 얻은 물건을 통해 몸의 크기를 조절해 문을 열고 아름다운 정원으로 들어갔다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;앨리스-객체&quot;&gt;앨리스 객체&lt;/h2&gt;

&lt;p&gt;위의 이야기에서 주목해야할 점은 앨리스의 키의 변화이다. 정원으로 들어가기 위한 조건을 충족시키기위해 시간의 흐름에 따라 앨리스의 &lt;strong&gt;상태&lt;/strong&gt;는 바뀌게 된다. 앨리스의 상태를 변화시키는 것은 앨리스의 &lt;strong&gt;행동&lt;/strong&gt;이다. 버섯을 먹고, 음료수를 마시고, 부채질을 하고, 케이크를 먹으면서 앨리스의 키, 즉 상태는 변화한다.&lt;/p&gt;

&lt;p&gt;또한 앨리스의 행동으로 앨리스의 키가 커지거나 작아지게되는데, 행동을 하기 전에 앨리스의 키가 얼마였느냐가 행동 후의 앨리스의 상태를 결정하게된다. &lt;strong&gt;앨리스가 한 행동의 결과는 앨리스의 상태에 의존적이다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;앨리스의 행동으로 상태가 변화하게되고, 아름다운 정원으로 들어가기위해 앨리스는 적절한 행동을 통해 문을 통과할 수 있는 상태를 만들어야할 것이다. 이는 행동 간의 순서가 중요하다는 것을 의미한다. 문을 통과하려면 케이크나 음료수를 마시는 행동이 선행되어야한다.&lt;/p&gt;

&lt;p&gt;그렇다면 지금까지의 내용을 정리해보자. 지금까지의 내용이 객체와 중요한 공통점을 공유하게될 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 상태를 가지며 상태는 변경가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;앨리스의 상태를 변경시키는 것은 앨리스의 행동이다.
    &lt;ul&gt;
      &lt;li&gt;행동의 결과는 상태에 의존적이고, 상태를 이용해 서술가능하다.&lt;/li&gt;
      &lt;li&gt;행동의 순서가 결과에 영향을 미친다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;앨리스는 어떤상태에 있더라도 유일하게 식별 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;객체--상태와-행동&quot;&gt;객체 : 상태와 행동&lt;/h2&gt;

&lt;p&gt;객체의 다양한특성을 효과적으로 설명하기 위해서는 객체를 상태, 행동, 식별자를 지닌 식체로 보는 것이 가장 효과적이다. 이 책에서는 객체를 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체란 식별가능한 개체 또는 사물이다. 객체는 자동차처럼 만질 수 있는 구체적인 사물일 수도 있고, 시간처럼 추상적인 개념일 수도 있다. 객체는 구별가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가진다. 소프트웨어 안에서 객체는 저장된 상태와 실행가능한 코드를 통해 구현된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;상태&quot;&gt;상태&lt;/h3&gt;

&lt;p&gt;객체가 주변 환경과의 상호작용에 어떻게 반응하는가는 그 시점까지 객체에 어떤 일이 발생했느냐에 좌우된다. 예를 들면 비행기를 타기 위해서는 항공권을 발권해야한다. 없다면 비행기를 탈 수 없고, 있다면 탈 수 있게될 것이다. 비행기를 발권여부에 대한 행동이 비행기 탑승에 영향을 미친다.&lt;/p&gt;

&lt;p&gt;과거에 발생한 행동의 이력을 통해 현재 발생한 행동의 결과를 판단하는 방식은 복잡하고 번거로우며, 이해하기 쉽지 않다. 이를 단순하게 하기위해 &lt;strong&gt;상태&lt;/strong&gt;라는 개념을 만들게 된다. 위의 예시로 따지자면 항공권 소유여부를 상태로 만들어 이전에 비행기를 발권하는 행동을 했는지 설명과 예측이 가능해진다.&lt;/p&gt;

&lt;p&gt;상태를 사용하면 과거에 얽매이지 않을 수 있다. 세상의 복잡성을 완화하고 인지 과부화를 줄이는 중요한 개념이다.&lt;/p&gt;

&lt;h3 id=&quot;상태와-프로퍼티&quot;&gt;상태와 프로퍼티&lt;/h3&gt;

&lt;p&gt;모든 것을 객체로 표현할 수는 없다. 앨리스의 키는 객체가 아니다. 음료와 케이크의 양은 객체가 아니다. 상태로 표현되는 것들이다. 이러한 단순한 값들은 객체가 아니지만 객체의 상태를 표현하는 중요한 수단이 된다.&lt;/p&gt;

&lt;p&gt;때로는 객체를 사용해 다른 객체의 상태를 표현해야할 수도 있다. 가장 간단하고 직관적이 방법은 앨리스의 상태 일부를 음료라는 객체를 이용해 표현하는 것이다. 앨리스가 음료를 들고 있을 경우 음료 객체를 상태로 표현하여 앨리스가 음료를 들고 있는 상태임을 나타내게할 수 있다.&lt;/p&gt;

&lt;p&gt;앨리스가 음료를 들고 있게될 경우, 앨리스와 음료 객체는 서로 연결되게된다.&lt;/p&gt;

&lt;p&gt;결론적으로 모든 객체의 상태는 단순한 값과 객체의 조합으로 표현되며, 객체의 상태를 구성하는 모든 특징을 통틀어 객체의 &lt;strong&gt;프로퍼티(property)&lt;/strong&gt;라고한다. 일반적으로 프로퍼티는 변경되지 않고 고정되기 때문에 ‘정적’이다. 하지만 &lt;strong&gt;프로퍼티 값(property value)&lt;/strong&gt;은 시간의 흐름에 따라 변경되어 ‘동적’이다.&lt;/p&gt;

&lt;p&gt;앨리스가 음료를 들고 있을 경우 두 객체는 서로 연결되어있다. 앨리스가 음료를 마시게 될 경우, 앨리스는 음료를 마셨다는 메시지를 음료 객체에 전달하게되고, 음료 객체는 이에 따라 상태를 변화시킬 것이다. 객체와 객체사이의 의미 있는 연결을 &lt;strong&gt;링크(link)&lt;/strong&gt;라고 한다.&lt;/p&gt;

&lt;p&gt;링크와 달리 객체를 구성하는 단순한 값은 &lt;strong&gt;속성(attribute)&lt;/strong&gt;이라고 부른다. 앨리스의 키, 음료수의 양은 단순한 값으로 표현되므로 속성이다.&lt;/p&gt;

&lt;p&gt;객체의 상태를 정의해보자, 이 책에서는 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;상태는 특정 시점에 객체가 가지고 있는 정보의 집합으로 객체의 구조적인 특징을 표현한다. 객체의 상태는 객체에 존재하는 정적인 프로퍼티와 동적인 프로퍼티 값으로 구성된다. 객체의 프로퍼티는 단순한 값과 다른 객체를 참조하는 링크로 구분할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Achasan</name></author><category term="ETC" /><summary type="html">객체지향의 사실과 오해 2장 : 상태</summary></entry><entry><title type="html">객체지향의 사실과 오해 2장 : 행동, 캡슐화, 식별자</title><link href="https://achasan.github.io/OOP_3" rel="alternate" type="text/html" title="객체지향의 사실과 오해 2장 : 행동, 캡슐화, 식별자" /><published>2022-01-01T00:00:00+09:00</published><updated>2022-01-01T00:00:00+09:00</updated><id>https://achasan.github.io/OOP_3</id><content type="html" xml:base="https://achasan.github.io/OOP_3">&lt;h1 id=&quot;객체지향의-사실과-오해-2장--행동-캡슐화-식별자&quot;&gt;객체지향의 사실과 오해 2장 : 행동, 캡슐화, 식별자&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 글은 이전 글에 이어서 작성된 글이다. &lt;a href=&quot;https://achasan.github.io/oop_2&quot;&gt;(객체지향의 사실과 오해 2장 : 상태)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;행동&quot;&gt;행동&lt;/h2&gt;

&lt;p&gt;객체의 상태는 행동에 의해서 바뀐다. 객체의 상태를 변경하는 것은 객체의 자발적인 행동 뿐이다.&lt;/p&gt;

&lt;p&gt;객체가 취하는 행동은 객체 자신의 상태를 변경시킨다. 행동에 의해 상태가 변경되는 것은 행동이 부수효과(side effect)를 초래하는 것을 의미한다. 앨리스가 케이크를 먹는 행동은 앨리스의 키를 작게 변화시키는 부수효과를 초래한다.&lt;/p&gt;

&lt;p&gt;객체의 행동은 객체의 상태를 변경시키지만 행동의 결과는 객체의 상태에 의존적이다. 음료를 마시는 행동의 결과가 앨리스의 키에 의존한다는 것을 생각해 보면 될 것이다. 앨리스가 아름다운 정원으로 들어가기위해 문을 통과할 수 있는 지는 앨리스의 키가 현재 몇 센티미터 인지에 달려 있다. 앨리스의 키가 문보다 크다면 문을 통과할 수 없을 것이다.&lt;/p&gt;

&lt;p&gt;따라서 상태와 행동 사이에는 다음과 같은 관계가 있음을 알 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체의 행동은 상태에 영향을 받는다.&lt;/li&gt;
  &lt;li&gt;객체의 행동은 상태를 변경시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위는 다음과 같이 표현할 수도 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상호작용이 현재의 상태에 어떤 방식으로 의존하는가&lt;/li&gt;
  &lt;li&gt;상호작용이 어떻게 현재의 상태를 변경시키는가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앨리스의 이야기를 예시로 들면 아래와 같이 설명이 가능하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앨리스의 키가 40센티미터 이하라면 문을 통과할 수 있다.&lt;/li&gt;
  &lt;li&gt;문을 통과한 후에 앨리스의 위치는 아름다운 정원으로 바뀌어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;상태를 사용하면 복잡한 객체의 행동을 쉽게 이해할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;협력과-행동&quot;&gt;협력과 행동&lt;/h2&gt;

&lt;p&gt;객체는 자신에게 주어진 책임을 완수하기위해 다른 객체를 이용하고 다른 객체에게 서비스를 제공한다. 어떤 객체도 섬이 아니다. 객체는 서로 상호작용하며 협력하는 객체들의 공동체에 참여하기위해 노력한다.&lt;/p&gt;

&lt;p&gt;객체는 서로 메시지를 통해서만 의사소통이 가능하다. 객체는 수신한 메시지에 따라 행동하면서 협력에 참여하고, 자신의 상태를 변경시킨다. 또한 다른 객체의 상태 변화를 유발하기도 한다. 앨리스가 음료수를 마시면 자신의 키가 줄어들지만 음료 객체에 양을 감소시키라는 메시지를 전달하는 것처럼말이다. 메시지를 받은 음료 객체는 메시지에 따라 적절히 자신의 상태를 변경시킨다.&lt;/p&gt;

&lt;p&gt;이를 정리하면 객체의 행동은 두 가지 관점의 부수효과를 명확히 서술해야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체 자신의 상태를 변경&lt;/li&gt;
  &lt;li&gt;행동 내에서 협력하는 다른 객체에 대한 메시지를 전송&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제 행동을 정의해보자. 이 책에서는 행동을 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;행동이란 외부의 요청 또는 수신된 메시지에 응답하기 위해 동작하고 반응하는 활동이다. 행동의 결과로 객체는 자신의 상태를 변경하거나 다른 객체에게 메시지를 전달할 수 있다. 객체는 행동을 통해 다른 객체와의 협력에 참여하므로 행동은 외부에 가시적이어야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;상태-캡슐화&quot;&gt;상태 캡슐화&lt;/h2&gt;

&lt;p&gt;현실 세계의 객체와 객체지향 세계의 객체 사이에는 중요한 차이점이 있는데, 바로 객체는 &lt;strong&gt;능동적인 존재&lt;/strong&gt;라는 것이다. 현실 세계에서의 음료 객체는 혼자서는 아무것도 하지 못하는 수동적인 존재이다. 음료의 상태를 변경시키는 주체는 음료를 마시는 사람, 앨리스가 될 것이다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;strong&gt;객체지향 세계에서는 모든 객체가 능동적&lt;/strong&gt;이다. 스스로 자신의 상태를 자율적으로 관리한다. 따라서 이전부터 설명했지만, 객체가 다른 객체의 상태를 직접적으로 변경하는 것이 아닌, 메시지를 전달하기만 할 뿐 그 다음은 신경쓰지 않는다. 메시지를 전달받은 객체가 능동적으로 자신의 상태를 변경할 뿐이다.&lt;/p&gt;

&lt;p&gt;앨리스가 음료를 마시면, 앨리스 객체는 음료 객체에 자신이 먹은 음료의 양 만큼 상태를 변경하라는 메시지를 보낸다. 음료의 양을 줄일지 말지는 음료 객체가 결정할 사항이며, 앨리스 객체는 메시지를 전달하는 것까지만 행동한다. 음료의 양을 줄여달라는 요청만 보낼 뿐이다.&lt;/p&gt;

&lt;p&gt;메시지를 송신하는 자는 메시지를 수신하는 객체의 상태 변경에 대해서 전혀 알지 못한다. 이것이 &lt;strong&gt;캡슐화&lt;/strong&gt;가 의미하는 것이다. 객체는 상태를 캡슐 안에감춰둔 채 외부로 노출하지 않으며, &lt;strong&gt;객체가 외부에 노출하는 것은 행동 뿐이다&lt;/strong&gt;. 외부에서 객체에 접근할 수 있는 유일한 방법 또한 행동뿐이다.&lt;/p&gt;

&lt;p&gt;상태를 외부에 노출시키지 않고 행동을 경계로 캡슐화 시키는 것은 결과적으로 객체의 자율성을 높인다. 객체의 자율성이 높아질수록 객체의 지능도 높아진다. 지능이 높아지면 객체의 협력은 유연하고 간결해진다.&lt;/p&gt;

&lt;h2 id=&quot;식별자&quot;&gt;식별자&lt;/h2&gt;

&lt;p&gt;모든 객체는 식별자를 가지며 식별자를 이용하여 객체를 구별할 수 있다.&lt;/p&gt;

&lt;p&gt;모든 객체가 식별자를 가진다는 것은 반대로 객체가 아닌 단순한 값은 식별자를 가지지않는다는 것을 의미한다. 이는 단순한 값은 식별자를 가지지 않는 것을 의미한다. 단순한 값은 객체의 프로퍼티에 들어가는 타입 중 하나라고 이전에 설명했었다.&lt;/p&gt;

&lt;p&gt;시스템을 설계할 때는 단순한 값과 객체의 차이점을 명확히 구분하고 명시적으로 표현하는 것이 매우 중요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;값은 숫자, 문자, 날짜 시간 등 변하지 않는 양을 모델링하기 때문에 불변상태(immutable state)를 가진다.
    &lt;ul&gt;
      &lt;li&gt;따라서 두 인스턴스의 상태가 같다면 두 인스턴스를 같은 것으로 판단한다. 따로 식별하지 않는다.&lt;/li&gt;
      &lt;li&gt;상태를 이용해 두 값이 같은지 판단할 수 있는 성질을 &lt;strong&gt;동등성&lt;/strong&gt;이라고 한다.&lt;/li&gt;
      &lt;li&gt;값은 오직 상태만을 이용해 동등성을 판단하기 때문에 인스턴스를 구별하기위한 별도의 식별자를 필요로 하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;객체는 시간에 따라 변경되는 상태를 포함한다. 또한 행동으로 상태를 변경한다. 따라서 객체는 가변상태(mutable state)를 가진다.
    &lt;ul&gt;
      &lt;li&gt;타입이 같은 두 객체의 상태가 똑같더라도 두 객체는 별개의 객체로 다루어야 한다.&lt;/li&gt;
      &lt;li&gt;두 객체의 상태가 다르더라도 식별자가 같다면 두 객체는 같은 객체로 볼 수 있다. 이를 &lt;strong&gt;동일성&lt;/strong&gt;이라고 한다.&lt;/li&gt;
      &lt;li&gt;시간의 흐름에 따라 객체의 상태는 변하기 때문에 가변적인 두 객체의 동일성을 판단하기 위해서는 식별자가 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그렇다면 식별자가 무엇인지 정의해보도록 하자, 식별자는 다음으로 정의하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;식별자란 어떤 객체를 다른 객체와 구분하는데 사용하는 객체의 프로퍼티이다. 값은 식별자를 가지지 않기 때문에 상태를 이용한 동등성 검사를 통해 두 인스턴스를 비교해야한다. 객체는 상태가 변경될 수 있기 때문에 식별자를 이용한 동일성 검사를 통해 두 인스턴스를 비교할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;식별자는 객체지향에서 다형성, 캡슐화, 상속에 비해서 중요하게 다루어지지 않는 개념일 수 있다. 하지만 식별자는 객체지향 패러다임의 표현력을 높여주는 중요한 역할을 한다. 상태가 변하지 않는 값과, 상태가 변하는 객체들이 균형을 맞추며 조화를 이루어야한다.&lt;/p&gt;

&lt;p&gt;지금까지 작성한 내용을 간략하게 정리해보았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체는 상태를 가지고, &lt;strong&gt;상태는 변경가능&lt;/strong&gt;하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;상태를 변경시키는 것은 객체의 행동이다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;행동의 결과는 상태에 의존적&lt;/strong&gt;이며 상태를 이용하여 서술이 가능하다.&lt;/li&gt;
      &lt;li&gt;행동의 순서가 실행 결과에 영향을 미친다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;객체는&lt;/strong&gt; 어떤 상태에 있더라도 &lt;strong&gt;유일하게 식별&lt;/strong&gt;이 가능하다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Achasan</name></author><category term="ETC" /><summary type="html">객체지향의 사실과 오해 2장 : 행동, 캡슐화, 식별자</summary></entry><entry><title type="html">[PRO] LV2 : 가장 큰 수</title><link href="https://achasan.github.io/lv2_Biggest_Num" rel="alternate" type="text/html" title="[PRO] LV2 : 가장 큰 수" /><published>2021-12-29T00:00:00+09:00</published><updated>2021-12-29T00:00:00+09:00</updated><id>https://achasan.github.io/lv2_Biggest_Num</id><content type="html" xml:base="https://achasan.github.io/lv2_Biggest_Num">&lt;h1 id=&quot;프로그래머스-lv2--가장-큰-수&quot;&gt;프로그래머스 Lv2 : 가장 큰 수&lt;/h1&gt;

&lt;h2 id=&quot;문제-설명&quot;&gt;문제 설명&lt;/h2&gt;

&lt;p&gt;0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.&lt;/p&gt;

&lt;p&gt;예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고, 이중 가장 큰 수는 6210입니다.&lt;/p&gt;

&lt;p&gt;0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때, 순서를 재배치하여 만들 수 있는 가장 큰 수를 문자열로 바꾸어 return 하도록 solution 함수를 작성해주세요.&lt;/p&gt;

&lt;h2 id=&quot;제한-사항&quot;&gt;제한 사항&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;numbers의 길이는 1 이상 100,000 이하입니다.&lt;/li&gt;
  &lt;li&gt;numbers의 원소는 0 이상 1,000 이하입니다.&lt;/li&gt;
  &lt;li&gt;정답이 너무 클 수 있으니 문자열로 바꾸어 return 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;입출력-예&quot;&gt;입출력 예&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;[6, 10, 2] &amp;gt; “6210”&lt;/li&gt;
  &lt;li&gt;[3, 30, 34, 5, 9] &amp;gt; “9534330”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;입력한-코드&quot;&gt;입력한 코드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정렬 심화문제이다. 로직 자체는 매우 간단하지만 어떻게 구현해야할지 생각하는게 정말 힘들었다.&lt;/p&gt;

&lt;p&gt;처음에는 숫자의 맨 앞자리를 비교한 후, 같은 숫자가 있을 경우 다음 자릿수가 있는지 체크하고 이를 비교하는 Comparator 객체를 만드려고 했으나 로직이 너무 복잡해져서 문제의도를 이런식으로 출제하는 건 개발자스럽지 않다는 생각을 갖게되어 바로 포기했다.&lt;/p&gt;

&lt;p&gt;문제의 포인트는 ‘문자열’ 비교였다. 배열 내에 있는 각 원소들을 String타입으로 바꾸고 두 원소를 합친 다음에 compareTo() 메서드를 사용하여 정렬하게되면 손쉽게 구현이 가능했다. 큰 수를 구해야하므로 오름차순이 아닌 내림차순으로 구현되어야한다. 따라서 (o2+o1).compareTo(o1+o2)의 값을 리턴하도록 하였다.&lt;/p&gt;

&lt;p&gt;정렬문제는 Comparator 객체를 얼마나 잘 다루느냐가 핵심인 것 같다. 보통 정렬 알고리즘이 두 객체를 어떻게 비교하느냐에 따라서 결정되기 때문에 Comparator에 대한 이해가 잘 된다면 손 쉽게 문제에 접근할 수 있는 것 같다. 해당 객체는 &lt;a href=&quot;https://achasan.github.io/Comparator_Comparable&quot;&gt;여기&lt;/a&gt; 에서 따로 포스팅하여 다루었기 때문에 참고하는 것이 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;사실 처음에 생각했던 방법이 막힌다음 내 머리로는 못 풀겠다고 판단하여 구글링을 하면서 힌트를 얻었다. String으로 compareTo() 메서드를 응용하는 방법을 알았으므로 앞으로 사용할 일이 있으면 활용해야겠다.&lt;/p&gt;</content><author><name>Achasan</name></author><category term="Algorhythm" /><summary type="html">프로그래머스 Lv2 : 가장 큰 수</summary></entry><entry><title type="html">[BOJ] 1874번 : 스택 수열</title><link href="https://achasan.github.io/s3_stack_sequence" rel="alternate" type="text/html" title="[BOJ] 1874번 : 스택 수열" /><published>2021-12-26T00:00:00+09:00</published><updated>2021-12-26T00:00:00+09:00</updated><id>https://achasan.github.io/s3_stack_sequence</id><content type="html" xml:base="https://achasan.github.io/s3_stack_sequence">&lt;h1 id=&quot;1874번--스택-수열&quot;&gt;1874번 : 스택 수열&lt;/h1&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;스택 (stack)은 기본적인 자료구조 중 하나로, 컴퓨터 프로그램을 작성할 때 자주 이용되는 개념이다. 스택은 자료를 넣는 (push) 입구와 자료를 뽑는 (pop) 입구가 같아 제일 나중에 들어간 자료가 제일 먼저 나오는 (LIFO, Last in First out) 특성을 가지고 있다.&lt;/p&gt;

&lt;p&gt;1부터 n까지의 수를 스택에 넣었다가 뽑아 늘어놓음으로써, 하나의 수열을 만들 수 있다. 이때, 스택에 push하는 순서는 반드시 오름차순을 지키도록 한다고 하자. 임의의 수열이 주어졌을 때 스택을 이용해 그 수열을 만들 수 있는지 없는지, 있다면 어떤 순서로 push와 pop 연산을 수행해야 하는지를 알아낼 수 있다. 이를 계산하는 프로그램을 작성하라.&lt;/p&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;

&lt;p&gt;첫 줄에 n (1 ≤ n ≤ 100,000)이 주어진다. 둘째 줄부터 n개의 줄에는 수열을 이루는 1이상 n이하의 정수가 하나씩 순서대로 주어진다. 물론 같은 정수가 두 번 나오는 일은 없다.&lt;/p&gt;

&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;

&lt;p&gt;입력된 수열을 만들기 위해 필요한 연산을 한 줄에 한 개씩 출력한다. push연산은 +로, pop 연산은 -로 표현하도록 한다. 불가능한 경우 NO를 출력한다.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h3 id=&quot;입력-코드&quot;&gt;입력 코드&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumberFormatException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NO&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;문제만 읽었을 때는 도대체 어떤 방식으로 로직이 실행되는 지 눈으로 봐도 모르겠에서 구글링을 통해 힌트를 얻었다. 데이터를 입력하면 어떤 로직을 통해 예제의 출력값이 나오는지를 알아야했다.&lt;/p&gt;

&lt;p&gt;로직은 다음의 조건을 가지고 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;값을 입력하면 그 값만큼 stack에 push한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;3을 입력했을 때 stack.push(1), stack.push(2), stack.push(3)&lt;/li&gt;
      &lt;li&gt;StringBuilder에 ‘+’를 추가해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;stack.poll() 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;배열에 저장한다. (필자는 StringBuilder에 append 하였다.) 입력한 값을 temp 변수에 저장한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정수를 입력한다. 입력한 값이 1에서 입력한 값보다 클 경우에는 값만큼 stack.push한다.
입력한 값이 1에서 입력한 값보다 작을 경우에는 현재 stack에 있는 값이 입력한 값보다 큰 지를 확인한다. 클 경우에는 NO를 출력해야한다. - 입력한 값을 모두 입력한 후 NO를 출력해야하므로 boolean 변수를 따로 생성한 다음 반복문을 빠져나오고나서 if문을 통해 출력값을 설정하였다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;문제를 이해한다면 로직을 구현하는데 큰 문제는 없었다. 문제를 이해하고 Stack 객체를 활용할 줄 안다면 로직 구현은 매우 쉬워진다. 위의 로직을 그대로 코드로 구현만 하면 될 것 같다.&lt;/p&gt;

&lt;p&gt;백준을 풀 때 항상 지문을 이해하기가 너무 어려운 것 같다. 예시를 보다 구체적으로 들어주면 좋을 것 같은데,, 다양한 문제를 제공하는 것은 장점이지만 문제의 출제의도를 파악하고 어떤 자료구조를 요구하는지를 바로 알아채기가 힘든 것 같다.&lt;/p&gt;</content><author><name>Achasan</name></author><category term="Algorhythm" /><summary type="html">1874번 : 스택 수열</summary></entry><entry><title type="html">[BOJ] 18870번 : 좌표 압축</title><link href="https://achasan.github.io/s2-compression_coordinates" rel="alternate" type="text/html" title="[BOJ] 18870번 : 좌표 압축" /><published>2021-12-24T00:00:00+09:00</published><updated>2021-12-24T00:00:00+09:00</updated><id>https://achasan.github.io/s2-compression_coordinates</id><content type="html" xml:base="https://achasan.github.io/s2-compression_coordinates">&lt;h1 id=&quot;18870번--좌표압축&quot;&gt;18870번 : 좌표압축&lt;/h1&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;수직선 위에 N개의 좌표 X1, X2, …, XN이 있다. 이 좌표에 좌표 압축을 적용하려고 한다.&lt;/p&gt;

&lt;p&gt;Xi를 좌표 압축한 결과 X’i의 값은 Xi &amp;gt; Xj를 만족하는 서로 다른 좌표의 개수와 같아야 한다.&lt;/p&gt;

&lt;p&gt;X1, X2, …, XN에 좌표 압축을 적용한 결과 X’1, X’2, …, X’N를 출력해보자.&lt;/p&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;

&lt;p&gt;첫째 줄에 N이 주어진다.&lt;/p&gt;

&lt;p&gt;둘째 줄에는 공백 한 칸으로 구분된 X1, X2, …, XN이 주어진다.&lt;/p&gt;

&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;

&lt;p&gt;첫째 줄에 X’1, X’2, …, X’N을 공백 한 칸으로 구분해서 출력한다.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h3 id=&quot;작성-코드&quot;&gt;작성 코드&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumberFormatException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreTokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rankArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rankArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rankArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;백준 문제가 정말 불친절하게 느껴진다. 내가 수포자라서 그런건진 몰라도..&lt;/p&gt;

&lt;p&gt;좌표압축을 활용한 ranking list를 만드는 문제이다. 특정한 알고리즘은 아니라고한다. 보통 코딩테스트에서 쓰일 때는 위의 문제와 같이 순위를 매기고자 할 때 쓰이고, 2차원 배열에서부터 활용되기 시작하는데, 흔히 쓰는 zip 파일과 같은 파일 압축프로그램이 위의 원리와 비슷하게 동작한다고 보면 된다.&lt;/p&gt;

&lt;p&gt;문제가 이해하기 어렵게 묘사되어있는 것 같다. 일단 내 기준으로 봤을 때는 그렇다.
문제를 해석하면 배열 안에있는 값들의 순위를 매기는 것이다. 단, 0순위부터 시작한다. 제일 작은숫자(음수)부터 순위가 매겨진다.&lt;/p&gt;

&lt;p&gt;일단 배열안에 있는 데이터의 index를 기억해야하기 때문에 원본 배열이 하나 필요하고, Arrays.copyOf() 메서드를 사용하여 배열을 하나 복사한다.&lt;/p&gt;

&lt;p&gt;복사한 배열은 sort하여 오름차순으로 정렬한 다음, HashMap 객체를 이용하여 배열에 있는 값을 key로, 순위를 value로 하여 넣어놓는다.&lt;/p&gt;

&lt;p&gt;여기서 중요한 점은 containsKey 메서드를 사용하여 중복여부를 판단하는 것이다. 문제 자체가 중복되는 값은 같은 순위값을 매기기 때문에 중복되는 값이 있으면 반복문에서 걸러내는 작업이 중요하다.&lt;/p&gt;

&lt;p&gt;좌표압축이라는 키워드를 처음 들어보기도했고, 문제설명이 조금 이해안되게 나온 것 같기도하고.. 구현하는데는 큰 어려움은 없었다. 다만 이해가 안되서 좌표압축이 무엇인지 구글링을 해보긴 했다.. 이번 기회에 이해하고 넘어가는게 좋을 듯 싶다.&lt;/p&gt;</content><author><name>Achasan</name></author><category term="Algorhythm" /><summary type="html">18870번 : 좌표압축</summary></entry><entry><title type="html">[Java] Comparator, Comparable 객체 정리</title><link href="https://achasan.github.io/Comparator_Comparable" rel="alternate" type="text/html" title="[Java] Comparator, Comparable 객체 정리" /><published>2021-12-24T00:00:00+09:00</published><updated>2021-12-24T00:00:00+09:00</updated><id>https://achasan.github.io/Comparator_Comparable</id><content type="html" xml:base="https://achasan.github.io/Comparator_Comparable">&lt;h1 id=&quot;comparator-comparable-정리&quot;&gt;Comparator, Comparable 정리&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;보통 배열이나 컬렉션 객체에 들어있는 데이터를 오름차순, 내림차순으로 정렬하기위해서 sort() 메서드를 많이 사용할 것이다.&lt;/p&gt;

&lt;p&gt;Arrays.sort(), Collections.sort()를 사용하면 기본적으로 오름차순으로 정렬이 된다. 하지만 정렬 기준을 보다 세부적으로 설정하거나, 기본자료형이 아닌 객체를 정렬할 경우 등 직접 기준을 세워 어떤 데이터를 기준으로 정렬할 지를 정해야하는 경우가 있다.&lt;/p&gt;

&lt;p&gt;정렬하는 기준을 설정하기 위해서는 Comparator, Comparable 객체를 사용하여 정렬해야한다. 두 객체는 모두 인터페이스이며, 객체를 생성할 경우 추상메서드를 구현하여 사용하여야 한다.&lt;/p&gt;

&lt;p&gt;두 객체는 정렬할 시 기준을 정하여 두 원소를 비교한다는 공통점을 가지고 있지만, 비교하는 방식에서 차이점을 보인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;comparator&quot;&gt;Comparator&lt;/h2&gt;

&lt;p&gt;일단 예시코드를 한번 보도록 하자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;보통 오름차순 정렬을 할 때는 Arrays.sort(arr)를 사용하여 정렬할 것이다. 여기서 두 번째 매개변수에 Comparator 익명 객체를 생성하여 compare 추상 메서드를 구현하면 원하는 정렬기준을 설정하고 이를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;위에서는 Comparator 객체를 생성하여 사용하였다. Comparator 객체는 제네릭을 사용하여 비교하는 객체를 하나의 타입으로 제한하여 사용한다. 원래는 클래스에서 상속하여 compare 메서드를 구현하여 사용할 수있지만 익명객체를 생성하면 간단한 배열의 정렬기준에도 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;이제 compare 메서드를 알아보자. compare 메서드는 Comparator 인터페이스의 추상메서드이고, &lt;strong&gt;두 객체를 비교할 때&lt;/strong&gt; 사용한다.&lt;/p&gt;

&lt;p&gt;위의 코드블럭을 보면 String o1, String o2가 매개변수로 들어가게되어 두 객체를 비교한 다음 int 값을 리턴함으로써 정렬기준을 만들게 된다. compare 메서드는 int값을 리턴하여 두 객체를 비교했을 때 교환해야할지 말아야할지를 결정한다.&lt;/p&gt;

&lt;p&gt;int 값이 음수일 경우 두 원소의 교환이 일어나지 않고, 양수일 경우 두 원소를 교환한다. 0일 때는 기본적으로 교환이 일어나지 않는다.&lt;/p&gt;

&lt;p&gt;int 값을 리턴할 때는 -1, 0, 1로 return 하도록 설정하여 사용하는 것이 바람직하다. int 값의 범위는 -21,4748,3648 ~ +21,4748,3647 이므로, 만약 두 객체를 비교했는데 해당 값의 범위를 초과할 경우 음수, 양수가 바뀌게 되어 잘못된 정렬이 설정될 수 있다.&lt;/p&gt;

&lt;p&gt;정리하자면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Comparable은 compare 추상메서드를 가진 인터페이스이다. 익명객체로 만든다음 이를 구현하여 Arrays.sort() 메서드의 정렬기준을 설정할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;compare 메서드는 int값을 리턴한다. -1, 0 일 경우 두 비교 객체는 교환안함(default), 1일 경우에는 두 비교 객체의 교환이 일어난다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;보통은 두 객체를 빼거나 더함으로써 나오는 int값을 리턴하도록 설정한다. 하지만 int값의 범위는 한정적이므로 이를 감안하여 사용하도록 하자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;comparable&quot;&gt;Comparable&lt;/h2&gt;

&lt;p&gt;Comparable도 Comparator객체와 사용방법이 비슷하다. 다만 추상메서드로 compareTo()를 가지고 있다. compareTo() 메서드는 자기 자신과 대상 객체를 비교하게된다는 점에서 차이점을 가진다.&lt;/p&gt;

&lt;p&gt;또한 lang 패키지에서 제공되어 import 없이 사용가능한 Comparator와 다르게 Comparable 객체는 util 패키지에서 제공되어진다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;같은 예제코드이다.&lt;/p&gt;

&lt;p&gt;o1, o2 String 변수를 비교했을 때 길이가 같을 경우 compareTo 메서드를 사용하여 나온 int값을 리턴하도록 되어있다. 이미 String 클래스에서는 Comparable 인터페이스를 상속받고 compareTo 메서드가 구현이 되어있기 때문에 바로 사용이 가능한 것이다. compareTo는 비교할 자신과 대상객체를 작성하기 때문에 매개변수는 하나이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anotherString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anotherString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anotherString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isLatin1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringLatin1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringUTF16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isLatin1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringLatin1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareToUTF16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringUTF16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareToLatin1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;String 클래스의 compareTo는 다음과 같이 구현되어있다. (참고)&lt;/p&gt;

&lt;p&gt;알고리즘 문제를 풀 때 정렬은 어디서나 물어볼 수 있다고 생각한다. 따라서 정렬을 사용하는 인터페이스를 알아두고, 문제해결을 하기 위해 할외하는 시간을 줄이기 위해 해당 인터페이스를 정리하는 글을 작성하였다.&lt;/p&gt;</content><author><name>Achasan</name></author><category term="Algorhythm" /><summary type="html">Comparator, Comparable 정리</summary></entry><entry><title type="html">[BOJ] 2018번 : 통계학</title><link href="https://achasan.github.io/s4-Statistics" rel="alternate" type="text/html" title="[BOJ] 2018번 : 통계학" /><published>2021-12-23T00:00:00+09:00</published><updated>2021-12-23T00:00:00+09:00</updated><id>https://achasan.github.io/s4-Statistics</id><content type="html" xml:base="https://achasan.github.io/s4-Statistics">&lt;h1 id=&quot;2018번--통계학-link&quot;&gt;2018번 : 통계학 &lt;a href=&quot;https://www.acmicpc.net/problem/2108&quot;&gt;Link&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;수를 처리하는 것은 통계학에서 상당히 중요한 일이다. 통계학에서 N개의 수를 대표하는 기본 통계값에는 다음과 같은 것들이 있다. 단, N은 홀수라고 가정하자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;산술평균 : N개의 수들의 합을 N으로 나눈 값&lt;/li&gt;
  &lt;li&gt;중앙값 : N개의 수들을 증가하는 순서로 나열했을 경우 그 중앙에 위치하는 값&lt;/li&gt;
  &lt;li&gt;최빈값 : N개의 수들 중 가장 많이 나타나는 값&lt;/li&gt;
  &lt;li&gt;범위 : N개의 수들 중 최댓값과 최솟값의 차이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;N개의 수가 주어졌을 때, 네 가지 기본 통계값을 구하는 프로그램을 작성하시오.&lt;/p&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;

&lt;p&gt;첫째 줄에 수의 개수 N(1 ≤ N ≤ 500,000)이 주어진다. 단, N은 홀수이다. 그 다음 N개의 줄에는 정수들이 주어진다. 입력되는 정수의 절댓값은 4,000을 넘지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;

&lt;p&gt;첫째 줄에는 산술평균을 출력한다. 소수점 이하 첫째 자리에서 반올림한 값을 출력한다.&lt;/p&gt;

&lt;p&gt;둘째 줄에는 중앙값을 출력한다.&lt;/p&gt;

&lt;p&gt;셋째 줄에는 최빈값을 출력한다. 여러 개 있을 때에는 최빈값 중 두 번째로 작은 값을 출력한다.&lt;/p&gt;

&lt;p&gt;넷째 줄에는 범위를 출력한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;최빈값을 구하는 로직을 구현하다가 막혀서 개고생한 문제이다. 최빈값이 여러 개 있을 경우에는 두 번째로 작은 값을 출력해야되는데, 안풀려서 풀었다 안풀었다 한 문제.&lt;/p&gt;

&lt;h3 id=&quot;코드&quot;&gt;코드&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumberFormatException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// -4000 ~ 4000 정수&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 최대최소, 평균 변수 생성&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 입력한 값 배열에 넣기, min, max 값 산출, 총합 구하기&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]++;&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//중앙값 구하기&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                    &lt;span class=&quot;cm&quot;&gt;/**
                    * 중앙값 구하기, count가 (n+1)/2 보다 작을 경우에는
                    * mid 값 설정
                    */&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;



                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mode_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mode_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode_num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이 문제에서 중요하게 보아야할 부분은 정수의 절댓값이 4000을 넘지 않는다는 점이다. Counting sort를 사용하여 문제를 풀라는 소리와 같다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;따라서 8001개의 공간을 가진 int 배열을 생성해서 입력한 값에 따라 해당하는 배열 자리에 수를 하나씩 더하여 값을 저장하였다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;산술평균과 범위를 구하는 법은 쉽다. 배열에 값을 추가할 때마다 최솟값과 최대값인지를 확인하고 변수에 값을 저장하기만 하면 된다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;산술평균의 경우 값을 소수점 첫 번째 자리에서 반올림한다고 했으므로, sum 변수를 double타입으로 캐스팅해야 값이 누락되지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Counting sort를 사용하므로 반복문에서 i를 사용하여 중앙값을 구할 수 없다. 따라서 count라는 변수를 따로 만든 다음 입력한 n의 절반이하라면 중앙값을 갱신하도록 구현하였다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;최빈값을 구하기 위해서는 2가지의 조건이 같이 돌아가야한다. 단순히 최빈값이 하나만 나오면 쉬워지지만, 같은 최빈값을 가진 수가 2개 이상이라면 이야기가 달라진다. 두 번째로 작은 값을 뽑아내야되기 때문에 check 이라는 boolean 변수를 만들어 같은 최빈값이 두 번째로 나왔다면 그 값을 홀드하고 check을 false로 만들어 다음에 또 최빈값이 나오더라도 패스하도록 구현하였다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Achasan</name></author><category term="Algorhythm" /><summary type="html">2018번 : 통계학 Link</summary></entry></feed>