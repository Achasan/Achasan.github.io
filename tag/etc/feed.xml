<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://achasan.github.io/tag/etc/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://achasan.github.io/" rel="alternate" type="text/html" />
  <updated>2022-03-09T21:14:40+09:00</updated>
  <id>https://achasan.github.io/tag/etc/feed.xml</id>

  
  
  

  
    <title type="html">Memory Repo. | </title>
  

  
    <subtitle>by Achasan</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">정보처리기사 필기합격 후기</title>
      <link href="https://achasan.github.io/Engineer_Infomation_Processing_Pass" rel="alternate" type="text/html" title="정보처리기사 필기합격 후기" />
      <published>2022-03-05T00:00:00+09:00</published>
      <updated>2022-03-05T00:00:00+09:00</updated>
      <id>https://achasan.github.io/Engineer_Infomation_Processing_Pass</id>
      <content type="html" xml:base="https://achasan.github.io/Engineer_Infomation_Processing_Pass">&lt;p&gt;정보처리기사 필기 합격후기&lt;/p&gt;

&lt;p&gt;처음에는 정보처리기사를 따야하나.. 하는 생각이 먼저 있었지만 개발자가 되기로 한 이상 일단 해보자는 마음가짐이 컸다. 어차피 필기시험을 준비하면서 앞으로 내가 이론적으로 공부해야할 개념들을 겉핥기식으로 정리하자는 생각도 있었다.&lt;/p&gt;

&lt;p&gt;여러 커뮤니티를 돌아본 결과 필기는 난이도가 그렇게 어렵지는 않다고 하는 것 같았다. 다만 신유형이 나올 수 있으니 맞춰야할 문제는 확실히 맞추고 가야한다는 이야기가 많았다. 합격후기를 들어보면 일주일 공부하고 합격한 사람이 있는 반면, 타이밍이 좋지 않아 몇 번에 걸쳐서 합격한 사람도 볼 수 있었다. 일단 어려운 시험은 아닌 것으로 판정.&lt;/p&gt;

&lt;h2 id=&quot;공부방법&quot;&gt;공부방법&lt;/h2&gt;

&lt;p&gt;따로 책을사서 공부하지는 않았다. 이미 정보처리기사를 공부한 사람들이 블로그에 여러 정리글을 올려놓기도하고, 문제은행식이기 때문에 두꺼운 책을 사서 전부 읽을 엄두도 나지 않았다. 블로그는 &lt;a href=&quot;https://powerdev.tistory.com/32?category=874228&quot;&gt;여기&lt;/a&gt;에서 참고하면서 공부하였다. 3과목까지는 꼼꼼히 읽어보며 필기하고 정리했는데, 가성비가 나오지 않는 것 같아 바로 &lt;a href=&quot;https://www.comcbt.com/&quot;&gt;comcbt&lt;/a&gt;에서 문제를 풀어보았다.&lt;/p&gt;

&lt;p&gt;2020년부터 정처기 문제출제방식이 개편되었다고해서 해당 회차부터 풀기 시작했다. 일단 시간은 매우 충분했다. 시험시간이 150분이지만 평균적으로 40분 ~ 50분 정도면 문제를 다 풀 수 있는 것 같다. 문제와 답이 직관적으로 되어있어 해당 개념을 아는 경우에는 답이 바로 보이는 수준이다. 다섯 과목의 난이도를 개인적으로 평가하면 다음과 같았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1과목 소프트웨어 설계 : ★★☆☆☆&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;무난한 과목, 여러 회차를 풀다보면 대충 어떤 유형의 문제가 나오고, 어떤 개념을 중요하게보고 외워야하는지 감이 온다. 나는 1과목과 2과목에서 점수를 많이따고 4, 5과목에서 못넘은 평균을 해당 과목에서 견인하는 전략으로 시험을 보았다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2과목 소프트웨어 개발 : ★★☆☆☆&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;1과목과 마찬가지로 비슷한 수준의 난이도이다. 다만 테스트 관리파트에서 외워야할 부분들이 꽤 있다. 화이트박스, 블랙박스, STAF, xUnit, FitNesse 등등.. 개발공부를 시작하면서 처음들어보는 키워드였기에 자주 나오는 키워드를 중점적으로 보았다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;의외로 점수가 꽤 나오는 과목이다. 취약한 부분만 잘 보완하는만큼 고득점을 노리기 쉬운 과목&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3과목 데이터베이스 구축 : ★★★☆☆&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;공부하면서 머리아팠던 과목. 알아야하는 개념도 많고, 추상적이어서 어떤 역할을 하는지 알기쉽지않다. 트랜잭션부터 시작해서 정규화, 튜플, 릴레이션, 어트리뷰트 등등.. 오라클을 다뤄보았다만 이정도로 개념이 자세할줄은 몰랐다. 역시 데이터베이스는..&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;암기하는 과정이 어렵지만 자주 나오는 개념들을 외워두면 60점은 넘을 수 있다. 욕심부리지 말고 60점만 넘기자는 생각으로 공부했고, 자주 출제되는 유형의 개념들 위주로 공부하였다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4과목 프로그래밍 언어 활용 : ★★★★☆&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;프로그래밍 언어 활용이기 때문에 언어와 관련된 문제가 많이 출제된다. 객체지향의 장점이라든지, 프레임워크, 운영체제(Unix, Linux)와 관련된 문제들이 나온다. 4과목의 꽃은 코드해석문제, C언어와 자바, 파이썬으로 작성한 코드를 통해 올바른 값이 무엇인지 골라야하는 문제가 출제된다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;나는 자바만 공부했기 때문에 C언어와 파이썬이 나올 때마다 틀렸다. 특히 C언어는 포인터를 쓰는데 어지러워서 어떻게 해석을해야하는지 감도 안잡혔다. 이 과목은 과락만 안당하자는 생각으로 공부했던 것 같다. 자바문제는 무조건 맞춰야했고, 이외에 개념적으로 물어보는 문제를 최대한 공부하였다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;5과목 정보시스템 구축 관리 : ?????&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;사실 5과목은 공부를 아예 안했기때문에 문제를 풀때마다 점수가 들쭉날쭉했다.. ㅋㅋ 잘 나올때는 70점, 못 풀때는 45점 나올 때도 있었으며, 내가 알고있는 개발상식을 가지고 풀려고했기 때문에 난이도가 어떤지는 사실 잘 모르겠다. 확실한건 신유형에 영향을 많이 받는 과목이라는 느낌을 많이 받았다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;문제를 풀면서 틀린 부분은 최대한 정리를 하고 넘어갔다. 그럼에도 불구하고 문제를 풀때마다 매 번 모르는 개념들이 나와서 50점만 넘자는 마인드로 공부했던 과목&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;

&lt;p&gt;가채점 결과 75 75 65 45 55 로 평균 63점 턱걸이로 합격했다. 공부기간은 2주정도, 하루 3시간 씩 공부했는데 이정도면 나쁘지않은 결과가 나온 것 같다. 공부하면서 정보처리기사를 굳이 따야하는건가.. 라는 생각이 강하게 들었는데 그래도 공부한게 있으니 시험은 보고오자는 생각으로 갔다.&lt;/p&gt;

&lt;p&gt;필기는 합격했지만 실기는 어떻게 공부해야할지 감도 안온다. 실기가 비전공자와 전공자를 거르게 출제가 된다던데.. 그것보다 일단 취업이 우선이니 실기는 시간이 날 때 한번쯤 도전해봐야겠다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="ETC" />
      

      
        <summary type="html">정보처리기사 필기 합격후기</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">봄봄(이 영화 봄?봄!) 프로젝트 회고</title>
      <link href="https://achasan.github.io/bombom_review" rel="alternate" type="text/html" title="봄봄(이 영화 봄?봄!) 프로젝트 회고" />
      <published>2022-01-14T00:00:00+09:00</published>
      <updated>2022-01-14T00:00:00+09:00</updated>
      <id>https://achasan.github.io/bombom_review</id>
      <content type="html" xml:base="https://achasan.github.io/bombom_review">&lt;p&gt;파이널 프로젝트가 끝이났다.&lt;/p&gt;

&lt;p&gt;이전에 &lt;a href=&quot;https://github.com/achasan/markethani&quot;&gt;마켓하니&lt;/a&gt; 프로젝트를 하면서 감을 잡았다고 생각했지만 새로운 프레임워크나 라이브러리를 가지고 기능을 구현할 때 마다 직접 부딪히며 완성해 나가야하는 건 어쩔 수 없는 것 같다. 그래도 하나의 기능을 구현하면서 성장했다는 뿌듯함을 느끼고, 완성되어가는 프로젝트를 보면서 어떨 때는 신기한 기분도 들었던 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/bombom_review/2022-01-30-19-28-45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 프로젝트의 주제는 커뮤니티 사이트를 만들기로 결정, 영화를 주제로 하는 커뮤니티 사이트를 만들되, 영화와 관련 정보도 같이 제공하여 일반적인 커뮤니티사이트와 차별성을 갖추기로 이야기가 되었다.&lt;/p&gt;

&lt;p&gt;커뮤니티 사이트로 주제를 정한 이유는 일정이 꽤 빠듯했기 때문에 심화된 기능을 구현하기에는 시간이 부족하다고 생각했고, CRUD를 갖춘 게시판을 구현해야하는 커뮤니티를 주제로 하여 기본기 있는 웹사이트를 제작해보자는 의견이 많았다.&lt;/p&gt;

&lt;p&gt;이전에 진행한 JSP 프로젝트에서 로그인/회원가입, 장바구니, 주문페이지를 구현했었지만 CRUD가 있는 게시판을 구현할 기회가 없었다. 따라서 이번 프로젝트에서는 게시판 하나를 본격적으로 구현해보고 싶다는 생각이 들었고, 팀원들과 상의한 결과 나는 회원끼리 소통할 수 있는 게시판 기능을 구현한 ‘영화수다’파트를 맡게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/bombom_review/2022-01-30-19-30-08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 이름은 ‘봄봄(이 영화 봄?봄!)’으로 정했다. 많은 고민이 있었지만 팀원들의 센스를 총 동원해서 다음과 같은 이름이 정해졌다. 봄봄은 여러 뜻을 가지고 만들게 되었는데,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spring Framework의 Spring(봄)&lt;/li&gt;
  &lt;li&gt;영화를 보다(watch)의 봄&lt;/li&gt;
  &lt;li&gt;코로나로 인해 좋지않은 영화산업에 봄을 일으킬 사이트..?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 외에도 회의하면서 팀원들이 나름대로 여러 해석을 내놓았지만 제일 기억나는건 세 가지였던 것 같다. 나름 신선한 이름이라서 기억에 많이 남는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bombom_thumbnail.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 프로젝트에서 개인적으로 잘한 점, 어려웠던 점, 이슈에 대해서 적어보려고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-이번-프로젝트에서-잘한-점&quot;&gt;1. 이번 프로젝트에서 잘한 점&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/bombom_review/2022-01-30-19-44-06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spring과 MyBatis로 구현한 게시판은 꽤 효율적이었다. Spring에서는 어노테이션을 사용하여 매핑주소를 정하고, 메서드로 요청방식을 정해주면 같은 URL더라도 요청방식에 따라서 비즈니스로직을 다르게 수행하도록 할 수 있다는 점이 편했었다. 개인적으로 REST API의 개념에 대해 공부하고 구현해보고 싶은 생각이 있었는데 Spring을 통해서 구현해보니 훨씬 URI 관리가 편하고 효율적이었다.&lt;/p&gt;

&lt;p&gt;비록 get방식과 post 방식만 사용해보았지만 CSR로 웹사이트를 구축한다면 put, delete 방식까지 사용하여 REST API를 온전히 구현해보고싶다.&lt;/p&gt;

&lt;p&gt;이 외에는 게시판 별로 좋아요 기능과 댓글 기능을 구현한 점이다. Ajax를 사용하여 페이지 새로고침 없이 구현했는데 이전 프로젝트에서도 구현했었기 때문에 크게 어려운 점은 없었다. 다만 Spring에서 JSON형태로 데이터를 리턴해 주는 기능을 지원해서 Jackson 라이브러리를 통해 편하게 데이터를 넘길 수 있었다.&lt;/p&gt;

&lt;p&gt;또 이번 프로젝트에서 가장 잘한 점이라고 한다면 바로 &lt;strong&gt;오픈소스 에디터를 사용&lt;/strong&gt;해보았다는 점.&lt;/p&gt;

&lt;p&gt;처음에 팀원들과 회의할 때 게시판은&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;게시판 조회, 글쓰기, 수정, 삭제 (기본적인 CRUD)&lt;/li&gt;
  &lt;li&gt;페이징 처리 및 게시물 검색&lt;/li&gt;
  &lt;li&gt;게시글 좋아요&lt;/li&gt;
  &lt;li&gt;댓글 기능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;네 가지의 기능은 있었으면 좋겠다고 의견이 모아져서 나도 이 정도만 구현해도 좋겠다고 생각했다. 하지만 게시판 글쓰기 페이지에서 생각이 바뀌게 되었다.&lt;/p&gt;

&lt;p&gt;기존에 학원에서 배운 방식은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;textarea&lt;/code&gt; 태그를 사용하여 텍스트 값을 받고, 이미지는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt; 태그를 사용해서 jpg 파일을 업로드하여 따로따로 게시글이 업로드 되도록 구현했었다. 하지만 이 방법은 자신이 쓴 글이 어떤식으로 업로드 될지 알기 힘들다.&lt;/p&gt;

&lt;p&gt;영화커뮤니티는 영화를 주제로 하는 커뮤니티사이트이다. 주제 특성상 영화의 특정한 장면이나 포스터, 영화관, 굿즈를 가지고 사람들이 글을 많이 쓰게 될텐데 이미지를 업로드하는 방식이 어렵다면 사용자가 불편을 느낄 수 밖에 없고, 이용률이 저조하게 될 것이라는 결론을 내리게 되었다.&lt;/p&gt;

&lt;p&gt;이를 해결하기위해 오픈소스 에디터를 찾게 되었고, 여러 오픈소스 에디터중에 NHN에서 제공중인 &lt;strong&gt;Toast ui Editor&lt;/strong&gt;를 찾게 되어, 에디터를 직접 게시글쓰기에 적용해보기로 했다. 어찌저찌 에디터를 구현하는데는 성공했지만, 가장 중요한 이미지 업로드 기능을 구현하는 게 까다로웠다.&lt;/p&gt;

&lt;p&gt;Toast ui Editor는 이미지 업로드 기능을 기본적으로 지원한다. 하지만 이미지를 업로드 할 때 base64 방식으로 데이터가 텍스트로 변환되어서 업로드되어진다. 이미지 파일의 사이즈가 클 수록 데이터베이스에 들어가는 텍스트의 길이도 길어져서 데이터베이스가 버틸 수 없을거라고 생각했다. 다른 방법을 찾아야했다.&lt;/p&gt;

&lt;p&gt;구글링으로 여러 글을 살펴보던 중, Toast ui Editor에서 제공하는 hook을 사용하여 사용자가 이미지를 업로드하는 행동을 할 경우, 이미지를 서버로 넘기는 함수를 구현한 다음, 서버에 이미지를 저장하고 이미지의 주소값을 리턴해주는 방식으로 기능을 구현할 수 있다고해서 구현해보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/Tui_Editor/2022-01-28-10-57-06.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;결과는 성공, 에디터를 통해서 글을 쓰니 글자크기도 조절이 가능하고, 업로드된 이미지도 함께 볼 수 있어서 글쓰기가 더 편리해보인다.&lt;/p&gt;

&lt;p&gt;오픈소스 에디터 사용과 관련하여 작성한 글은 &lt;a href=&quot;https://achasan.github.io/toast_ui_1&quot;&gt;Toast ui Editor 사용하기&lt;/a&gt;와 &lt;a href=&quot;https://achasan.github.io/toast_ui_2&quot;&gt;Toast ui Editor 이미지 업로드 구현방법&lt;/a&gt;에서 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-프로젝트에서-아쉬웠던-점&quot;&gt;2. 프로젝트에서 아쉬웠던 점&lt;/h3&gt;

&lt;p&gt;프로젝트에서 아쉬웠던 점은 Git 세팅에서 시간을 꽤 많이 날려먹었다는 점이다. 이전 프로젝트에서는 Git 세팅에 하루를 날려먹으면서 우여곡절 끝에 Git 세팅에 성공해서 금방 할 수 있을 것이라고 생각했지만 새로운 개발환경에서 Git을 세팅하는 건 어려운 것 같다.&lt;/p&gt;

&lt;p&gt;개발 환경에 따라서 gitignore를 세팅해주는 것이 되게 중요하다고 느꼈다. 처음에 원격저장소를 만들었을 때 gitignore 세팅을 깜빡했었는데 다른 팀원들이 작업한 파트를 병합할 때마다 메타데이터 파일이 바뀌어서 pull 할 때 프로젝트 폴더가 고장나는 상황이 자주 일어났었다. 이 때 gitignore를 세팅해줬어야 했는데 타이밍을 놓쳐 손을 쓸 수 없는 상황까지 가버려 저장소를 다시 만들어야했다.&lt;/p&gt;

&lt;p&gt;저장소를 다시 만들고 gitignore 세팅까지 해놓고 나서야 정상적인 pull이 가능했다. 자신있게 Git을 사용해야한다고 팀원들한테 말했지만 작동이 안되서 고치느라 시간을 많이 잡아먹어서 팀원들한테 미안한 감정이 아직도 남아있다.&lt;/p&gt;

&lt;p&gt;위와 관련된 글은 &lt;a href=&quot;http://achasan.github.io/spring_git_setting&quot;&gt;Spring framework 환경에서 git 세팅&lt;/a&gt;에서 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-느낀-점&quot;&gt;3. 느낀 점&lt;/h3&gt;

&lt;p&gt;Spring과 MyBatis를 사용하여 전체적인 요청과 응답의 흐름을 알게되었다는 점은 좋았다. 하지만 Spring에서 사용가능한 기능들은 되게 많고, 아직 부족하다는 것을 느낀 프로젝트이기도 하다.&lt;/p&gt;

&lt;p&gt;Spring 프로젝트를 하면서 디자인패턴을 접하게 되었다. 여러 개발자가 큰 프로젝트를 진행하게되면 협업하는 과정이 필수가 되고, 협업에서 가장 중요한 점은 쉽게 읽을 수 있는 코드라고 생각한다. 많은 개발자들이 Spring Framework로 프로젝트를 진행했을 것이고, 수 많은 시행착오끝에 효율적으로 유지보수가 가능한 디자인패턴이 나오게 되었을 것이라 생각한다. 이 개념을 알고 조금이나마 깔끔한 코드를 만드는 시도를 해봐야할 것 같다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;끝까지 열심히 해준 팀원들에게도 고맙다고 전하고 싶다. 이수자평가 준비때문에 프로젝트와 병행해서 PPT까지 만들면서 고생한 팀원들이 몇 명 있었는데, 그래도 끝까지 자기가 맡은 부분을 마무리 해주어서 완성도 있는 페이지가 나온 것 같아서 다행이라고 생각한다.&lt;/p&gt;

&lt;p&gt;파이널 프로젝트인만큼 욕심도 많았지만 현실적으로 모든 것을 구현하기에는 한계가 있었다. 이제 취업을 해야하는 시기가 되는데, 회사에서는 신입의 수준을 어느정도까지 요구하는지를 모르기 때문에 많은 것을 보여주고싶어 더 욕심만 나는 프로젝트였던 것 같다. 욕심부리지말고 꾸준히 정진할 수 있는 자세를 가져야겠다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="ETC" />
      

      
        <summary type="html">파이널 프로젝트가 끝이났다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Toast ui Editor 이미지 업로드 구현방법</title>
      <link href="https://achasan.github.io/toast_ui_2" rel="alternate" type="text/html" title="Toast ui Editor 이미지 업로드 구현방법" />
      <published>2022-01-07T00:00:00+09:00</published>
      <updated>2022-01-07T00:00:00+09:00</updated>
      <id>https://achasan.github.io/toast_ui_2</id>
      <content type="html" xml:base="https://achasan.github.io/toast_ui_2">&lt;h1 id=&quot;위지윅-에디터-toast-ui-editor-이미지-업로드-기능-구현&quot;&gt;위지윅 에디터 Toast ui Editor 이미지 업로드 기능 구현&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://achasan.github.io/toast_ui_1&quot;&gt;지난 글&lt;/a&gt;에서는 Toast ui Editor(Tui)를 CDN 방식으로 불러오는 방법에 관한 글에 이어서 이미지 업로드 기능을 구현하는 방법을 알아보기위해 작성한 글이다.&lt;/p&gt;

&lt;p&gt;Tui는 기본적으로 이미지 업로드 기능을 지원한다. 이미지를 업로드할 경우 base64의 형태로 변환하여 이미지를 업로드 한다. 이 기능은 치명적인 단점이 있는데, 이미지의 용량이 커질수록 변환된 base64 텍스트의 길이는 기하급수적으로 높아진다. 만약 base64로 변환된 이미지 그대로 DB에 저장한다고 했을 경우, 엄청난 길이의 텍스트로 인해 DB에 심한 부담을 줄 것이다.&lt;/p&gt;

&lt;p&gt;따라서 사용자가 이미지를 업로드할 경우 이미지를 서버에 저장하고 저장된 이미지의 주소를 리턴하여 이미지가 출력되도록 해야한다. Spring을 사용하여 이미지를 서버에 저장하고 주소를 리턴하도록 해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-이미지를-업로드-했을-때-콜백함수로-로직구현&quot;&gt;1. 이미지를 업로드 했을 때 콜백함수로 로직구현&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Tui 공식문서에서는 에디터를 사용할 때 특정 행동을 할 때 콜백함수가 작동되도록하는 hooks라는 함수를 지원한다. hooks에는 여러 hook이 존재하는데, 그 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addImageBlobHook&lt;/code&gt;을 사용하면 이미지를 업로드 했을 때 콜백함수가 작동하도록 할 수 있다.&lt;/p&gt;

&lt;p&gt;먼저 Editor를 불러올 때 작성한 코드에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addImageBlobHook&lt;/code&gt;을 추가해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toastui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#editor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;initialEditType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;wysiwyg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;내용을 입력해주세요&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;addImageBlobHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FormData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageUpload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ko-KR&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageUpload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bombom/image_upload.do&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;processData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addImageBlobHook&lt;/code&gt; hook을 사용할 경우 작동할 함수를 작성해주었다. 파라미터로는 blob과 callback이 들어가게되는데, blob은 사용자가 업로드하려고 하는 이미지, 콜백은 비즈니스 로직이 수행된 다음에 사용자에게 리턴할 이미지 URL을 리턴해주면 에디터에서 이미지를 출력하게되는 원리이다.&lt;/p&gt;

&lt;p&gt;서버에 이미지를 업로드해야하므로 ajax를 사용하여 서버로 이미지를 넘기도록 하였다. post방식으로 서버에 데이터를 넘기게 되고, form 태그를 통해 보통 데이터를 넘기지만 여기서는 form 태그를 사용할 수 없기 때문에 JavaScript에서 제공하는 formData 객체를 사용하여 해당 객체 안에 데이터를 넣어서 전달하도록 하였다.&lt;/p&gt;

&lt;p&gt;async를 true로 설정했을 때 데이터가 넘겨지지 않아서 false로 설정하고 넘겼더니 문제없이 잘 구동 되었다. 아마 비동기일 때 사용자가 데이터를 넘기는 시점이 달라서 안되는 것 같다. async를 false로 사용할 때 비권장된다는 경고메시지가 나오긴하지만 일단 기능구현이 되므로 이렇게 사용하기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-서버에서-전달받은-이미지-저장하기&quot;&gt;2. 서버에서 전달받은 이미지 저장하기&lt;/h2&gt;

&lt;p&gt;이제 Controller에서 이미지를 어떻게 처리하는지 코드를 통해 알아보자,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.ResponseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.multipart.MultipartFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EditorController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**
	 * 파일이름 추출하기
	 * 1. 업로드한 파일의 확장자명 알아내기
	 * 2. (오늘날짜)_currentTimeMillis + 확장자 방식으로 파일명 생성
	 * 3. 파일 경로에 등록
	 * 4. 주소값 리턴 (https://localhost:8080/bombom/resources/upload/파일)
	 */&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/image_upload.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageUpload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MultipartFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multipartFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
							  &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multipartFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user_write image upload detected, but there's no file.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;not found&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRealPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;resources/upload/talk/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multipartFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOriginalFilename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newFileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;multipartFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transferTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalStateException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uri : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Image Path : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;File_name : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// 주소값 알아내기&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// https://localhost:8080/bombom/resources/upload/파일이름&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/resources/upload/talk/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;로직은 크게 4개로 나눌 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt; 어노테이션을 사용하여 이미지 가져오기&lt;/li&gt;
  &lt;li&gt;이미지를 저장할 경로 설정하기&lt;/li&gt;
  &lt;li&gt;저장할 이미지의 이름 재설정하기&lt;/li&gt;
  &lt;li&gt;이미지를 서버 경로에 저장하기&lt;/li&gt;
  &lt;li&gt;주소값 리턴하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이미지는 보통 MultipartFile 객체를 통해 받아오게 된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt; 어노테이션을 사용하여 이미지를 받아와서 비즈니스 로직에 사용할 수 있도록 했다.&lt;/p&gt;

&lt;p&gt;그 다음은 경로를 지정해주어야하는데, 경로는 HttpServletRequest 객체를 사용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getSession()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getServletContext()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRealPath()&lt;/code&gt; 메서드를 사용하여 서버 내에 저장할 경로를 지정해 주었다.&lt;/p&gt;

&lt;p&gt;파일이름은 이름이 중복되는 것을 피하기 위해서 오늘 날짜 + currentTimeMillis() 메서드를 사용해주었다.&lt;/p&gt;

&lt;p&gt;위의 세 절차를 모두 완료했다면, 경로와 파일이름으로 된 File 객체를 생성하고, transferTo() 메서드를 사용하여 이미지를 지정한 경로로 이동시켜준다.&lt;/p&gt;

&lt;p&gt;마지막으로 HttpServletRequest 객체를 사용하여 메서드를 사용하여 리턴할 주소값을 가공하여 전달하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-결과&quot;&gt;3. 결과&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/Tui_Editor/2022-01-28-10-57-06.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재 진행중인 봄봄프로젝트에서 구현한 게시판 글쓰기 기능이다. 이미지 업로드와 글 등록까지 정상적으로 수행되는 것을 볼 수 있다. 글 등록은 따로 Controller를 만들어서 로직을 처리했기 때문에 만약 이미지 업로드가 잘 된다면 글 등록까지 무난하게 구현할 수 있을 것이라고 생각한다.&lt;/p&gt;

&lt;p&gt;에디터를 사용하면서 이미지 업로드를 어떻게 처리해야할지 막막했다. 열심히 구글링을 하면서 찾아본 결과 끝내 구현할 수 있었다. 대부분의 글들은 리액트를 사용하기 때문에 작성하는 코드가 내가 구현하려는 것과 많이 달랐지만, 공식문서와 같이 참조하면서 삽질한 결과 기능을 구현할 수 있었다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="ETC" />
      

      
        <summary type="html">위지윅 에디터 Toast ui Editor 이미지 업로드 기능 구현</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Toast ui Editor 사용하기</title>
      <link href="https://achasan.github.io/toast_ui_1" rel="alternate" type="text/html" title="Toast ui Editor 사용하기" />
      <published>2022-01-06T00:00:00+09:00</published>
      <updated>2022-01-06T00:00:00+09:00</updated>
      <id>https://achasan.github.io/toast_ui_1</id>
      <content type="html" xml:base="https://achasan.github.io/toast_ui_1">&lt;h1 id=&quot;위지윅-에디터-toast-ui-editor-사용법&quot;&gt;위지윅 에디터 Toast ui Editor 사용법&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;영화커뮤니티를 주제로 스프링 프로젝트를 진행중이다. 커뮤니티는 게시판 기능이 핵심이기 때문에 사용자가 게시글을 올리기 편하도록 기능을 구현하는데 중점을 맞춰야 한다고 생각한다.&lt;/p&gt;

&lt;p&gt;textarea 태그를 사용하여 게시글을 올리게 할 경우 텍스트만 올릴 수 있기 때문에 비효율적이다. 또한 글 크기나 굵기같은 수정이 안되기 때문에 불편하다.&lt;/p&gt;

&lt;p&gt;따라서 오픈소스 에디터로 눈길이 가게되었고, 여러가지 에디터중 Toast ui Editor를 사용해보기로 하였다.&lt;/p&gt;

&lt;p&gt;사실 오픈소스 에디터는 종류가 다양하다. 대표적인 위지윅 오픈소스 에디터로 CKEditor를 많이 사용하는 것 같았다. 여러 글을 찾아보니 확장성이 좋은 에디터인 것 같았지만 5.0으로 업데이트 되면서 에디터의 핵심기능이 유료로 전환되었다는 이야기가 많이 들리기도하고, 기능이 너무 많아서 난잡해보이는 생각이 들어서 내 스타일은 아니였다.&lt;/p&gt;

&lt;p&gt;그 와중에 Toast ui 에디터를 찾게 되었다. NHN에서 개발한 오픈소스 에디터로, 마크다운과 위지윅을 둘 다 지원하고, Viewer도 지원하기 때문에 작성한 글을 HTML태그로 쉽게 변환해주고, 또 작성된 글을 Viewer를 통해 손쉽게 게시글을 볼 수 있는 장점이 있었다.&lt;/p&gt;

&lt;p&gt;아무튼 이번 프로젝트를 통해 게시판 에디터 사용법을 알게되었으므로 기록하여 나중에 사용할 일이 생길 때 찾아볼 수 있도록 하는 것이 이번 글의 목적이 되겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;공식문서 가이드가 있으므로 &lt;a href=&quot;https://github.com/nhn/tui.editor/blob/master/docs/ko/getting-started.md&quot;&gt;여기&lt;/a&gt;에서 참고하도록 하자.&lt;/p&gt;

&lt;p&gt;먼저 CDN을 통해 에디터를 불러와야한다. Toast ui에서는 npm으로 사용하는 것을 권장하지만, 이번 프로젝트는 Spring/JSP를 사용하기 때문에 CDN으로 사용하기로 하였다.&lt;/p&gt;

&lt;p&gt;2021년 1월 6일 기준, 현재의 cdn 주소는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;editor를 불러오기 위해서는 HTML에 id가 editor인 div 태그를 생성한 후, 태그 바로 아래에 CDN을 입력해주어야한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;에디터를 사용하기 위해서는 제공하는 CSS도필요하다. 필자는 head태그 내부에 넣어주었다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor.min.css&quot;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CSS와 자바스크립트를 모두 불러왔다면, 이제 에디터를 띄워보자, 에디터는 자바스크립트 코드를 작성하여 불러올 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#editor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 작성했을 경우, 에디터를 볼 수 있게된다. 아래는 현재 프로젝트의 글쓰기 페이지에서 에디터를 띄운 모습이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/Tui_Editor/2022-01-08-22-53-52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아마 우측하단에 보이는 언어가 영어일 것이다. 에디터를 한국어로 설정하기 위해서는 CDN을 하나 더 가져와야 한다. 주소는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/i18n/ko-kr.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Editor를 한국어로 변경하기위해 작성한 JavaScript 문을 아래와 같이 수정한다. 지금까지 설명한 코드를 전부 합치면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor.min.css&quot;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://uicdn.toast.com/editor/latest/i18n/ko-kr.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#editor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ko-KR&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;일단 에디터를 불러오는 것과 한국어로 설정하는 것 까지는 완료되었다. 이제 에디터를 불러올 때 설정할 수 있는 옵션들을 알아보자.
전체적인 옵션은 &lt;a href=&quot;https://nhn.github.io/tui.editor/latest/ToastUIEditorCore&quot;&gt;여기&lt;/a&gt;에서 확인이 가능하다. 여기에서는 대표적인 옵션들을 알아본다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;height&lt;/code&gt; : 에디터의 높이를 설정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialEditType&lt;/code&gt; : Tui Editor는 마크다운과 위지윅을 지원한다. 에디터를 처음 불러왔을 때 입력방식을 정하는 옵션.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialValue&lt;/code&gt; : 에디터를 불러왔을 때 안에 입력될 내용을 해당 옵션을 통해 정할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt; : 에디터의 언어를 설정한다. 위에서 한국어 정보를 CDN으로 가져왔으므로 ‘ko-KR’를 입력하여 설정하였다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;placeholder&lt;/code&gt; : HTML의 placeholder와 역할이 동일하다. 에디터에 입력한 값이 없을 경우 밝은 회색으로 출력될 텍스트.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 옵션들을 가지고 에디터를 용도에 맞게 커스텀할 수 있다. 필자는 다음과 같이 작성하였다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toastui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#editor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;initialEditType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;wysiwyg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;내용을 입력해주세요&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;addImageBlobHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FormData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageUpload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ko-KR&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;개인적으로 자바스크립트가 HTML파일 안에서 길게 작성될 경우 지저분해 보일 수 있기 때문에 다른 파일로 빼낸 다음 import하여 사용하는 것을 추천한다. 해당 글에서 import하는 것은 생략한다.&lt;/p&gt;

&lt;p&gt;위에서 언급하지 않았지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hooks&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event&lt;/code&gt; 옵션은 에디터에서 사용자가 글을 작성할 때 특정한 이벤트가 발생할 경우에 작동하게할 수 있는 함수라고 보면 된다. 이는 다음 글 &lt;a href=&quot;https://achasan.github.io/toast_ui_2&quot;&gt;Toast ui Editor 이미지 업로드하기&lt;/a&gt;에서 자세히 다루도록 하겠다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="ETC" />
      

      
        <summary type="html">위지윅 에디터 Toast ui Editor 사용법</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">객체지향의 사실과 오해 3장 : 타입</title>
      <link href="https://achasan.github.io/OOP_4" rel="alternate" type="text/html" title="객체지향의 사실과 오해 3장 : 타입" />
      <published>2022-01-02T00:00:00+09:00</published>
      <updated>2022-01-02T00:00:00+09:00</updated>
      <id>https://achasan.github.io/OOP_4</id>
      <content type="html" xml:base="https://achasan.github.io/OOP_4">&lt;h1 id=&quot;객체지향의-사실과-오해-3장--타입과-추상화&quot;&gt;객체지향의 사실과 오해 3장 : 타입과 추상화&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 글은 이전에 올린 글을 이어서 작성한 것이다. &lt;a href=&quot;https://achasan.github.io/oop_3&quot;&gt;(링크)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;타입&quot;&gt;타입&lt;/h2&gt;

&lt;p&gt;타입의 정의는 개념의 정의와 완전히 동일하다. 타입은 공통점을 기반으로 객체들을 묶기 위한 틀이다. 타입은 개념과 마찬가지로 심볼, 내연, 외연을 이용해 서술할 수 있고, 타입에 속하는 객체 역시 타입의 인스턴스라고 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;타입은 개념과 동일하다. 따라서 타입이란 우리가 인식하고 있는 다양한 사물이나 객체에 적용할 수 있는 아이디어나 관념을 의미한다. 어떤 객체에 타입을 적용할 수 있을 때 그 객체를 타입의 인스턴스라고 한다. 타입의 인스턴스는 타입을 구성하는 외연인 객체 집합의 일원이 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;컴퓨터가 어떤 작업을 수행하기 위해서는 작업에 필요한 데이터를 메모리 안으로 불러들여야 한다. 메모리에 불러들여진 데이터들은 무수히 많은 0과 1로 치장되어 메모리에 저장된다. 실제로 메모리 안에는 무수히 많은 0과 1의 행렬만이 존재한다. 사람이 이를 구별하기 위해서는 엄청난 시행착오를 각오해야할 것이다.&lt;/p&gt;

&lt;p&gt;이로인해 사람들은 메모리 안의 데이터에 특정한 의미를 부여하기 시작했다. 데이터에 사칙연산이 가능하다면 숫자형, 여러 문자로 구성되어있고 다른 문자와 연결될 수 있으면 문자열형으로 분류하였다. 참/거짓을 이야기할 수 있는 데이터는 논리형으로 분류했다.&lt;/p&gt;

&lt;p&gt;데이터를 목적에 따라 분류하기 시작하면서 타입 시스템(type system)이 자라나기 시작했다. 데이터를 분류함으로써 그 데이터에 제약사항을 부과한 것이다. 이를 통해 두 가지 중요한 사실을 알 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;타입은 데이터가 어떻게 사용되느냐에 관한 것이다. 숫자형 데이터가 사칙연산이 가능하기 때문에 분류한 것이고, 문자열형은 두 문자를 연결할 수 있는 데이터이기에 문자열형으로 분류한 것이다. 어떤 데이터에 어떤 연산자를 적용할 수 있느냐가 그 데이터의 타입을 결정하는 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;타입에 속한 데이터를 메모리에 어떻게 표현하는지는 외부로부터 철저하게 감춰진다. 데이터 타입의 표현은 연산 작업을 수행하기에 가장 효과적인 형태가 선택되며, 개발자는 해당 데이터 타입의 표현 방식을 몰라도 데이터를 사용하는 데 지장이 없다. 개발자는 해당 데이터 타입을 사용하기 위해 단지 데이터 타입에 적용할 수 있는 연산자만 알고 있으면 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 책에서는 데이터 타입을 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터 타입은 메모리 안에 저장된 데이터의 종류를 분류하는데 사용하는 메모리 집합에 관한 메타데이터이다. 데이터에 대한 분류는 암시적으로 어떤 종류의 연산이 해당 데이터에 대해 수행될 수 있는지를 결정한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;객체와-타입&quot;&gt;객체와 타입&lt;/h3&gt;

&lt;p&gt;객체지향 프로그램을 작성할 때 우리는 객체를 일종의 데이터처럼 사용한다. 따라서 객체를 타입에 따라 분류하고 그 타입에 이름을 붙이는 것은 결국 프로그램에서 사용하 새로운 데이터 타입을 선언하는 것과 같다.&lt;/p&gt;

&lt;p&gt;그렇지만 객체는 데이터가 아니다. 객체에서 중요한 것은 객체의 행동이다. 상태는 행동의 결과로 초래된 부수효과를 쉽게 표현하기 위해 도입한 추상적인 개념일 뿐이다. 즉, 객체가 협력을 위해 어떤 책임을 지녀야 하는지를 결정하는 것이 객체지향 설계의 핵심이다.&lt;/p&gt;

&lt;p&gt;따라서 앞에서 데이터 아입에 관해 언급했던 두 가지 조언은 객체의 타입을 이야기할 떄도 동일하게 적용되어진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 객체가 어떤 타입에 속하는지를 결정하는 것은 그 객체가 수행하는 행동이다. 어떤 객체들이 동일한 행동을 수행할 수 있다면 그 객체들은 동일한 타입으로 분류될 수 있다.&lt;/li&gt;
  &lt;li&gt;객체의 내부적인 표현은 외부로부터 철저하게 감춰진다. 객체의 행동을 가장 효과적으로 수행할 수 만 있따면 객체 내부의 상태를 어떤 방식으로 표현하더라도 무방하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;행동이-우선이다&quot;&gt;행동이 우선이다.&lt;/h3&gt;

&lt;p&gt;결론적으로 객체의 타입을 결정하는 것은 객체의 행동뿐이다. 객체가 어떤 데이터를 보유하고 잇는 지는 타입을 결정하는 데 아무런 영향을 미치지 않는다.&lt;/p&gt;

&lt;p&gt;같은 타입에 속한 객체는 행동만 동일하다면 서로 다른 데이터를 가질 수 있다. 여기서 동일한 행동은 동일한 책임을 의미하고, 동일한 채김이란 동일한 메시지 수신을 의미한다. 다만 내부의 표현 방식이 다르기 떄문에 동일한 메시지를 처리하는 방식은 서로 다를 수밖에 없다. 이것은 다형성에 의미를 부여한다.&lt;/p&gt;

&lt;p&gt;다형성이란 동일한 요청에 대해 서로 다른 방식으로 응답할 수 있는 능력을 뜻한다. 동일한 메시지를 서로 다른 방식으로 처리하기 위해서는 객체들은 동일한 메시지를 수신할 수 있어야하기 떄문에 결과적으로 다형적인 객체들은 동일한 타입에 속하게 된다.&lt;/p&gt;

&lt;p&gt;행동만이 고려 대상이라는 사실은 외부에 데이터를 감춰야 한다는 것을 의미한다. 훌륭한 객체지향 설계는 외부에 행동만을 제공하고 데이터는 행동 뒤로 감춰야 한다. 이 원칙을 흔히 캡슐화라고 한다. 데이터가 캡슐의 벽을 뚫고 객체의 인터페이스를 오염시키는 순간 객체의 분류 체계는 급격히 위험에 노출되고 결과적으로 유연하지 못한 설계를 낳게 된다.&lt;/p&gt;

&lt;h3 id=&quot;일반화특수화-관계&quot;&gt;일반화/특수화 관계&lt;/h3&gt;

&lt;p&gt;타입과 타입 사이에는 일반화/특수화 관계가 존재할 수 있다. 앨리스가 트럼프 행렬에서 나온 객체들을 토끼를 제외하고 ‘트럼프’라고 칭했지만 사실 해당 객체들은 엄밀히 말하면 ‘트럼프 인간’이다. 트럼프 인간은 트럼프보다 특화된 행동을 하는 특수한 개념이다.&lt;/p&gt;

&lt;p&gt;일반화와 특수화는 동시에 일어난다. 트럼프 인간은 트럼프를 좀 더 특수하게 표현한 것이다. 더 특수하다는 것은 일반적인 개념보다 범위가 더 좁다는 것을 의미하므로 트럼프 인간에 속하는 객체는 트럼프에 속하는 객체보다 그 수가 적을 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;특수한 개념을 포괄하는 트럼프 인간은 일반적인 개념을 표현하는 트럼프의 부분집합이 된다. 여기서도 중요한 점은 일반화/특수화 관계를 결정하는 것이 객체의 상태를 표현하는 데이터가 아니라 행동이라는 것이다.&lt;/p&gt;

&lt;p&gt;특수한 타입이란 일반적인 타입이 가진 모든 타입을 포함하지만 거기에 더해 자신만의 행동을 추가하는 타입을 가리킨다. 따라서 일반적인 타입은 특수한 타입보다 더 적은 수의 행동을 가지고 특수한 타입은 일반적인 타입보다 더 많은 수의 행동을 가진다.&lt;/p&gt;

&lt;h3 id=&quot;슈퍼타입과-서브타입&quot;&gt;슈퍼타입과 서브타입&lt;/h3&gt;

&lt;p&gt;일반화/특수화의 관계는 좀 더 일반적인 한 타입과 좀 더 특수한 한 타입 간의 관계이다. 이 때 좀 더 일반적인 타이블 슈퍼타입(Supertype)이라고 하고, 좀 더 특수한 타입을 서브타입(Subtype)이라고 한다.&lt;/p&gt;

&lt;p&gt;일반적으로 서브타입은 슈퍼타입의 행위와 호환되기 때문에 서브타입은 슈퍼타입을 대체할 수 있어야한다. 즉, 트럼프 인간은 트럼프이므로 엎드리거나 뒤집어지기만 하는 경우에는 트럼프를 대체하더라도 무방할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mindock.github.io/assets/images/oop_generalization_specialization.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반화/특수화의 관계를 표기할 때는 서브타입을 하단에 위치시키고 속이 빈 삼각형으로 연결하여 표현한다. 이 때 서브타입에서는 슈퍼타입과 중복된 행위를 행략할 수 있다. 서브 타입은 슈퍼타입의 행위에 추가적으로 특수한 자신만의 행동을 추가하는 것이므로, 슈퍼타입의 행동은 서브타입에게 자동으로 상속된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;타입의-목적&quot;&gt;타입의 목적&lt;/h2&gt;

&lt;p&gt;타입을 사용하는 이유는 무엇일까? 타입은 인간의 인지능력으로 시간에 따라 동적으로 변화하는 객체의 복잡성을 극복하기위해 사용한다.&lt;/p&gt;

&lt;p&gt;앨리스의 상태는 행동에 따라 시시각각 변한다. 앨리스의 상태는 계속 변화하지만 모든 경우 앨리스는 단지 앨리스일 뿐이다. 앨리스를 다른 객체와 구별할 수 있는 식별성은 동일하게 유지된다. 따라서 앨리스의 상태가 임의의 값을 가지고 변화한다는 사실만 생각하여 상황을 단순하게 만들 수 있다.&lt;/p&gt;

&lt;p&gt;타입은 시간에 따라 동적으로 변하는 앨리스의 상태를 시간과 무관한 정적인 모습으로 다룰 수 있게 해준다. 앨리스의 상태에 시간이라는 복잡성을 제거하여 독립적인 정적인 모습으로 앨리스를 생각할 수 있게 해준다.&lt;/p&gt;

&lt;h3 id=&quot;결국-타입은-추상화다&quot;&gt;결국 타입은 추상화다&lt;/h3&gt;

&lt;p&gt;이러한 관점에서 타입은 추상화이다. 어떤 시점에 앨리스에 관해 생각할 때 불필요한 시간이라는 요소와 상태 변화라는 요소를 제거하거 철저하게 정적인 관점에서 앨리스의 모습을 묘샇는 것을 가능하게 해준다.&lt;/p&gt;

&lt;p&gt;타입은 추상화다. 타입을 이용하면 객체의 동적인 특성을 추상화 할 수 있다. 결국 타입은 시간에 딸느 객체의 상태 변겨잉라는 복잡성을 단순화 할 수 잇는 효과적인 방법인 것이다.&lt;/p&gt;

&lt;h3 id=&quot;동적-모델과-정적-모델&quot;&gt;동적 모델과 정적 모델&lt;/h3&gt;

&lt;p&gt;객체를 생각할 때 우리는 두 가지 모델을 동시에 고려한다는 사실을 알 수 있다.&lt;/p&gt;

&lt;p&gt;하나는 객체가 특정 시점에 구체적으로 어떤 상태를 가지느냐이다. 이를 객체의 &lt;strong&gt;스냅샷(snapshot)&lt;/strong&gt;이라고 한다. 객체지향 모델링을 위한 표준 언어인 UML에서 스냅샷은 객체 다이어그램(object diagram)이라고도 불린다. 스냅샷처럼 실제로 객체가 살아움직이는 동안 상태가 어떻게 변하고 어떻게 행동하는지를 포착하는 것을 동적모델 이라고 한다.&lt;/p&gt;

&lt;p&gt;다른 하나는 객체가 가질 수 잇는 모든 상태와 모든 행동을 시간에 독립적으로 표현하는 것이다. 이런 모델을 &lt;strong&gt;타입 모델(type diagram)&lt;/strong&gt;이라고 한다. 이 모델은 동적으로 변하는 객체의 상태가 아니라 객체가 속한 타입의 정적인 모습을 표현하기 때문에 정적 모델이라고도 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;객체를 분류하는 기준은 타입이며, 타입을 나누는 기준은 객체가 수행하는 행동이라는 사실을 기억하자. 객체를 분류하기 위해 타입을 결정한 후 프로그래밍 언어를 이용해 타입을 구현할 수 있는 한 가지 방법이 클래스라는 사실을 아는 것으로 충분하다.&lt;/p&gt;

&lt;p&gt;결국 객체지향에서 중요한 것은 동적으로 변하는 객체의 상태와 상태를 변경하는 행위이다. 클래스는 타입을 구현하기 위해 프로그래밍 언어에서 제공하는 구현 메커니즘이 된다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="ETC" />
      

      
        <summary type="html">객체지향의 사실과 오해 3장 : 타입과 추상화</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">객체지향의 사실과 오해 3장 : 추상화</title>
      <link href="https://achasan.github.io/OOP_3" rel="alternate" type="text/html" title="객체지향의 사실과 오해 3장 : 추상화" />
      <published>2022-01-02T00:00:00+09:00</published>
      <updated>2022-01-02T00:00:00+09:00</updated>
      <id>https://achasan.github.io/OOP_3</id>
      <content type="html" xml:base="https://achasan.github.io/OOP_3">&lt;h1 id=&quot;객체지향의-사실과-오해-3장--타입과-추상화&quot;&gt;객체지향의 사실과 오해 3장 : 타입과 추상화&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;일단 컴퓨터를 조작하는 것이 추상화를 구축하고, 조작하고, 추론하는 것에 관한 모든 것이라는 것을 깨닫고 나면 컴퓨터 프로그램을 작성하기 위한 중요한 전제 조건은 추상화를 정확하게 다루는 능력이라는 것이 명확해진다. - 키스 데블린&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;현재 전 세계의 주요 대도시 지하에는 지하철이 거미줄처럼 도시 곳곳에 이어져있다. 승객들이 지하철을 큰 어려움없이 이용가능한 이유는 단순하고 직관적으로 연결되어있는 지하철 노선도가 있기 때문일 것이다. 전 세계 어디든 지하철 노선도는 형식이 유사하기 때문에 어떻게 지하철을 이용해야할지 어렵지 않게 정보를 얻을 수 있다.&lt;/p&gt;

&lt;p&gt;지하철을 이용하는 승객의 목적은 하나의 역에서 다른 역으로 이동하는 것이다. 승객이 원하는 것은 어떤 역에서 출발해야하는지, 어떤 역에서 환승해야하는지, 어떤 역을 거쳐야지 가장 쉽고 빠르게 목적지에 도착가능한지를 직관적이고 단순히 보여주는 것이다. 역과 역 사이의 연결성을 얼마나 직관적으로 표현하였는지가 중요할 뿐, 다른 정보는 크게 영향을 끼치지 않는다.&lt;/p&gt;

&lt;p&gt;초기의 지하철 노선도는 지형을 구체적으로 묘사함에 따라 현재의 단순한 지하철 노선도와는 거리가 멀었다. 역과 역 사이의 연결성을 한 눈에 알아보기 힘들었다.&lt;/p&gt;

&lt;p&gt;현재의 지하철 노선도는 해리 벡이 1933년에 고안하였으며, 이는 지도가 가져야하는 정확성을 버리고 지하철 노선도의 &lt;strong&gt;‘목적’&lt;/strong&gt;에 집중한 결과이다. 모든 역의 위치와 거리도 부정확하고 경로를 표시한 직선은 실제 지하철이 이동하는 경로와 상관이 없음에도 불구하고, 현재의 지하철 노선도는 승객들이 길을 찾을 때 가장 먼저 접하게 되는 중요한 정보이다. 해리 백은 지하철 노선을 &lt;strong&gt;추상화&lt;/strong&gt;함으로써 이해하고 쉽고 단순하며 목적에 부합하는 지하철 노선도를 만들어낼 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;추상화를-통한-복잡성-극복&quot;&gt;추상화를 통한 복잡성 극복&lt;/h2&gt;

&lt;p&gt;해리 백의 지하철 노선도는 단순함을 달성한 추상화의 훌륭한 예이다. 지형 정보를 제거하고 역 사이의 연결성을 강조하여 승객들의 목적에 맞게 현실을 단순화 하였다.&lt;/p&gt;

&lt;p&gt;진정한 의미의 추상화란 현실에서 출발하되 불필요한 부분을 도려내가며 사물의 본질을 드러나게 하는 과정이라고 할 수 있다. 추상화의 목적은 불필요한 부분을 무시함으로써 현실에 존재하는 복잡성을 극복하는 것이다.&lt;/p&gt;

&lt;p&gt;추상화는 다음과 같이 정의할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떤 양상, 세부사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;복잡성을 다루기 위해 추상화는 두 차원에서 이루어진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;구체적인 사물들 간의 공통점은 취하고 차이점은 버리는 일반화를 통해 단순하게 만드는 것&lt;/li&gt;
  &lt;li&gt;중요한 부분을 강조하기위해 불필요한 세부 사항을 제거함으로써 단순하게 만드는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;복잡성을 이해하기 쉬운 수준으로 단순화하는 것이 추상화의 목적이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;객체지향과-추상화&quot;&gt;객체지향과 추상화&lt;/h2&gt;

&lt;p&gt;이번엔 다시 앨리스의 이야기로 돌아와서 추상화의 예시를 살펴보도록 하자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;아름다운 정원으로 들어가게 된 앨리스는 세 명의 정원사를 마주친다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정원사들은 트럼프처럼 생겼고, 몸에는 스페이드 무늬가 그려져 있었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;갑자기 하트 여왕의 행렬이 정원으로 들어섰다. 세 명의 정원사는 땅바닥에 엎드렸다. 행렬의 맨 앞에는 클로버를 든 열 명의 병사들이 행진하여 들어왔다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그 뒤로는 온 몸을 반짝거리는 다이아몬드로 치장한 신하들이 열을 지어 들어왔다. 그 속에는 하얀 토끼도 섞여있었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;행렬의 마지막에는 하트 왕과 하트 여왕이 모습을 드러냈다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 여왕을 쳐다보며 속으로 생각했다. ‘기껏해야 트럼프에 불과해, 무서워할 필요 없어’&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앨리스는 이야기에 등장한 모든 객체들 중에 토끼를 제외한 나머지 객체들을 트럼프로 단순화하여 바라보고 있다. 트럼프 행렬의 객체들은 각자 독특한 모습을 하고 있으며, 독특한 행동양식을 가지고 있다. 하지만 이런 것들을 무시한 채 ‘트럼프’라는 유사성을 기반으로 추상화하여 바라보는 것이다.&lt;/p&gt;

&lt;p&gt;앨리스의 이야기에 등장하는 정원사, 병사, 신하, 왕자와 공주, 하객으로 참석한 왕과 왕비들, 하트 잭, 하트 왕과 하트 여왕은 서로의 특징이 다 다르고 서로를 쉽게 구분할 수 있다. 이 처럼 명확한 경계를 가지고 서로 구별할 수 있는 구체적인 사람이나 사물을 객체지향 패러다임에서는 객체라고 한다.&lt;/p&gt;

&lt;p&gt;우리가 이 다양한 객체(인물)들을 ‘트럼프’라고 줄일 수 있는 이유는 공통적으로 ‘트럼프’라고 했을 때 떠오르는 일반적인 외형과 행동방식을 지니고 있기 때문일 것이다. 여기서 토끼는 ‘트럼프’의 행동양식과 외형을 가지지 않기 때문에 ‘트럼프’에 포함되지 않는다.&lt;/p&gt;

&lt;p&gt;다수의 개별적인 인물이 아니라 ‘트럼프’와 ‘토끼’라는 도 개의 추상화를 통해 정원을 바라보는 것은 정원의 내재된 복잡성을 효율적으로 감소시킨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;개념&quot;&gt;개념&lt;/h2&gt;

&lt;p&gt;수 많은 객체들을 개별적인 단위로 취급하기에 인간이 지닌 인지능력은 턱없이 부족하다. 따라서 인간은 본능적으로 공통적인 특성을 기준으로 객체를 여러 그룹으로 묶어 상황을 단순화 하려고 노력한다.&lt;/p&gt;

&lt;p&gt;이 처럼 공통점을 기반으로 객체들을 묶기 위한 그릇을 &lt;strong&gt;개념(concept)&lt;/strong&gt;이라고 한다. 개념이란 일반적으로 우리가 인식하고 있는 다양한 사물이나 객체에 적용할 수 있는 아이디어나 관념을 뜻한다.&lt;/p&gt;

&lt;p&gt;개념을 이용하면 객체를 여러 그룹으로 &lt;strong&gt;분류(classification)&lt;/strong&gt;할 수 있다. 앨리스가 정원에 존재하는 객체를 ‘트럼프’와 ‘토끼’로 나눈 것 처럼, 공통점을 기반으로 객체를 분류할 수 있는 일종의 체라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;객체에 어떤 개념을 적용하는 것이 가능해서 개념 그룹의 일원이 될 때 객체를 그 개념의 &lt;strong&gt;인스턴스(instance)&lt;/strong&gt;라고 한다. 따라서 객체를 다음과 같이 정의할 수도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체란 특정한 개념을 적용할 수 있는 구체적인 사물을 의미한다. 개념이 객체에 적용됐을 때 객체를 개념의 인스턴스라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;개념의-세-가지-관점&quot;&gt;개념의 세 가지 관점&lt;/h3&gt;

&lt;p&gt;일반적으로 객체의 분류 장치로서 개념을 이야기 할 때는 아래의 세 가지 관점을 함께 언급한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;심볼(symbol) : 개념을 가리키는 간략한 이름이나 명칭&lt;/li&gt;
  &lt;li&gt;내연(intension) : 개념의 완전한 정의를 나타내며, 내연의 의미를 이용해 객체가 개념에 속하는지 여부를 확인할 수 있다.&lt;/li&gt;
  &lt;li&gt;외연(extension) : 개념에 속하는 모든 객체의 집합(set)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‘트럼프’는 심볼이 되고, 몸이 납작하고 두 손 두 발이 네모난 몸 모서리에 달려 있다는 트럼프에 대한 설명이 내연, 정원사, 병사, 신하, 왕자와 공주, 하객으로 참석한 왕과 왕비들, 하트 잭, 하트 왕과 하트 여왕은 모두 트럼프의 외연을 구성하는 객체 집합에 속한다.&lt;/p&gt;

&lt;p&gt;심볼, 내연, 외연은 객체의 분류 방식에 대한 지침을 제공한다. 이 개념을 이용해 객체를 &lt;strong&gt;분류할 수 있다는 사실&lt;/strong&gt;이 중요하다. 이는 객체지향 패러다임이 복잡성을 극복하는 데 사용하는 가장 기본적인 인지 수단이기 때문이다.&lt;/p&gt;

&lt;h3 id=&quot;객체를-분류하기-위한-틀&quot;&gt;객체를 분류하기 위한 틀&lt;/h3&gt;

&lt;p&gt;어떤 객체와 마주했을 때 객체에게 적용할 개념을 결정하는 것은 해당 객체를 개념이 적용된 객체 지합의 일원으로 맞아들인다는 것을 의미한다. 앨리스의 이야기에서 트럼프라고 지칭한 객체들은 트럼프라는 개념을 적용할 수 있는 객체의 집합에 속하게 된다.&lt;/p&gt;

&lt;p&gt;객체에 어떤 개념을 적용할 것인지를 결정하는 것은 결국 객체들을 개념에 따라 분류하는 것과 동일하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;분류란 객체에 특정한 개념을 적용하는 작업이다. 객체에 특정한 개념을 적용하기로 결심했을 때 우리는 그 객체를 특정한 집합의 멤버로 분류하고 있는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;객체를 적절한 개념에 따라 분류하지 못한 애플리케이션은 유지보수가 어렵고 변화에 쉽게 대처하지 못한다. 중요한 것은 적절한 분류 체계는 애플리케이션을 다루는 개발자의 머릿속에 객체를 쉽게 찾고 조작할 수 있는 정신적인 지도를 제공한다는 것이다. 따라서 최대한 직관적으로 객체를 분류하는 것이 중요하다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="ETC" />
      

      
        <summary type="html">객체지향의 사실과 오해 3장 : 타입과 추상화</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">객체지향의 사실과 오해 2장 : 상태</title>
      <link href="https://achasan.github.io/OOP_2" rel="alternate" type="text/html" title="객체지향의 사실과 오해 2장 : 상태" />
      <published>2022-01-01T00:00:00+09:00</published>
      <updated>2022-01-01T00:00:00+09:00</updated>
      <id>https://achasan.github.io/OOP_2</id>
      <content type="html" xml:base="https://achasan.github.io/OOP_2">&lt;h1 id=&quot;객체지향의-사실과-오해-2장--상태&quot;&gt;객체지향의 사실과 오해 2장 : 상태&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체지향 패러다임은 지식을 추상화하고 추상화한 지식을 객체 안에 캡슐화함으로써 실세계 문제에 내재된 복잡성을 관리하려고 한다. 객체를 발견하고 창조하는 것은 지식과 행동을 구조화하는 문제다. - 레베카 워프스브록&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2장에서의 핵심은 &lt;strong&gt;객체지향의 패러다임이 현실세계를 모방하는 것이 아닌 현실세계를 기반으로 새로운 세계를 창조하는 것&lt;/strong&gt;이다. 객체의 상태와 행동을 통해 여러 객체들이 서로 협력하며 하나의 목표를 달성하는 원리들을 설명하면서, 현실과 객체지향의 차이점을 보여주어 어떻게 소프트웨어를 설계해야하는지 방향을 제시해준다.&lt;/p&gt;

&lt;p&gt;이를 설명하기위해 글쓴이는 이상한 나라의 앨리스를 예시로 들어 설명한다. 요약하자면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 아름다운 정원을 발견했다. 정원에 들어가는 문이 40센티미터 이하여서 들어갈 수 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 주변에 ‘마셔라’가 적혀있는 병에있는 액체를 마시자 키가 24센티미터로 줄어들었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정원으로가는 문을 열려면 열쇠를 사용해야한다. 너무 작아져서 열쇠를 사용할 수 없게되었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이번엔 탁자 아래 케이크가 있어서 먹었더니 몸이 천장에 닿을만큼 훨씬 커지게되었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 때 주변을 지나가던 토끼가 놀라 부채를 떨어뜨렸다. 앨리스는 더워서 부채를 부쳤는데 키가 60센티미터로 다시 줄었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주변을 걸어가던 앨리스는 쐐기벌레를 만난다. 쐐기벌레는 버섯을 하나 주는데, 한쪽을 먹으면 크기가 작아지고, 반대쪽을 먹으면 크기가 커지는 버섯이었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 지금까지 얻은 물건을 통해 몸의 크기를 조절해 문을 열고 아름다운 정원으로 들어갔다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;앨리스-객체&quot;&gt;앨리스 객체&lt;/h2&gt;

&lt;p&gt;위의 이야기에서 주목해야할 점은 앨리스의 키의 변화이다. 정원으로 들어가기 위한 조건을 충족시키기위해 시간의 흐름에 따라 앨리스의 &lt;strong&gt;상태&lt;/strong&gt;는 바뀌게 된다. 앨리스의 상태를 변화시키는 것은 앨리스의 &lt;strong&gt;행동&lt;/strong&gt;이다. 버섯을 먹고, 음료수를 마시고, 부채질을 하고, 케이크를 먹으면서 앨리스의 키, 즉 상태는 변화한다.&lt;/p&gt;

&lt;p&gt;또한 앨리스의 행동으로 앨리스의 키가 커지거나 작아지게되는데, 행동을 하기 전에 앨리스의 키가 얼마였느냐가 행동 후의 앨리스의 상태를 결정하게된다. &lt;strong&gt;앨리스가 한 행동의 결과는 앨리스의 상태에 의존적이다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;앨리스의 행동으로 상태가 변화하게되고, 아름다운 정원으로 들어가기위해 앨리스는 적절한 행동을 통해 문을 통과할 수 있는 상태를 만들어야할 것이다. 이는 행동 간의 순서가 중요하다는 것을 의미한다. 문을 통과하려면 케이크나 음료수를 마시는 행동이 선행되어야한다.&lt;/p&gt;

&lt;p&gt;그렇다면 지금까지의 내용을 정리해보자. 지금까지의 내용이 객체와 중요한 공통점을 공유하게될 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;앨리스는 상태를 가지며 상태는 변경가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;앨리스의 상태를 변경시키는 것은 앨리스의 행동이다.
    &lt;ul&gt;
      &lt;li&gt;행동의 결과는 상태에 의존적이고, 상태를 이용해 서술가능하다.&lt;/li&gt;
      &lt;li&gt;행동의 순서가 결과에 영향을 미친다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;앨리스는 어떤상태에 있더라도 유일하게 식별 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;객체--상태와-행동&quot;&gt;객체 : 상태와 행동&lt;/h2&gt;

&lt;p&gt;객체의 다양한특성을 효과적으로 설명하기 위해서는 객체를 상태, 행동, 식별자를 지닌 식체로 보는 것이 가장 효과적이다. 이 책에서는 객체를 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체란 식별가능한 개체 또는 사물이다. 객체는 자동차처럼 만질 수 있는 구체적인 사물일 수도 있고, 시간처럼 추상적인 개념일 수도 있다. 객체는 구별가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가진다. 소프트웨어 안에서 객체는 저장된 상태와 실행가능한 코드를 통해 구현된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;상태&quot;&gt;상태&lt;/h3&gt;

&lt;p&gt;객체가 주변 환경과의 상호작용에 어떻게 반응하는가는 그 시점까지 객체에 어떤 일이 발생했느냐에 좌우된다. 예를 들면 비행기를 타기 위해서는 항공권을 발권해야한다. 없다면 비행기를 탈 수 없고, 있다면 탈 수 있게될 것이다. 비행기를 발권여부에 대한 행동이 비행기 탑승에 영향을 미친다.&lt;/p&gt;

&lt;p&gt;과거에 발생한 행동의 이력을 통해 현재 발생한 행동의 결과를 판단하는 방식은 복잡하고 번거로우며, 이해하기 쉽지 않다. 이를 단순하게 하기위해 &lt;strong&gt;상태&lt;/strong&gt;라는 개념을 만들게 된다. 위의 예시로 따지자면 항공권 소유여부를 상태로 만들어 이전에 비행기를 발권하는 행동을 했는지 설명과 예측이 가능해진다.&lt;/p&gt;

&lt;p&gt;상태를 사용하면 과거에 얽매이지 않을 수 있다. 세상의 복잡성을 완화하고 인지 과부화를 줄이는 중요한 개념이다.&lt;/p&gt;

&lt;h3 id=&quot;상태와-프로퍼티&quot;&gt;상태와 프로퍼티&lt;/h3&gt;

&lt;p&gt;모든 것을 객체로 표현할 수는 없다. 앨리스의 키는 객체가 아니다. 음료와 케이크의 양은 객체가 아니다. 상태로 표현되는 것들이다. 이러한 단순한 값들은 객체가 아니지만 객체의 상태를 표현하는 중요한 수단이 된다.&lt;/p&gt;

&lt;p&gt;때로는 객체를 사용해 다른 객체의 상태를 표현해야할 수도 있다. 가장 간단하고 직관적이 방법은 앨리스의 상태 일부를 음료라는 객체를 이용해 표현하는 것이다. 앨리스가 음료를 들고 있을 경우 음료 객체를 상태로 표현하여 앨리스가 음료를 들고 있는 상태임을 나타내게할 수 있다.&lt;/p&gt;

&lt;p&gt;앨리스가 음료를 들고 있게될 경우, 앨리스와 음료 객체는 서로 연결되게된다.&lt;/p&gt;

&lt;p&gt;결론적으로 모든 객체의 상태는 단순한 값과 객체의 조합으로 표현되며, 객체의 상태를 구성하는 모든 특징을 통틀어 객체의 &lt;strong&gt;프로퍼티(property)&lt;/strong&gt;라고한다. 일반적으로 프로퍼티는 변경되지 않고 고정되기 때문에 ‘정적’이다. 하지만 &lt;strong&gt;프로퍼티 값(property value)&lt;/strong&gt;은 시간의 흐름에 따라 변경되어 ‘동적’이다.&lt;/p&gt;

&lt;p&gt;앨리스가 음료를 들고 있을 경우 두 객체는 서로 연결되어있다. 앨리스가 음료를 마시게 될 경우, 앨리스는 음료를 마셨다는 메시지를 음료 객체에 전달하게되고, 음료 객체는 이에 따라 상태를 변화시킬 것이다. 객체와 객체사이의 의미 있는 연결을 &lt;strong&gt;링크(link)&lt;/strong&gt;라고 한다.&lt;/p&gt;

&lt;p&gt;링크와 달리 객체를 구성하는 단순한 값은 &lt;strong&gt;속성(attribute)&lt;/strong&gt;이라고 부른다. 앨리스의 키, 음료수의 양은 단순한 값으로 표현되므로 속성이다.&lt;/p&gt;

&lt;p&gt;객체의 상태를 정의해보자, 이 책에서는 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;상태는 특정 시점에 객체가 가지고 있는 정보의 집합으로 객체의 구조적인 특징을 표현한다. 객체의 상태는 객체에 존재하는 정적인 프로퍼티와 동적인 프로퍼티 값으로 구성된다. 객체의 프로퍼티는 단순한 값과 다른 객체를 참조하는 링크로 구분할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="ETC" />
      

      
        <summary type="html">객체지향의 사실과 오해 2장 : 상태</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">객체지향의 사실과 오해 2장 : 행동, 캡슐화, 식별자</title>
      <link href="https://achasan.github.io/OOP_3" rel="alternate" type="text/html" title="객체지향의 사실과 오해 2장 : 행동, 캡슐화, 식별자" />
      <published>2022-01-01T00:00:00+09:00</published>
      <updated>2022-01-01T00:00:00+09:00</updated>
      <id>https://achasan.github.io/OOP_3</id>
      <content type="html" xml:base="https://achasan.github.io/OOP_3">&lt;h1 id=&quot;객체지향의-사실과-오해-2장--행동-캡슐화-식별자&quot;&gt;객체지향의 사실과 오해 2장 : 행동, 캡슐화, 식별자&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 글은 이전 글에 이어서 작성된 글이다. &lt;a href=&quot;https://achasan.github.io/oop_2&quot;&gt;(객체지향의 사실과 오해 2장 : 상태)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;행동&quot;&gt;행동&lt;/h2&gt;

&lt;p&gt;객체의 상태는 행동에 의해서 바뀐다. 객체의 상태를 변경하는 것은 객체의 자발적인 행동 뿐이다.&lt;/p&gt;

&lt;p&gt;객체가 취하는 행동은 객체 자신의 상태를 변경시킨다. 행동에 의해 상태가 변경되는 것은 행동이 부수효과(side effect)를 초래하는 것을 의미한다. 앨리스가 케이크를 먹는 행동은 앨리스의 키를 작게 변화시키는 부수효과를 초래한다.&lt;/p&gt;

&lt;p&gt;객체의 행동은 객체의 상태를 변경시키지만 행동의 결과는 객체의 상태에 의존적이다. 음료를 마시는 행동의 결과가 앨리스의 키에 의존한다는 것을 생각해 보면 될 것이다. 앨리스가 아름다운 정원으로 들어가기위해 문을 통과할 수 있는 지는 앨리스의 키가 현재 몇 센티미터 인지에 달려 있다. 앨리스의 키가 문보다 크다면 문을 통과할 수 없을 것이다.&lt;/p&gt;

&lt;p&gt;따라서 상태와 행동 사이에는 다음과 같은 관계가 있음을 알 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체의 행동은 상태에 영향을 받는다.&lt;/li&gt;
  &lt;li&gt;객체의 행동은 상태를 변경시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위는 다음과 같이 표현할 수도 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상호작용이 현재의 상태에 어떤 방식으로 의존하는가&lt;/li&gt;
  &lt;li&gt;상호작용이 어떻게 현재의 상태를 변경시키는가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앨리스의 이야기를 예시로 들면 아래와 같이 설명이 가능하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앨리스의 키가 40센티미터 이하라면 문을 통과할 수 있다.&lt;/li&gt;
  &lt;li&gt;문을 통과한 후에 앨리스의 위치는 아름다운 정원으로 바뀌어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;상태를 사용하면 복잡한 객체의 행동을 쉽게 이해할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;협력과-행동&quot;&gt;협력과 행동&lt;/h2&gt;

&lt;p&gt;객체는 자신에게 주어진 책임을 완수하기위해 다른 객체를 이용하고 다른 객체에게 서비스를 제공한다. 어떤 객체도 섬이 아니다. 객체는 서로 상호작용하며 협력하는 객체들의 공동체에 참여하기위해 노력한다.&lt;/p&gt;

&lt;p&gt;객체는 서로 메시지를 통해서만 의사소통이 가능하다. 객체는 수신한 메시지에 따라 행동하면서 협력에 참여하고, 자신의 상태를 변경시킨다. 또한 다른 객체의 상태 변화를 유발하기도 한다. 앨리스가 음료수를 마시면 자신의 키가 줄어들지만 음료 객체에 양을 감소시키라는 메시지를 전달하는 것처럼말이다. 메시지를 받은 음료 객체는 메시지에 따라 적절히 자신의 상태를 변경시킨다.&lt;/p&gt;

&lt;p&gt;이를 정리하면 객체의 행동은 두 가지 관점의 부수효과를 명확히 서술해야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체 자신의 상태를 변경&lt;/li&gt;
  &lt;li&gt;행동 내에서 협력하는 다른 객체에 대한 메시지를 전송&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제 행동을 정의해보자. 이 책에서는 행동을 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;행동이란 외부의 요청 또는 수신된 메시지에 응답하기 위해 동작하고 반응하는 활동이다. 행동의 결과로 객체는 자신의 상태를 변경하거나 다른 객체에게 메시지를 전달할 수 있다. 객체는 행동을 통해 다른 객체와의 협력에 참여하므로 행동은 외부에 가시적이어야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;상태-캡슐화&quot;&gt;상태 캡슐화&lt;/h2&gt;

&lt;p&gt;현실 세계의 객체와 객체지향 세계의 객체 사이에는 중요한 차이점이 있는데, 바로 객체는 &lt;strong&gt;능동적인 존재&lt;/strong&gt;라는 것이다. 현실 세계에서의 음료 객체는 혼자서는 아무것도 하지 못하는 수동적인 존재이다. 음료의 상태를 변경시키는 주체는 음료를 마시는 사람, 앨리스가 될 것이다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;strong&gt;객체지향 세계에서는 모든 객체가 능동적&lt;/strong&gt;이다. 스스로 자신의 상태를 자율적으로 관리한다. 따라서 이전부터 설명했지만, 객체가 다른 객체의 상태를 직접적으로 변경하는 것이 아닌, 메시지를 전달하기만 할 뿐 그 다음은 신경쓰지 않는다. 메시지를 전달받은 객체가 능동적으로 자신의 상태를 변경할 뿐이다.&lt;/p&gt;

&lt;p&gt;앨리스가 음료를 마시면, 앨리스 객체는 음료 객체에 자신이 먹은 음료의 양 만큼 상태를 변경하라는 메시지를 보낸다. 음료의 양을 줄일지 말지는 음료 객체가 결정할 사항이며, 앨리스 객체는 메시지를 전달하는 것까지만 행동한다. 음료의 양을 줄여달라는 요청만 보낼 뿐이다.&lt;/p&gt;

&lt;p&gt;메시지를 송신하는 자는 메시지를 수신하는 객체의 상태 변경에 대해서 전혀 알지 못한다. 이것이 &lt;strong&gt;캡슐화&lt;/strong&gt;가 의미하는 것이다. 객체는 상태를 캡슐 안에감춰둔 채 외부로 노출하지 않으며, &lt;strong&gt;객체가 외부에 노출하는 것은 행동 뿐이다&lt;/strong&gt;. 외부에서 객체에 접근할 수 있는 유일한 방법 또한 행동뿐이다.&lt;/p&gt;

&lt;p&gt;상태를 외부에 노출시키지 않고 행동을 경계로 캡슐화 시키는 것은 결과적으로 객체의 자율성을 높인다. 객체의 자율성이 높아질수록 객체의 지능도 높아진다. 지능이 높아지면 객체의 협력은 유연하고 간결해진다.&lt;/p&gt;

&lt;h2 id=&quot;식별자&quot;&gt;식별자&lt;/h2&gt;

&lt;p&gt;모든 객체는 식별자를 가지며 식별자를 이용하여 객체를 구별할 수 있다.&lt;/p&gt;

&lt;p&gt;모든 객체가 식별자를 가진다는 것은 반대로 객체가 아닌 단순한 값은 식별자를 가지지않는다는 것을 의미한다. 이는 단순한 값은 식별자를 가지지 않는 것을 의미한다. 단순한 값은 객체의 프로퍼티에 들어가는 타입 중 하나라고 이전에 설명했었다.&lt;/p&gt;

&lt;p&gt;시스템을 설계할 때는 단순한 값과 객체의 차이점을 명확히 구분하고 명시적으로 표현하는 것이 매우 중요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;값은 숫자, 문자, 날짜 시간 등 변하지 않는 양을 모델링하기 때문에 불변상태(immutable state)를 가진다.
    &lt;ul&gt;
      &lt;li&gt;따라서 두 인스턴스의 상태가 같다면 두 인스턴스를 같은 것으로 판단한다. 따로 식별하지 않는다.&lt;/li&gt;
      &lt;li&gt;상태를 이용해 두 값이 같은지 판단할 수 있는 성질을 &lt;strong&gt;동등성&lt;/strong&gt;이라고 한다.&lt;/li&gt;
      &lt;li&gt;값은 오직 상태만을 이용해 동등성을 판단하기 때문에 인스턴스를 구별하기위한 별도의 식별자를 필요로 하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;객체는 시간에 따라 변경되는 상태를 포함한다. 또한 행동으로 상태를 변경한다. 따라서 객체는 가변상태(mutable state)를 가진다.
    &lt;ul&gt;
      &lt;li&gt;타입이 같은 두 객체의 상태가 똑같더라도 두 객체는 별개의 객체로 다루어야 한다.&lt;/li&gt;
      &lt;li&gt;두 객체의 상태가 다르더라도 식별자가 같다면 두 객체는 같은 객체로 볼 수 있다. 이를 &lt;strong&gt;동일성&lt;/strong&gt;이라고 한다.&lt;/li&gt;
      &lt;li&gt;시간의 흐름에 따라 객체의 상태는 변하기 때문에 가변적인 두 객체의 동일성을 판단하기 위해서는 식별자가 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그렇다면 식별자가 무엇인지 정의해보도록 하자, 식별자는 다음으로 정의하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;식별자란 어떤 객체를 다른 객체와 구분하는데 사용하는 객체의 프로퍼티이다. 값은 식별자를 가지지 않기 때문에 상태를 이용한 동등성 검사를 통해 두 인스턴스를 비교해야한다. 객체는 상태가 변경될 수 있기 때문에 식별자를 이용한 동일성 검사를 통해 두 인스턴스를 비교할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;식별자는 객체지향에서 다형성, 캡슐화, 상속에 비해서 중요하게 다루어지지 않는 개념일 수 있다. 하지만 식별자는 객체지향 패러다임의 표현력을 높여주는 중요한 역할을 한다. 상태가 변하지 않는 값과, 상태가 변하는 객체들이 균형을 맞추며 조화를 이루어야한다.&lt;/p&gt;

&lt;p&gt;지금까지 작성한 내용을 간략하게 정리해보았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체는 상태를 가지고, &lt;strong&gt;상태는 변경가능&lt;/strong&gt;하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;상태를 변경시키는 것은 객체의 행동이다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;행동의 결과는 상태에 의존적&lt;/strong&gt;이며 상태를 이용하여 서술이 가능하다.&lt;/li&gt;
      &lt;li&gt;행동의 순서가 실행 결과에 영향을 미친다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;객체는&lt;/strong&gt; 어떤 상태에 있더라도 &lt;strong&gt;유일하게 식별&lt;/strong&gt;이 가능하다.&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="ETC" />
      

      
        <summary type="html">객체지향의 사실과 오해 2장 : 행동, 캡슐화, 식별자</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Spring framework 환경에서 git 세팅</title>
      <link href="https://achasan.github.io/spring_git_setting" rel="alternate" type="text/html" title="Spring framework 환경에서 git 세팅" />
      <published>2021-12-29T00:00:00+09:00</published>
      <updated>2021-12-29T00:00:00+09:00</updated>
      <id>https://achasan.github.io/spring_git_setting</id>
      <content type="html" xml:base="https://achasan.github.io/spring_git_setting">&lt;p&gt;기나긴 삽질 끝에 Spring을 사용하여 git 세팅하는 방법을 찾아냈다. 이전 프로젝트처럼 세팅하여 사용하면 될 줄 알았으나 JSP와 다르게 Spring에서는 Maven이라는 빌드 툴이 있어서 그런지 좀 더 디테일한 세팅이 필요한 것 같았다.&lt;/p&gt;

&lt;p&gt;가장 중요한 점은 gitignore를 사용하여 메타데이터가 원격저장소에 push 되지 않도록 해야한다는 것이다. gitignore를 세팅하지않고 사용했더니 나중에는 다른 팀원들이 프로젝트를 불러오지 못하게되어, 결국 원격저장소를 새로 만들어야하는 상황까지 나오게 되었다.&lt;/p&gt;

&lt;p&gt;Eclipse를 기준으로 스프링에서 git 세팅을 어떻게하는지 알아보자.&lt;/p&gt;

&lt;h1 id=&quot;원격저장소로-프로젝트-파일-저장하기&quot;&gt;원격저장소로 프로젝트 파일 저장하기&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-gitignore-세팅하기&quot;&gt;1. gitignore 세팅하기&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-11-13-27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 gitignore를 세팅해주어야 한다. 세팅방법은 생각보다 간단하다. &lt;a href=&quot;https://www.toptal.com/developers/gitignore&quot;&gt;gitignore.io&lt;/a&gt;사이트에서 자신이 사용하고 있는 스택을 적으면 이에 맞는 gitignore 코드를 생성해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-11-13-51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성된 코드를 복사해준다. 이 코드는 GitHub에서 새로운 프로젝트를 만들면서 생성한 gitignore 파일에 추가해줄 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-github에서-새로운-프로젝트-생성&quot;&gt;2. GitHub에서 새로운 프로젝트 생성&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-11-24-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;세팅이 완료되면 GitHub에서 새로운 저장소를 생성해준다. gitignore 파일을 추가해주고 파일 템플릿은 임의로 Java로 선택한다음 저장소를 생성해주었다.&lt;/p&gt;

&lt;p&gt;프로젝트가 생성되면 Eclipse에서 저장소를 clone해와야한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-11-26-17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 clone이 되었다면 아래와 같이 working tree에 .gitignore 파일이 있어야한다. .gitignore파일에 있는 내용을 전부 지우고 gitignore.io에서 생성한 코드를 붙여넣기 해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-11-27-00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-프로젝트와-github-저장소-연결&quot;&gt;3. 프로젝트와 GitHub 저장소 연결&lt;/h2&gt;

&lt;p&gt;여기까지 되었다면 이제 연동하려는 프로젝트를 우클릭 후 [Team] - [Share Project]를 클릭한 후clone한 원격저장소와 연결시켜주면 된다. Finish를 누르기 전에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use or create repository in parent of project&lt;/code&gt; 문항을 체크할지를 결정하자. 웬만하면 체크를 해제하고 진행하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-16-44-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후 git staging에서 push하려는 파일이 올바르게 올라와 있는지 확인 후 push하면 원격저장소로 프로젝트 파일이 push되게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;원격-저장소에서-프로젝트-불러오기&quot;&gt;원격 저장소에서 프로젝트 불러오기&lt;/h1&gt;

&lt;p&gt;push된 원격저장소를 다른 컴퓨터에서 간단하게 import 하는 방법을 알아보도록 하자.&lt;/p&gt;

&lt;p&gt;원격저장소 URL을 가지고 clone한 다음, working tree에 있는 소스파일 폴더 이름을 우클릭 한 후 [import projects]를 클릭하여 소스폴더를 import 해올 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-17-07-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;import를 하면 자동적으로 프로젝트가 생성되고, src 폴더 안에 소스파일이 포함되어 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ETC/spring_gitSetting/2022-01-29-17-09-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성된 프로젝트 폴더는 자동으로 원격저장소와 연결되며, 변경된 사항이 있을 경우 push하여 원격저장소에 저장할 수 있다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="ETC" />
      

      
        <summary type="html">기나긴 삽질 끝에 Spring을 사용하여 git 세팅하는 방법을 찾아냈다. 이전 프로젝트처럼 세팅하여 사용하면 될 줄 알았으나 JSP와 다르게 Spring에서는 Maven이라는 빌드 툴이 있어서 그런지 좀 더 디테일한 세팅이 필요한 것 같았다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">객체지향의 사실과 오해 1장 정리</title>
      <link href="https://achasan.github.io/OOP_1" rel="alternate" type="text/html" title="객체지향의 사실과 오해 1장 정리" />
      <published>2021-12-22T00:00:00+09:00</published>
      <updated>2021-12-22T00:00:00+09:00</updated>
      <id>https://achasan.github.io/OOP_1</id>
      <content type="html" xml:base="https://achasan.github.io/OOP_1">&lt;h1 id=&quot;객체지향의-사실과-오해-1장-정리&quot;&gt;객체지향의 사실과 오해 1장 정리&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ObjectOrientation.png&quot; alt=&quot;book&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;시너지를 생각하라, 전체는 부분의 합보다 크다. - 스티븐 코비&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;협력하는-객체들의-공통체&quot;&gt;협력하는 객체들의 공통체&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1장에서는 지금까지 설명해온 객체지향의 개념을 부정하며 시작한다.&lt;/li&gt;
  &lt;li&gt;객체지향 소프트웨어는 실세계의 투영, 객체란 현실 세계에 존재하는 사물에 대한 추상화이지만 이는 철학적인 개념&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;실용적인 관점에서는 설명하기에 적합하지 않다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;객체지향의 목표는 실세계를 모방하는 것이 아닌 새로운 세계를 창조하는 것&lt;/li&gt;
  &lt;li&gt;하지만 실세계의 비유가 객체지향의 다양한 측면을 이해하고 학습하는데 효과적&lt;/li&gt;
  &lt;li&gt;실세계로 객체지향을 설명해야 핵심 사상인 &lt;strong&gt;연결안정성&lt;/strong&gt;을 설명하는데 적합한 틀 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;협력하는-사람들&quot;&gt;협력하는 사람들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;한 에피소드를 이야기하며 시작.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;커피를 마시고 싶은 손님이 커피를 주문하기위해 캐시어한테 커피를 주문, 점원은 바리스타에게 커피를 한 잔 달라고 요청, 만들어진 커피는 손님에게 전달됨.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;손님이 커피를 마시기까지의 과정에 암묵적인 &lt;strong&gt;협력&lt;/strong&gt;관계가 숨어있음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;손님, 캐시어, 바리스타는 자신이 맡은 &lt;strong&gt;역할&lt;/strong&gt;이 있으며, 이를 성실히 수행하기위해 &lt;strong&gt;책임&lt;/strong&gt;을다한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사람이 사는 곳이라면 어디서나 &lt;strong&gt;역할, 책임, 협력&lt;/strong&gt;이 존재하며 이는 객체지향에서 가장 중요한 개념 세 가지가 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;요청과-응답으로-구성된-협력&quot;&gt;요청과 응답으로 구성된 협력&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;사람은 스스로 해결하지 못하는 문제와 마주치면 다른 사람에게 도움을 &lt;strong&gt;요청(request)&lt;/strong&gt; 한다. 문제의 규모가 클 수록 요청은 연쇄적으로 발생하게된다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;손님은 커피를 못 만드므로 커피를 캐시어에게 요청한다.&lt;/li&gt;
      &lt;li&gt;캐시어는 주문을 받고 바리스타에게 커피를 만들도록 요청한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;요청을 받은 사람은 주어진 책임을 다하며 다른사람의 요청에 &lt;strong&gt;응답(response)&lt;/strong&gt; 한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;바리스타는 캐시어의 요청을 받고 커피를 만든다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;캐시어는 바리스타로 부터 만들어진 커피를 받고, 손님의 요청에 응답한다.(전달)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위의 과정을 통해 다른사람과 &lt;strong&gt;협력(collaboration)&lt;/strong&gt; 할 수 있는 능력은 거대하고 복잡한 문제를 해결할 수 있는 공통를 생성시킨다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;역할과-책임&quot;&gt;역할과 책임&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;협력하는 과정 속에서 특정한 역할을 부여받게된다. 위의 과정에서는 손님, 캐시어, 바리스타라는 역할이 존재한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;여기서 역할은 책임이라는 개념을 내포한다. 경찰이 범죄자를 잡아야하는 책임, 선생님이 제자를 가르쳐야하는 책임이 있는 것처럼 말이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;역할을 맡고, 적합한 책임을 수행하는 것은 몇 가지 중요한 개념을 제시한다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;여러 사람이 동일한 역할을 수행할 수 있다.&lt;/li&gt;
      &lt;li&gt;역할은 대체 가능성을 의미한다.&lt;/li&gt;
      &lt;li&gt;책임을 수행하는 방법은 자율적으로 선택할 수 있다.&lt;/li&gt;
      &lt;li&gt;한 사람이 동시에 여러 역할을 수행할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;역할-책임-협력&quot;&gt;역할, 책임, 협력&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;손님, 캐시어, 바리스타가 가지고 있던 역할과 책임을 객체지향적으로 바꾸어보자.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사람이라는 단어를 객체로, 요청을 메시지로, 요청을 처리하는 방법을 메서드로 바꾸면 객체지향의 문맥으로 옮길 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사람들이 타인과 관계를 맺고, 협력하는 과정이 객체지향과 근본개념과 유사하다는 사실을 공감할 수 있게된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;역할과-책임을-수행하며-협력하는-객체들&quot;&gt;역할과 책임을 수행하며 협력하는 객체들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;협력의 핵심은 특정한 책임을 수행하는 역할을 간의 연쇄적인 요청과 응답을 통해 목표를 달성한다는 것이다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;목표의 규모가 커질 수록 목표는 작은 단위로 쪼개지게되며, 하나의 단위에 적합한 사람이 역할을 수행하게되면서 요청과 응답은 연쇄되어 하나의 목표를 달성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체의 경우 애플리케이션의 기능을 구현하기위해 협력하게된다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;하나의 시스템은 역할과 책임을 수행하는 객체로 분할되고, 시스템의 기능은 객체 간의 연쇄적인 요청과 응답의 흐름으로 구성된 협력으로 구현된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체의 역할은 사람의 역할과 유사하게 다음과 같은 특징을 지닌다.
    &lt;ul&gt;
      &lt;li&gt;여러 객체가 동일한 역할을 수행&lt;/li&gt;
      &lt;li&gt;역할은 대체 가능성을 의미&lt;/li&gt;
      &lt;li&gt;각 객체는 책임을 수행하는 방법을 자율적으로 선택&lt;/li&gt;
      &lt;li&gt;하나의 객체가 동시에 여러 역할을 수행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;협력-속에-사는-객체&quot;&gt;협력 속에 사는 객체&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;역할, 책임, 협력에 참여하는 주체는 객체이다. 협력 공동체의 일원으로서 객체는 두 가지의 덕목을 갖추어야 한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;객체는 충분히 협력적이어야한다.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;다른 객체의 요청에 귀 기울이고, 적극적으로 도움을 요청하는 열린 마음&lt;/li&gt;
          &lt;li&gt;모든 것을 스스로 처리하는 객체는 자멸하고만다.&lt;/li&gt;
          &lt;li&gt;수동적이어야한다는 의미가 아니다. 어떤 방식으로 처리할지는 객체 스스로가 결정해야한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;객체는 충분히 자율적이어야한다.&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;‘자기 스스로의 원칙에 따라 어떤 일을 하거나 통제하여 절제하는 것’&lt;/li&gt;
          &lt;li&gt;요청에 의해 역할을 수행하지만 방식은 스스로의 판단에 따라 결정하고 행동한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;객체지향 설계의 묘미는 다른 객체와 조화롭게 협력하는만큼 개방적인 동시에 참여하는 방법을 스스로 결정할 수 있는 자율적인 객체들의 공동체를 설계하는데 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;상태와-행동을-함께-지닌-자율적인-객체&quot;&gt;상태와 행동을 함께 지닌 자율적인 객체&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체를 상태(state)와 행동(behavior)을 함께 지닌 실체로 정의&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;객체의 자율성은 객체의 내부와 외부를 명확히 구분하는 것&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;객체의 사적인 부분은 스스로 관리하고 외부에서 간섭할수 없어야한다.&lt;/li&gt;
      &lt;li&gt;외부에서는 접근이 허락된 수단을 통해서만 객체와 의사소통&lt;/li&gt;
      &lt;li&gt;무엇(what)을 수행하는지는 알 수 있지만 어떻게(how) 수행하는지에 대해서는 알 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;전통적인 개발방법과 객체지향의 개발방법을 구분짓는 가장 핵심적인 차이이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;협력과-메시지-메서드와-자율성&quot;&gt;협력과 메시지, 메서드와 자율성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체는 메시지로 의사소통한다. 메시지를 전송하고 수신하며 소통한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;객체지향의 세계에서 협력은 메시지를 전송하는 객체와 메시지를 수신하는 객체 사이의 관계로 구성된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메시지를 수신하는 객체는 메시지를 이해할 수 있는지 판단하고, 자신만의 방법에 따라 메시지를 처리한다. 이를 메서드라고 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메시지와 메서드의 분리는 객체들 간의 자율성을 증진시킨다. 메시지에 응답하기위해 여러가지 메서드를 사용할 수 있게 되는 것이다. 이것은 &lt;strong&gt;캡슐화&lt;/strong&gt;라는 개념과 깊이 관련되어 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="ETC" />
      

      
        <summary type="html">객체지향의 사실과 오해 1장 정리</summary>
      

      
      
    </entry>
  
</feed>
