<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://achasan.github.io/tag/til/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://achasan.github.io/" rel="alternate" type="text/html" />
  <updated>2022-03-09T21:14:40+09:00</updated>
  <id>https://achasan.github.io/tag/til/feed.xml</id>

  
  
  

  
    <title type="html">Memory Repo. | </title>
  

  
    <subtitle>by Achasan</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">[정보처리기사] 3.논리 데이터베이스 설계(2)</title>
      <link href="https://achasan.github.io/Engineer_Information_Processing_2" rel="alternate" type="text/html" title="[정보처리기사] 3.논리 데이터베이스 설계(2)" />
      <published>2022-02-10T00:00:00+09:00</published>
      <updated>2022-02-10T00:00:00+09:00</updated>
      <id>https://achasan.github.io/Engineer_Information_Processing_2</id>
      <content type="html" xml:base="https://achasan.github.io/Engineer_Information_Processing_2">&lt;p&gt;정보처리기사 필기 - 논리 데이터베이스 설계&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://powerdev.tistory.com/40&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 주소에서 외워야하는 키워드 위주로 정리하여 타이핑&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관계형-데이터-모델&quot;&gt;관계형 데이터 모델&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;가장 널리 사용되는 데이터 모델, 2차원적인 표를 사용하여 데이터 상화관계를 구조하는 DB구조, 기본키와 외래키를 사용하여 관계를 표현한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;관계형-데이터-베이스의-구조&quot;&gt;관계형 데이터 베이스의 구조&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1970년 IBM에 근무하던 코드에 의해 처음 제안된 관계형 데이터베이스의 구조는 개체와 관계를 모두 릴레이션이라는 표로 작성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;관계형-데이터베이스의-relation-구조&quot;&gt;관계형 데이터베이스의 Relation 구조&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-02-11-15-47-46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;튜플tuple&quot;&gt;튜플(Tuple)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;릴레이션을 구성하는 각각의 행&lt;/li&gt;
  &lt;li&gt;속성의 모임으로 구성되어있음&lt;/li&gt;
  &lt;li&gt;파일구조에서 레코드와 같은 의미&lt;/li&gt;
  &lt;li&gt;**튜플의 수 = 카디널리티(Cardinality) = 기수 = 대응수&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;속성attribute&quot;&gt;속성(Attribute)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스를 구성하는 가장 작은 논리적 단위&lt;/li&gt;
  &lt;li&gt;데이터항목, 데이터 필드와 같은 의미(파일시스템)&lt;/li&gt;
  &lt;li&gt;개체의 특성을 기술&lt;/li&gt;
  &lt;li&gt;속성의 수 = Degree = 차수&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도메인domain&quot;&gt;도메인(Domain)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 속성이 취할 수 있는 같은 타입의 원자 값들의 집합&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;릴레이션의-특징&quot;&gt;릴레이션의 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;릴레이션에 포함된 튜플들은 모두 상이하다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;튜플 사이에는 순서가 없다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;속성의 &lt;strong&gt;명칭은 유일&lt;/strong&gt;해야한다, &lt;strong&gt;속성값은 동일한 값이 올 수 있다&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;속성의 값은 논리적으로 더 이상 쪼갤 수 없는 원자값이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관계형-데이터베이스의-제약조건--key&quot;&gt;관계형 데이터베이스의 제약조건 : Key&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;DB에서 조건을 만족하는 Key를 찾거나 순서대로 정렬할 때 튜플들을 서로 구분할 수 있는 기준이 되는 속성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Key의 종류는 후보키, 기본키, 대체키, 슈퍼키, 외래키 등이 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-02-11-15-54-26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;후보키candidate-key&quot;&gt;후보키(Candidate Key)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;튜플을 유일하게 식별하기위해 사용하는 속성의 부분집합, 기본키로 사용가능한 속성&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;모든 릴레이션에는 반드시 하나 이상의 후보키가 존재한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;후보키는 모든 튜플의 &lt;strong&gt;유일성, 최소성&lt;/strong&gt;을 만족시켜야 한다.
        &lt;ul&gt;
          &lt;li&gt;유일성(Unique) : 하나의 키 값으로 하나의 튜플을 유일하게 식별&lt;/li&gt;
          &lt;li&gt;최소성(Minimality) : 모든 레코드를 유일하게 식별하는데 꼭 필요한 속성으로 구성&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;학번, 주민번호는 유일성과 최소성을 만족하므로 기본키로 사용할 수 있는 후보키에 해당된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기본키primary-key&quot;&gt;기본키(Primary Key)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;기본키는 NULL 값을 가질 수 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 튜플을 유일하게 구별할 수 있는 속성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기본키는 후보키의 성질(최소성, 유일성)을 가진다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;학생 릴레이션에서는 학번 or 주민번호, 수강 릴레이션에서는 학번 + 과목명이 기본키가 될 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;대체키alternate-key&quot;&gt;대체키(Alternate Key)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;후보키가 둘 이상일 때, 기본키를 제외한 나머지를 대체키라고한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;슈퍼키super-key&quot;&gt;슈퍼키(Super Key)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;한 릴레이션 내에 있는 속성들의 집합으로 구성된 키를 말한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;유일성은 만족시키지만, 최소성은 만족시키지 못한다.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;외래키foreign-key&quot;&gt;외래키(Foreign Key)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;다른 릴레이션의 기본키를 참조하는 속성 혹은 속성들의 집합
    &lt;ul&gt;
      &lt;li&gt;릴레이션 간 참조관계를 표현하는데 중요한 키&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관계형-데이터베이스의-제약조건---무결성&quot;&gt;관계형 데이터베이스의 제약조건 - 무결성&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터베이스의 저장된 데이터 값과 현실세계의 실제 값이 일치하는 &lt;strong&gt;정확성&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;종류로 개체 무결성, 도메인 무결성, 참조 무결성, 사용자 정의 무결성이 존재한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-개체-무결성-entity-integrity&quot;&gt;★ 개체 무결성 (Entity Integrity)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;기본키를 구성하는 어떤 속성도 NULL 값이나 중복 값을 가질 수 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;도메인-무결성-domain-integrity&quot;&gt;도메인 무결성 (Domain Integrity)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;주어진 속성 값이 정의된 도메인이 속한 값이어야 한다는 규정
    &lt;ul&gt;
      &lt;li&gt;예를 들어 과목명에 들어가야하는 값을 국어, 수학, 영어, 컴퓨터, 미술로 정했을 경우 5개의 값만 들어가야한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-참조-무결성-referential-integrity&quot;&gt;★ 참조 무결성 (Referential Integrity)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;외래키 값은 NULL이거나 참조 릴레이션의 기본키 값과 동일해야한다. 릴레이션은 참조할 수 없는 외래키 값을 가질 수 없다는 규정&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관계-대수-및-관계-해석&quot;&gt;관계 대수 및 관계 해석&lt;/h1&gt;

&lt;h2 id=&quot;관계-해석&quot;&gt;관계 해석&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;관계 데이터의 연산을 표현하는 방법, 코드가 수학의 Predicate Calculus에 기반을 두고 관계 데이터베이스를 위해 제안
    &lt;ul&gt;
      &lt;li&gt;비절차적 특성을 가진다.&lt;/li&gt;
      &lt;li&gt;관계대수로 표현한 식은 관계 해석으로 표현 가능&lt;/li&gt;
      &lt;li&gt;튜블 관계해석, 도메인 관계해석 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;관게-대수&quot;&gt;관게 대수&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;RDBMS에서 원하는 정보를 얻기 위해 어떻게 유도하는가를 기술하는 &lt;strong&gt;절차적인 언어&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;순수 관계 연산자 : Select, Project, Join, Division&lt;/li&gt;
      &lt;li&gt;일반 집합 연산자 : UNION(합집합), INTERSECTION(교집합), DIFERENCE(차집합), CARTESIAN PRODUCT(교차곱)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="TIL" />
      

      
        <summary type="html">정보처리기사 필기 - 논리 데이터베이스 설계</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">[TIL] HTTPS를 사용하는 이유, 원리</title>
      <link href="https://achasan.github.io/HTTP_Definition" rel="alternate" type="text/html" title="[TIL] HTTPS를 사용하는 이유, 원리" />
      <published>2022-02-10T00:00:00+09:00</published>
      <updated>2022-02-10T00:00:00+09:00</updated>
      <id>https://achasan.github.io/HTTP_Definition</id>
      <content type="html" xml:base="https://achasan.github.io/HTTP_Definition">&lt;p&gt;20220210 : HTTPS를 사용하는 이유와 원리에 대해서 공부하였다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=H6lpFRpyl14&quot;&gt;Reference&lt;/a&gt; : 얄팍한 코딩사전 유튜브 영상을 정리&lt;/p&gt;

&lt;h2 id=&quot;httpshttp-secure&quot;&gt;HTTPS(Http Secure)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;HyperText Transfer Protocol Secure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;HTTPS는 기존에 사용되던 HTTP보다 공신력있고, 보안면에서 강화된 프로토콜이다. HTTPS를 사용하는 이유는 크게 두 가지로 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 서버에 보내는 정보를 다른 사람이 볼 수 없게 한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;네이버에서 로그인을 한다고 가정해보자, ID/PW를 입력하여 로그인을 누르면 네이버 서버로 정보가 전송되어진다. HTTP를 통해서 입력한 ID/PW를 전송할 경우, 입력한 값 그대로 전송되기 때문에 해커가 이를 가로채 정보를 탈취할 수 있게 된다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;HTTPS를 사용할 경우 입력한 ID/PW가 암호화되어 서버로 전송되게 된다. 해커가 정보를 가로채더라도 이를 해독할 수 없다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;피싱사이트를 구분할 수 있도록 해준다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;HTTPS는 기관으로부터 검증된 사이트만 HTTPS 사용이 허가되기 때문에 피싱 사이트의 경우 안전하지 않음이라는 표시가 뜨면서 사용자가 잘못된 사이트로 접근했는지를 알려줄 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;https-원리&quot;&gt;HTTPS 원리&lt;/h2&gt;

&lt;p&gt;그렇다면 HTTPS가 작동되게하는 원리는 무엇일까? &lt;strong&gt;대칭키와 비대칭키&lt;/strong&gt;를 통해서 안전하게 데이터를 전송할 수 있도록 해준다.&lt;/p&gt;

&lt;h3 id=&quot;대칭키&quot;&gt;대칭키&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;암호화하여 메시지를 보내고 메시지를 받아서 복호화하는 방식을 같게한다. 물론 보내는 사람과 받는 사람만 암호화/복호화 방식을 알고 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;문제는 클라이언트와 서버 둘 다 같은 대칭키를 미리 가지고 있어야한다는 건데, 이러려면 서버(혹은 클라이언트) 측에서 생성한 대칭키를 전달해야한다. 이 과정에서 해커가 대킹키를 가로챈다면 무용지물이 될 것이다. 이 방식이 &lt;strong&gt;대칭키가 가진 한계점&lt;/strong&gt;이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;비대칭키공개키&quot;&gt;비대칭키(공개키)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1970년 대에 대칭키가 가진 한계점을 해결하기위해 등장했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;비대칭키는 키를 하나가 아닌 두 개로 나누어 사용한다. 로그인하는 상황을 다시 예시로 들어보겠다. 이번에는 A라는 키와 B라는 키가 있다고 가정해보자.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;먼저 네이버에서 A키를 사람들에게 공개한다. 누구나 접근해서 A라는 키를 사용할 수 있다. 이를 &lt;strong&gt;공개키&lt;/strong&gt;라고 한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;하지만 &lt;strong&gt;A라는 키를 복호화하기 위해서는 B키가 필요&lt;/strong&gt;하다. 네이버는 B키를 공개하지않고 자기만 가지고 있는다. 이를 &lt;strong&gt;개인키&lt;/strong&gt;라고 한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;클라이언트에서 ID/PW를 입력한 다음, A키를 통해 암호화된 정보를 전송하면 서버는 자신만 가지고 있는 B키를 통해서 암호를 복호화한다. 여기서 해커가 중간에 정보를 가로챈다고 하더라도 B키가 없으면 복호화가 불가능하기 때문에 정보를 가로채더라도 복호화를 할 수 없다. 해킹이 불가능한 것이다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;네이버에서 클라이언트로 정보를 보낼 때는 B키로 암호화하여 정보를 보내게 된다. B키로 암호화된 정보는 A키로 복호화해야만 볼 수 있는 정보이다. B키는 네이버에서만 가지고 있는 개인키이기 때문에 피싱사이트에서 보낸 정보는 B키가 아니기 때문에 A키로 복호화가 되지 않는다. 네이버에서 보낸 정보만 복호화되어 정상적으로 출력되므로 이를 통해 피싱사이트를 구분할 수 있다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;https-심화&quot;&gt;HTTPS 심화&lt;/h2&gt;

&lt;p&gt;그렇다면 A키가 네이버에서 공개한 공개키라는 것을 증명할 수 있는 방법은 무엇일까? 피싱사이트에서 공개키를 네이버에서 공개한 A키라고 말하고 다닐 때 이를 증명할 수 있는 무언가가 필요할 것이다.&lt;/p&gt;

&lt;p&gt;공개키를 증명할 수 있는 민간기관이 존재하는데 이를 Certificate Authority, 줄여서 CA라고 부른다. 우리가 흔히 사용하는 브라우저에는 CA들의 목록이 내장되어있다.&lt;/p&gt;

&lt;p&gt;클라이언트와 서버가 통신을한다고 가정해보자, 클라이언트는 아직 서버를 신뢰하지 못하는 상태이다. 따라서 서버와 클라이언트는 일종의 탐색과정을 거치게 되는데 이를 handshake라고 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;먼저 클라이언트가 서버로 랜덤 데이터를 보낸다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버는 서버 측에서 생성한 랜덤데이터와 인증서를 실어서 함께 응답메시지로 보내게 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인증서를 받은 클라이언트는 브라우저에 내장된 CA의 정보를 비대칭키 시스템을 이용하여 확인한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CA의 인증을 받은 인증서들은 해당 CA의 개인키로 암호화가 되어있다. 만약 유효한 인증서일 경우 CA쪽에서 복호화가 가능하기 때문에 이를 통해 해당기관의 인증서인지를 증명해낼 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;성공적으로 복호화된 인증서에는 해당 서버의 공개키가 포함되어있다. 이때부터 클라이언트와 서버는 대칭키와 비대칭키 방식을 &lt;strong&gt;같이&lt;/strong&gt; 사용하게된다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;대칭키와 비대칭키를 같이 사용하는 이유는 비대칭키 방식이 컴퓨터에 큰 부담을 주기 때문이다.&lt;/li&gt;
      &lt;li&gt;위에서 클라이언트와 서버에서 랜덤데이터를 주고받은 것을 토대로 만들어진 대칭키는 서버와 클라이언트만 가지고 있기 때문에 대칭키방식으로 데이터를 주고받더라도 둘만 암호화/복호화가 가능하기 때문에 안전하게 데이터를 전송할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="TIL" />
      

      
        <summary type="html">20220210 : HTTPS를 사용하는 이유와 원리에 대해서 공부하였다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">[정보처리기사] 3.논리 데이터베이스 설계(1)</title>
      <link href="https://achasan.github.io/Engineer_Information_Processing_1" rel="alternate" type="text/html" title="[정보처리기사] 3.논리 데이터베이스 설계(1)" />
      <published>2022-02-10T00:00:00+09:00</published>
      <updated>2022-02-10T00:00:00+09:00</updated>
      <id>https://achasan.github.io/Engineer_Information_Processing_1</id>
      <content type="html" xml:base="https://achasan.github.io/Engineer_Information_Processing_1">&lt;p&gt;정보처리기사 필기 - 논리 데이터베이스 설계&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://powerdev.tistory.com/37&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 주소에서 외워야하는 키워드 위주로 정리하여 타이핑&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;데이터-베이스-설계&quot;&gt;데이터 베이스 설계&lt;/h1&gt;

&lt;h2 id=&quot;데이터베이스-설계-시-고려사항&quot;&gt;데이터베이스 설계 시 고려사항&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;무결성(정확성)
    &lt;ul&gt;
      &lt;li&gt;삽입, 삭제, 갱신 등의 연산 후에도 저장된 데이터가 정해진 제약조건을 만족해야한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;일관성&lt;/li&gt;
  &lt;li&gt;회복&lt;/li&gt;
  &lt;li&gt;보안&lt;/li&gt;
  &lt;li&gt;효율성 : 응답시간을 단축하여 시스템의 생산성, 저장공간 최적화가 가능해야한다.&lt;/li&gt;
  &lt;li&gt;데이터베이스 확장&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-데이터베이스-설계-순서&quot;&gt;★ 데이터베이스 설계 순서&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;요구분석 : 사용자의 요구사항 분석, 요구 조건 명세서 작성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개념적 설계 : DBMS에 독립적인 개념 스키마 설계(E-R 모델), 트랜잭션 모델링&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;정보 모델링, 개념화&lt;/li&gt;
      &lt;li&gt;현실 세계에 대한 인식을 추상적인 개념으로 표현하는 과정&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;개념 스키마 모델링, 트랜잭션 모델링, E-R 다이어그램&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;논리적 설계 : DBMS에 맞는 스키마를 설계, 트랜잭션 인터페이스 설계&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터 모델링&lt;/li&gt;
      &lt;li&gt;현실에서 발생한 자료를 컴퓨터로 처리할 수 있는 저장장치에 저장할 수 있게 특정 dBMS가 지원하는 논리적 자료구조로 변환시키는 과정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;물리적 설계 : DBMS에 맞는 물리적 구조를 설계, 트랜잭션 세부 설계&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터 구조화&lt;/li&gt;
      &lt;li&gt;디스크 등 물리적 저장장치에 저장가능한 물리적 구조의 데이터로 변환하는 과정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;구현 : DDL로 데이터베이스 생성, 트랜잭션 작성&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;DBMS의 DDL을 이용해 데이터베이스 파일 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;데이터-모델의-개념&quot;&gt;데이터 모델의 개념&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;현실 세계의 정보들을 컴퓨터에 표현하기 위해 단순화, 추상화하여 체계적으로 표현한 개념적 모형&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;-데이터-모델-구성-요소&quot;&gt;★ 데이터 모델 구성 요소&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;개체(Entity)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터베이스에 표현하려는 것, 사람이 생각하는 개념, 정보단위&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;속성(Attribute)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터의 가장 작은 논리적 단위, 파일 구조상의 데이터 항목 또는 데이터 필드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;관계(Relationship)&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;개체 간의 관계 또는 속성 간의 논리적인 연결을 의미&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-데이터-모델에-표시할-요소&quot;&gt;★ 데이터 모델에 표시할 요소&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;구조(Structure)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;논리적으로 표현된 개체 타입을 간의 관계로서 데이터 구조 및 정적 성질 표현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;연산(Operation)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;DB에 저장된 실제 데이터를 처리하는 작업에 대한 명세, 데이터베이스를 조작하는 기본 도구&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;제약 조건(Constraint)&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;실제 데이터의 논리적인 제약 조건&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-모델의-종류&quot;&gt;데이터 모델의 종류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;개념적 데이터 모델&lt;/li&gt;
  &lt;li&gt;논리적 데이터 모델 : 관계, 계층, 네트워크 모델로 구분&lt;/li&gt;
  &lt;li&gt;물리적 데이터 모델&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;개체entity&quot;&gt;개체(Entity)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터베이스에 표현하려는 것, 사람이 생각하는 개념이나 정보 단위같은 현실 세계의 대상체&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-15-44-33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;교수 : 개체(Entity)&lt;/li&gt;
  &lt;li&gt;교수번호, 성명, 전공, 소속 : 속성(Attribute)&lt;/li&gt;
  &lt;li&gt;각 행 : 개체 인스턴스(Instance)
    &lt;ul&gt;
      &lt;li&gt;개체 인스턴스는 개체를 구성하고 있는 각 속성들이 값을 가져 하나의 개체를 나타내는 것으로 &lt;strong&gt;어커런스(Occurance)&lt;/strong&gt;라고도 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개체의-특성&quot;&gt;개체의 특성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;독립적으로 존재하는 유형, 무형의 정보. 속성으로 구성&lt;/li&gt;
  &lt;li&gt;파일 시스템의 레코드에 대응&lt;/li&gt;
  &lt;li&gt;영속적으로 존재하는 개체의 집합&lt;/li&gt;
  &lt;li&gt;독립적으로 존재, 그 자체로 구별&lt;/li&gt;
  &lt;li&gt;유일한 식별자를 가짐&lt;/li&gt;
  &lt;li&gt;다른 개체의 &lt;strong&gt;하나 이상&lt;/strong&gt;의 관계&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;속성attribute&quot;&gt;속성(Attribute)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터베이스를 구성하는 가장 작은 논리적 단위&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;특성&quot;&gt;특성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;파일 구조 상 데이터 항목, 필드에 해당&lt;/li&gt;
  &lt;li&gt;개체를 구성하는 항목&lt;/li&gt;
  &lt;li&gt;개체 특성을 기술&lt;/li&gt;
  &lt;li&gt;속성의 수를 Degree, 차수라고한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;속성의-종류&quot;&gt;속성의 종류&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-15-50-44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;속성의-특성에-따른-종류&quot;&gt;속성의 특성에 따른 종류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;기본 속성(Basic Attribute) : 업무분석으로 정의, 속성중 가장 많고 일반적, 업무상 코드로 정의한 속성은 기본 속성에서 제외&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설게 속성(Designed Attribute) : 설계 과정에서 도출해내는 속성&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;업무에 필요한 데이터 외에 데이터 모델링을 위해 업무를 규칙화하려고 속성을 새로 만들거나 변형하여 정의&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파생 속성(Derived Attribute) : 다른 속성으로부터 계산이나 변형 등의 영향을 받아 발생, 되도록 적은 수로 정의&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;개체-구성-방식에-따른-분류&quot;&gt;개체 구성 방식에 따른 분류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;기본키 속성(Primary Key Attribute) : 개체의 속성을 식별할 수 있는 속성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;외래키 속성(Foreign Key Attribute) : 다른 개체와의 관계에서 포함된 속성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일반 속성 : 개체에 포함되어있고 기본키, 외래키에 포함되지않은 속성&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관계relationship&quot;&gt;관계(Relationship)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;개체와 개체 사이의 논리적인 연결을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-15-53-34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 간 관계, 속성 간 관계로 구분&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;관계의-형태&quot;&gt;관계의 형태&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-15-53-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;관계의-종류&quot;&gt;관계의 종류&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;종속 관계(Dependent Relationship) : 두 개체 사이의 주종 관계 표현, 식발 관계와 비식별 관계로 구분&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;식별 관계 : A 개체의 기본키가 B 개체의 외래키이민서 동시에 기본키&lt;/li&gt;
      &lt;li&gt;비식별 관계 : A 개체의 기본키가 B 개체의 비기본키 영역에서 외래키가 되는 관계&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;중복 관계(Redundant Relationship) : 두 개체 사이에서 2번 이상의 종속관계 발생&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;재귀 관계(Recursive Relationship) : 자기 자신과 관계를 가짐, 순환 관계&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;배타 관계(Exclusive Relationship) : 속성이나 구분자로 특성을 분할하는 관계. AND 관계, OR 관계로 구분&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;식별자identifier&quot;&gt;식별자(Identifier)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;하나의 개체 내에서 각각의 인스턴스를 유일하게 구분할 수 잇는 구분자, 모든 객체는 하나 이상의 식별자를 반드시 가진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;식별자-분류-기준&quot;&gt;식별자 분류 기준&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;대표성 여부 : 두 식별자 모두 개체를 유일하게 식별가능해야한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;주 식별자(Primaty Identifier) : 하나의 개체에 하나만 존재, 기본키로 지정됨&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;주 식별자의 4가지 특성 : 유일성, 최소성, 불변성, 존재성&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;보조 식별자(Alternate Identifier) : 주 식별자를 대신하여 개체를 식별&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;하나의 객체에 한 개 이상 존재&lt;/li&gt;
          &lt;li&gt;물리적 테이블에서 유니크 인덱스로 지정되어 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스스로 생성 여부 :&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;내부 식별자(Internal Identifier) : 개체 내에서 스스로 만들어지는 식별자&lt;/li&gt;
      &lt;li&gt;외부 식별자(Foreign Identifier) : 외부 개체의 식별자를 가져와 사용하는 식별자(연결자 역할)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단일 속성 여부&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;단일 식별자(Single Identifier) : 주 식별자가 한 가지 속성으로만 구성된 식별자(PK)&lt;/li&gt;
      &lt;li&gt;복합 식별자(Composite Identifier) : 주 식별자가 두 개 이상의 속성으로 구성된 식별자(PK + FK)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;대체 여부&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;원조 식별자(Original Identifier) :&lt;/li&gt;
      &lt;li&gt;대리 식별자(Surrogate Identifier) : 주 식별자의 속성이 두 개 잇아인 경우 속성들을 하나의 속서응로 묶어 사용하는 식별자, 인조 식별자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;e-r개체-관계-모델&quot;&gt;E-R(개체-관계) 모델&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;개념적 모델의 가장 대표적인 것, 1976년 피터 첸(Peter Chen)에 의해 제안됨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;E-R 다이어그램으로 표현, 1:1 / 1:N / N:M 등의 관계 유형을 제한없이 나타 낼 수 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;E-R 다이어그램&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;E-R 모델의 기본 아이디어를 기호를 사용하여 시각적으로 표현&lt;/li&gt;
      &lt;li&gt;피터 첸 표기법, 정보 공학 표기법, 바커 표기법 등이 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;피터-첸-표기법&quot;&gt;피터 첸 표기법&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-16-11-38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정보-공학-표기법&quot;&gt;정보 공학 표기법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1981년 클리프 핀겔쉬타인과 제임스 마틴이 공동 개발&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL/2022-02-10-16-11-56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="TIL" />
      

      
        <summary type="html">정보처리기사 필기 - 논리 데이터베이스 설계</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">[정보처리기사] 3.논리 데이터베이스 설계(3)</title>
      <link href="https://achasan.github.io/Engineer_Information_Processing_3" rel="alternate" type="text/html" title="[정보처리기사]  3.논리 데이터베이스 설계(3)" />
      <published>2022-02-10T00:00:00+09:00</published>
      <updated>2022-02-10T00:00:00+09:00</updated>
      <id>https://achasan.github.io/Engineer_Information_Processing_3</id>
      <content type="html" xml:base="https://achasan.github.io/Engineer_Information_Processing_3">&lt;p&gt;정보처리기사 필기 - 논리 데이터베이스 설계&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://powerdev.tistory.com/42&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 주소에서 외워야하는 키워드 위주로 정리하여 타이핑&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;정규화normalization&quot;&gt;정규화(Normalization)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;잘못 설계된 관계형 스키마를 더 작은 속성의 세트로 쪼개어 바람직한 스키마로 만들어 가는 과정&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;논리적 설계 단계에서 수행한다.&lt;/li&gt;
  &lt;li&gt;데이터의 중복성 최소, 이상 발생 방지, 저장공간 최소화, 일관성 보장, 정확성 증가&lt;/li&gt;
  &lt;li&gt;조회 성능은 저하한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;이상의-개념-및-종류&quot;&gt;이상의 개념 및 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;정규화를 거치지 않으면 DB 내의 데이터들이 중복되어 의도와 상관없이 삽입, 삭제, 갱신이 일어나는 현상&lt;/li&gt;
  &lt;li&gt;이상의 종류 : 삽입 이상, 삭제 이상, 갱신 이상&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-정규화-과정&quot;&gt;★ 정규화 과정&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2022-02-11-16-46-49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;반정규화역정규화--denomalization&quot;&gt;반정규화(역정규화 : Denomalization)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;정규화된 데이터를 통합, 중복, 분리하는 과정&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;정규화 규칙을 위배하는 행위&lt;/li&gt;
  &lt;li&gt;성능 향상, 효율성 증가&lt;/li&gt;
  &lt;li&gt;일관성, 정합성 저하&lt;/li&gt;
  &lt;li&gt;테이블 통합, 테이블 분할, 테이블 추가, 중복 속성 추가가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;테이블-통합&quot;&gt;테이블 통합&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;조인되는 경우가 많은 두 테이블일 경우 통합
    &lt;ul&gt;
      &lt;li&gt;Not Null, Default, Check 등의 제약조건 설계가 어려워짐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;테이블-분할&quot;&gt;테이블 분할&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;테이블을 수직, 수평으로 분할한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;중복-테이블-추가&quot;&gt;중복 테이블 추가&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;여러 다른 테이블을 사용해야 하는 경우에 중복 테이블 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;중복-속성-추가&quot;&gt;중복 속성 추가&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;조인하여 여러 데이터를 처리할 때 자주 사용하는 속성을 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;시스템-카탈로그-system-catalog&quot;&gt;시스템 카탈로그 (System Catalog)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;일반 사용자&lt;/strong&gt;도 SQL을 사용하여 내용을 검색해 볼 수 있다.&lt;/li&gt;
  &lt;li&gt;DBMS가 스스로 생성하고 유지한다.&lt;/li&gt;
  &lt;li&gt;사용자가 SQL문을 실행시켜 기본테이블, 인덱스 등에 변화를 주면 &lt;strong&gt;시스템이 자동으로 갱신&lt;/strong&gt;한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;메타-데이터&quot;&gt;메타 데이터&lt;/h3&gt;
&lt;p&gt;시스템 카탈로그에 저장된 정보를 메타 데이터라고 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;테이블, 인덱스, 뷰 등&lt;/li&gt;
  &lt;li&gt;아이디, 패스워드, 접근권한 등&lt;/li&gt;
  &lt;li&gt;기본키, 외래키, NULL값 허용 여부&lt;/li&gt;
  &lt;li&gt;함수, 프로시저, 트리거 등에 대한 정보&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;카탈로그--데이터-사전을-참조하기위한-dbms-내의-모듈-시스템&quot;&gt;카탈로그 / 데이터 사전을 참조하기위한 DBMS 내의 모듈 시스템&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DDL 번역기&lt;/li&gt;
  &lt;li&gt;DCL 번역기&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Directory&lt;/strong&gt; : 사용자 접근 X, 시스템만 접근 가능&lt;/li&gt;
  &lt;li&gt;질의 최적화기&lt;/li&gt;
  &lt;li&gt;트랜잭션 처리기&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Achasan</name>
        
        
      </author>

      

      
        <category term="TIL" />
      

      
        <summary type="html">정보처리기사 필기 - 논리 데이터베이스 설계</summary>
      

      
      
    </entry>
  
</feed>
